cmake_minimum_required(VERSION 3.12)

include(CheckCCompilerFlag)

project(disarm64)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")

if (MSVC)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W4 -D_CRT_SECURE_NO_WARNINGS /wd4018 /wd4146 /wd4244 /wd4245 /wd4267 /wd4310")
else ()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -Wpedantic")
endif ()


find_package(Python3 3.6 REQUIRED)

check_c_compiler_flag("-fstrict-aliasing" SUPPORT_STRICT_ALIASING)
if (SUPPORT_STRICT_ALIASING)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstrict-aliasing")
endif ()

# we assume warning_level 3 here
set(WARNING_FLAGS "-Wmissing-prototypes" "-Wshadow" "-Wwrite-strings" "-Winline" "-Wstrict-prototypes"
    "-Wundef" "-Wno-overlength-strings" "-Wcast-align" "-Wcast-align=strict" "-Wno-nested-anon-types")
foreach (flag ${WARNING_FLAGS})
    unset(SUPPORT_FLAG CACHE)
    check_c_compiler_flag(${flag} SUPPORT_FLAG)
    if (SUPPORT_FLAG)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${flag}")
    endif ()
endforeach ()

set(DISARM64_SOURCES "encode.c" "decode.c" "format.c" "classify.c")
set(DISARM64_HEADERS "disarm64.h")

add_library(disarm64 ${DISARM64_SOURCES} ${DISARM64_HEADERS})
add_library(disarm64::disarm64 ALIAS disarm64)
target_include_directories(disarm64 PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_BINARY_DIR}/include")

set(PRIV_INC ${CMAKE_CURRENT_BINARY_DIR}/include/disarm64-private.inc)
set(PUB_INC ${CMAKE_CURRENT_BINARY_DIR}/include/disarm64-public.inc)

add_custom_command(
    OUTPUT ${PRIV_INC} ${PUB_INC}
    COMMAND ${Python3_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/parse.py ${PUB_INC} ${PRIV_INC} ${CMAKE_CURRENT_SOURCE_DIR}/desc.txt --feature-desc ${CMAKE_CURRENT_SOURCE_DIR}/feat.txt
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/desc.txt ${CMAKE_CURRENT_SOURCE_DIR}/feat.txt ${CMAKE_CURRENT_SOURCE_DIR}/parse.py
    COMMENT "Building table for disarm64"
)

add_custom_target(
    disarm64-table ALL
    DEPENDS ${PRIV_INC} ${PUB_INC}
)

list(APPEND DISARM64_HEADERS ${PUB_INC})

add_dependencies(disarm64 disarm64-table)

set_target_properties(disarm64 PROPERTIES
    VERSION 1.0.0
    PUBLIC_HEADER "${DISARM64_HEADERS}")

install(TARGETS disarm64 EXPORT disarm64
    LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT shlib
    ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT lib
    PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/disarm64" COMPONENT dev)
