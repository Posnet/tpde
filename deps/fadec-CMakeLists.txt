cmake_minimum_required(VERSION 3.12)

include(CheckCCompilerFlag)

project(fadec)

# Options
set(FADEC_ARCHMODE "both" CACHE STRING "Support only 32-bit x86, 64-bit x86 or both")
set_property(CACHE FADEC_ARCHMODE PROPERTY STRINGS both only32 only64)

option(FADEC_UNDOC "Include undocumented instructions" FALSE)
option(FADEC_DECODE "Include support for decoding" TRUE)
option(FADEC_ENCODE "Include support for encoding" TRUE)
option(FADEC_ENCODE2 "Include support for new encoding API" FALSE)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")

if (MSVC)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W4 -D_CRT_SECURE_NO_WARNINGS /wd4018 /wd4146 /wd4244 /wd4245 /wd4267 /wd4310")
else ()
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -Wpedantic")
endif ()


find_package(Python3 3.6 REQUIRED)

check_c_compiler_flag("-fstrict-aliasing" SUPPORT_STRICT_ALIASING)
if (SUPPORT_STRICT_ALIASING)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstrict-aliasing")
endif ()

# we assume warning_level 3 here
set(WARNING_FLAGS "-Wmissing-prototypes" "-Wshadow" "-Wwrite-strings" "-Wswitch-default" "-Winline" "-Wstrict-prototypes"
    "-Wundef" "-Wno-overlength-strings" "-Wcast-align" "-Wcast-align=strict")
foreach (flag ${WARNING_FLAGS})
    unset(SUPPORT_FLAG CACHE)
    check_c_compiler_flag(${flag} SUPPORT_FLAG)
    if (SUPPORT_FLAG)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${flag}")
    endif ()
endforeach ()

set(FADEC_SOURCES "")
set(FADEC_HEADERS "")
set(FADEC_COMPONENTS "")

if (FADEC_DECODE)
    list(APPEND FADEC_SOURCES "decode.c" "format.c")
    list(APPEND FADEC_HEADERS "fadec.h")
    list(APPEND FADEC_COMPONENTS "decode")
endif ()
if (FADEC_ENCODE)
    list(APPEND FADEC_SOURCES "encode.c")
    list(APPEND FADEC_HEADERS "fadec-enc.h")
    list(APPEND FADEC_COMPONENTS "encode")
endif ()
if (FADEC_ENCODE2)
    list(APPEND FADEC_SOURCES "encode2.c")
    list(APPEND FADEC_HEADERS "fadec-enc2.h")
    list(APPEND FADEC_COMPONENTS "encode2")
endif ()

set(GEN_ARGS "")
if (NOT FADEC_ARCHMODE STREQUAL "only64")
    list(APPEND GEN_ARGS "--32")
endif ()
if (NOT FADEC_ARCHMODE STREQUAL "only32")
    list(APPEND GEN_ARGS "--64")
endif ()
if (FADEC_UNDOC)
    list(APPEND GEN_ARGS "--with-undoc")
endif ()

add_library(fadec ${FADEC_SOURCES} ${FADEC_HEADERS})
add_library(fadec::fadec ALIAS fadec)
file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/include")
target_include_directories(fadec PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}" "${CMAKE_CURRENT_BINARY_DIR}/include")

foreach (component ${FADEC_COMPONENTS})
    set(PRIV_INC ${CMAKE_CURRENT_BINARY_DIR}/include/fadec-${component}-private.inc)
    set(PUB_INC ${CMAKE_CURRENT_BINARY_DIR}/include/fadec-${component}-public.inc)

    add_custom_command(
        OUTPUT ${PRIV_INC} ${PUB_INC}
        COMMAND ${Python3_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/parseinstrs.py ${component} ${CMAKE_CURRENT_SOURCE_DIR}/instrs.txt
        ${PUB_INC} ${PRIV_INC} ${GEN_ARGS}
        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/instrs.txt ${CMAKE_CURRENT_SOURCE_DIR}/parseinstrs.py
        COMMENT "Building table for ${component}"
    )

    add_custom_target(
        ${component}-table ALL
        DEPENDS ${PRIV_INC} ${PUB_INC}
    )

    #target_sources(fadec PRIVATE ${PRIV_INC})
    #target_sources(fadec PUBLIC ${PUB_INC})
    #set_source_files_properties(${PRIV_INC} PROPERTIES GENERATED 1)
    #set_source_files_properties(${PUB_INC} PROPERTIES GENERATED 1)
    list(APPEND FADEC_HEADERS ${PUB_INC})

    add_dependencies(fadec ${component}-table)
endforeach ()

set_target_properties(fadec PROPERTIES
    VERSION 1.0.0
    PUBLIC_HEADER "${FADEC_HEADERS}")

install(TARGETS fadec EXPORT fadec
    LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT shlib
    ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}" COMPONENT lib
    PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/fadec" COMPONENT dev)
