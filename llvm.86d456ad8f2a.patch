diff --git a/clang/CMakeLists.txt b/clang/CMakeLists.txt
index c6496167d382..95a5e78387a3 100644
--- a/clang/CMakeLists.txt
+++ b/clang/CMakeLists.txt
@@ -26,7 +26,7 @@ include(GNUInstallDirs)
 include(GetDarwinLinkerVersion)
 
 if(CLANG_BUILT_STANDALONE)
-  set(CMAKE_CXX_STANDARD 17 CACHE STRING "C++ standard to conform to")
+  set(CMAKE_CXX_STANDARD 20 CACHE STRING "C++ standard to conform to")
   set(CMAKE_CXX_STANDARD_REQUIRED YES)
   set(CMAKE_CXX_EXTENSIONS NO)
 
diff --git a/clang/lib/CodeGen/BackendUtil.cpp b/clang/lib/CodeGen/BackendUtil.cpp
index 4195bb87cf0d..03aec660cab7 100644
--- a/clang/lib/CodeGen/BackendUtil.cpp
+++ b/clang/lib/CodeGen/BackendUtil.cpp
@@ -120,6 +120,8 @@ static cl::opt<PGOOptions::ColdFuncOpt> ClPGOColdFuncAttr(
                           "Mark cold functions with optnone.")));
 
 extern cl::opt<InstrProfCorrelator::ProfCorrelatorKind> ProfileCorrelate;
+
+static cl::opt<bool> ClUseTPDE("use-tpde", cl::Optional, cl::desc(""), cl::init(false));
 } // namespace llvm
 
 namespace {
@@ -1114,6 +1116,13 @@ void EmitAssemblyHelper::RunOptimizationPipeline(
   }
 }
 
+namespace tpde_llvm::x64 {
+extern bool compile_llvm(llvm::LLVMContext       &ctx,
+                         llvm::Module            &mod,
+                         llvm::raw_pwrite_stream &llvm_stream,
+                         bool                     print_liveness);
+} // namespace tpde_llvm::x64
+
 void EmitAssemblyHelper::RunCodegenPipeline(
     BackendAction Action, std::unique_ptr<raw_pwrite_stream> &OS,
     std::unique_ptr<llvm::ToolOutputFile> &DwoOS) {
@@ -1122,6 +1131,26 @@ void EmitAssemblyHelper::RunCodegenPipeline(
   // FIXME: make the new PM work with the codegen pipeline.
   legacy::PassManager CodeGenPasses;
 
+  if (Action == Backend_EmitObj && ClUseTPDE.getValue()) {
+#ifndef NDEBUG
+    llvm::errs() << "You wanted TPDE\n";
+#endif
+    const bool profileTime = llvm::timeTraceProfilerEnabled();
+    if (profileTime) llvm::timeTraceProfilerBegin("TPDE", "");
+
+    //Timer tpdeTimer("tpde", "TPDE Time");
+    //tpdeTimer.startTimer();
+    if (!tpde_llvm::x64::compile_llvm(TheModule->getContext(), *TheModule, *OS, false)) {
+      llvm::errs() << "Compilation failed!\n";
+      const char fmt[] = "TPDE failed";
+      Diags.Report(Diags.getCustomDiagID(DiagnosticsEngine::Error, fmt));
+    }
+    //tpdeTimer.stopTimer();
+    if (profileTime) llvm::timeTraceProfilerEnd();
+    return;
+  }
+
+
   // Append any output we need to the pass manager.
   switch (Action) {
   case Backend_EmitAssembly:
diff --git a/clang/lib/CodeGen/CMakeLists.txt b/clang/lib/CodeGen/CMakeLists.txt
index 2a179deddcc3..f59aa1385f0f 100644
--- a/clang/lib/CodeGen/CMakeLists.txt
+++ b/clang/lib/CodeGen/CMakeLists.txt
@@ -33,6 +33,8 @@ set(LLVM_LINK_COMPONENTS
   TransformUtils
   )
 
+add_subdirectory(tpde2)
+
 # Workaround for MSVC ARM64 performance regression:
 # https://developercommunity.visualstudio.com/t/Compiling-a-specific-code-for-ARM64-with/10444970
 # Since /O1 and /O2 represent a set of optimizations,
@@ -156,4 +158,5 @@ add_clang_library(clangCodeGen
   clangFrontend
   clangLex
   clangSerialization
+  clangTPDE2
   )
diff --git a/clang/lib/CodeGen/tpde2/CMakeLists.txt b/clang/lib/CodeGen/tpde2/CMakeLists.txt
new file mode 100644
index 000000000000..c0ad953ff96d
--- /dev/null
+++ b/clang/lib/CodeGen/tpde2/CMakeLists.txt
@@ -0,0 +1,77 @@
+# a bit hacky but w/e
+
+include_directories(tpde/include)
+include_directories(tpde-llvm/include)
+
+set(FADEC_DIR "${CLANG_SOURCE_DIR}/lib/CodeGen/tpde2/deps/fadec")
+set(FADEC_BIN_DIR "${CLANG_BINARY_DIR}/lib/CodeGen/tpde2/deps/fadec")
+include_directories(${FADEC_DIR})
+include_directories(${FADEC_BIN_DIR}/include)
+include_directories("${CLANG_SOURCE_DIR}/lib/CodeGen/tpde2/deps")
+add_subdirectory("${CLANG_SOURCE_DIR}/lib/CodeGen/tpde2/deps/small_vector")
+include_directories("${CLANG_SOURCE_DIR}/lib/CodeGen/tpde2/deps/hopscotch-map/include")
+
+find_package(Python3 3.6 REQUIRED)
+
+set(FADEC_COMPONENTS "decode;encode;encode2")
+
+
+foreach (component ${FADEC_COMPONENTS})
+    set(PRIV_INC ${FADEC_BIN_DIR}/include/fadec-${component}-private.inc)
+    set(PUB_INC ${FADEC_BIN_DIR}/include/fadec-${component}-public.inc)
+
+    add_custom_command(
+            OUTPUT ${PRIV_INC} ${PUB_INC}
+            COMMAND ${Python3_EXECUTABLE} ${FADEC_DIR}/parseinstrs.py --64 ${component} ${FADEC_DIR}/instrs.txt
+            ${PUB_INC} ${PRIV_INC} ${GEN_ARGS}
+            DEPENDS ${FADEC_DIR}/instrs.txt
+            COMMENT "Building table for ${component}"
+    )
+
+    set_source_files_properties("${PRIV_INC}"
+            PROPERTIES GENERATED TRUE
+            HEADER_FILE_ONLY TRUE)
+
+    set_source_files_properties("${PUB_INC}"
+            PROPERTIES GENERATED TRUE
+            HEADER_FILE_ONLY TRUE)
+
+    #add_custom_target(
+    #        tpdeFadec${component}Table ALL
+    #        DEPENDS ${PRIV_INC} ${PUB_INC}
+    #)
+endforeach ()
+
+add_clang_library(clangTPDEFADEC
+        ${FADEC_DIR}/decode.c
+        ${FADEC_DIR}/format.c
+        ${FADEC_DIR}/encode.c
+        ${FADEC_DIR}/encode2.c
+        ${FADEC_BIN_DIR}/include/fadec-encode-private.inc
+        ${FADEC_BIN_DIR}/include/fadec-encode-public.inc
+        ${FADEC_BIN_DIR}/include/fadec-decode-private.inc
+        ${FADEC_BIN_DIR}/include/fadec-decode-public.inc
+        ${FADEC_BIN_DIR}/include/fadec-encode2-private.inc
+        ${FADEC_BIN_DIR}/include/fadec-encode2-public.inc
+
+        DEPENDS
+
+        LINK_LIBS
+)
+
+set(TPDE_LLVM_DIR "${CLANG_SOURCE_DIR}/lib/CodeGen/tpde2/tpde-llvm/")
+include_directories(${TPDE_LLVM_DIR}/include)
+include_directories(${TPDE_LLVM_DIR}/src)
+
+add_clang_library(clangTPDE2
+        ${TPDE_LLVM_DIR}/src/x64/LLVMCompilerX64.cpp
+
+        DEPENDS
+        clangTPDEFADEC
+        gch::small_vector
+
+        LINK_LIBS
+        clangTPDEFADEC
+        gch::small_vector
+)
+
diff --git a/llvm/CMakeLists.txt b/llvm/CMakeLists.txt
index 12618966c4ad..673d1a1aab53 100644
--- a/llvm/CMakeLists.txt
+++ b/llvm/CMakeLists.txt
@@ -58,7 +58,7 @@ set(LLVM_LIBDIR_SUFFIX "" CACHE STRING "Define suffix of library directory name
 include(GNUInstallDirs)
 
 # This C++ standard is required to build LLVM.
-set(LLVM_REQUIRED_CXX_STANDARD 17)
+set(LLVM_REQUIRED_CXX_STANDARD 20)
 
 # If we find that the cache contains CMAKE_CXX_STANDARD it means that it's a old CMakeCache.txt
 # and we can just inform the user and then reset it.
