From 77d0148cef719edc29850489fb1203e06744e1c2 Mon Sep 17 00:00:00 2001
From: Alexis Engelke <engelke@in.tum.de>
Date: Wed, 15 Jan 2025 11:00:36 +0100
Subject: [PATCH] [Clang][Flang] Add TPDE back-end

To compile, add the tpde2 repository to clang/lib/CodeGen/tpde2, e.g.
via a symlink. TPDE can be enabled using "-mllvm -use-tpde".
---
 clang/lib/CodeGen/BackendUtil.cpp      | 24 +++++++++++++++++++++++
 clang/lib/CodeGen/CMakeLists.txt       |  5 +++++
 flang/lib/Frontend/CMakeLists.txt      |  2 ++
 flang/lib/Frontend/FrontendActions.cpp | 27 ++++++++++++++++++++++++++
 4 files changed, 58 insertions(+)

diff --git a/clang/lib/CodeGen/BackendUtil.cpp b/clang/lib/CodeGen/BackendUtil.cpp
index e765bbf637a6..8d1e05a24080 100644
--- a/clang/lib/CodeGen/BackendUtil.cpp
+++ b/clang/lib/CodeGen/BackendUtil.cpp
@@ -9,6 +9,7 @@
 #include "clang/CodeGen/BackendUtil.h"
 #include "BackendConsumer.h"
 #include "LinkInModulesPass.h"
+#include "tpde-llvm/LLVMCompiler.hpp"
 #include "clang/Basic/CodeGenOptions.h"
 #include "clang/Basic/Diagnostic.h"
 #include "clang/Basic/LangOptions.h"
@@ -120,6 +121,9 @@ static cl::opt<PGOOptions::ColdFuncOpt> ClPGOColdFuncAttr(
                           "Mark cold functions with optnone.")));
 
 extern cl::opt<InstrProfCorrelator::ProfCorrelatorKind> ProfileCorrelate;
+
+cl::opt<bool> ClUseTPDE("use-tpde", cl::Optional, cl::desc(""),
+                        cl::init(false));
 } // namespace llvm
 
 namespace {
@@ -1118,6 +1122,26 @@ void EmitAssemblyHelper::RunOptimizationPipeline(
 void EmitAssemblyHelper::RunCodegenPipeline(
     BackendAction Action, std::unique_ptr<raw_pwrite_stream> &OS,
     std::unique_ptr<llvm::ToolOutputFile> &DwoOS) {
+  if (Action == Backend_EmitObj && ClUseTPDE.getValue()) {
+    PrettyStackTraceString CrashInfo("TPDE");
+    llvm::TimeTraceScope TimeScope("TPDE");
+
+    auto Compiler = tpde_llvm::LLVMCompiler::create(TargetTriple);
+    if (!Compiler) {
+      Diags.Report(Diags.getCustomDiagID(DiagnosticsEngine::Error,
+                                         "TPDE unsupported architecture"));
+      return;
+    }
+    std::vector<uint8_t> ObjectBuf;
+    if (!Compiler->compile_to_elf(*TheModule, ObjectBuf)) {
+      Diags.Report(Diags.getCustomDiagID(DiagnosticsEngine::Error,
+                                         "TPDE compilation failed"));
+      return;
+    }
+    OS->pwrite(reinterpret_cast<char *>(ObjectBuf.data()), ObjectBuf.size(), 0);
+    return;
+  }
+
   // We still use the legacy PM to run the codegen pipeline since the new PM
   // does not work with the codegen pipeline.
   // FIXME: make the new PM work with the codegen pipeline.
diff --git a/clang/lib/CodeGen/CMakeLists.txt b/clang/lib/CodeGen/CMakeLists.txt
index 2a179deddcc3..1a17f8bc0beb 100644
--- a/clang/lib/CodeGen/CMakeLists.txt
+++ b/clang/lib/CodeGen/CMakeLists.txt
@@ -157,3 +157,8 @@ add_clang_library(clangCodeGen
   clangLex
   clangSerialization
   )
+
+set(LLVM_FOUND TRUE)
+set(LIT ${LLVM_MAIN_SRC_DIR}/utils/lit/lit.py)
+add_subdirectory(tpde2)
+target_link_libraries(clangCodeGen PRIVATE $<BUILD_LOCAL_INTERFACE:tpde_llvm>)
diff --git a/flang/lib/Frontend/CMakeLists.txt b/flang/lib/Frontend/CMakeLists.txt
index c20b9096aff4..7540191ffb93 100644
--- a/flang/lib/Frontend/CMakeLists.txt
+++ b/flang/lib/Frontend/CMakeLists.txt
@@ -62,5 +62,7 @@ add_flang_library(flangFrontend
 
   CLANG_LIBS
   clangBasic
+  clangCodeGen
   clangDriver
 )
+target_link_libraries(flangFrontend PRIVATE $<BUILD_LOCAL_INTERFACE:tpde_llvm>)
diff --git a/flang/lib/Frontend/FrontendActions.cpp b/flang/lib/Frontend/FrontendActions.cpp
index 5c86bd947ce7..f473e490dd58 100644
--- a/flang/lib/Frontend/FrontendActions.cpp
+++ b/flang/lib/Frontend/FrontendActions.cpp
@@ -41,6 +41,7 @@
 #include "mlir/Support/LLVM.h"
 #include "mlir/Target/LLVMIR/Import.h"
 #include "mlir/Target/LLVMIR/ModuleTranslation.h"
+#include "tpde-llvm/LLVMCompiler.hpp"
 #include "clang/Basic/Diagnostic.h"
 #include "clang/Basic/DiagnosticFrontend.h"
 #include "clang/Basic/FileManager.h"
@@ -79,6 +80,12 @@
 
 #include "flang/Tools/CLOptions.inc"
 
+namespace llvm {
+
+extern llvm::cl::opt<bool> ClUseTPDE;
+
+} // end namespace llvm
+
 using namespace Fortran::frontend;
 
 // Declare plugin extension function declarations.
@@ -924,6 +931,26 @@ static void generateMachineCodeOrAssemblyImpl(clang::DiagnosticsEngine &diags,
           (act == BackendActionTy::Backend_EmitAssembly)) &&
          "Unsupported action");
 
+  if (llvm::ClUseTPDE.getValue() && act == BackendActionTy::Backend_EmitObj) {
+    llvm::TimeTraceScope TimeScope("TPDE");
+
+    llvm::Triple triple(llvmModule.getTargetTriple());
+    auto compiler = tpde_llvm::LLVMCompiler::create(triple);
+    if (!compiler) {
+      diags.Report(diags.getCustomDiagID(clang::DiagnosticsEngine::Error,
+                                         "TPDE unsupported architecture"));
+      return;
+    }
+    std::vector<uint8_t> objectBuf;
+    if (!compiler->compile_to_elf(llvmModule, objectBuf)) {
+      diags.Report(diags.getCustomDiagID(clang::DiagnosticsEngine::Error,
+                                         "TPDE compilation failed"));
+      return;
+    }
+    os.pwrite(reinterpret_cast<char *>(objectBuf.data()), objectBuf.size(), 0);
+    return;
+  }
+
   // Set-up the pass manager, i.e create an LLVM code-gen pass pipeline.
   // Currently only the legacy pass manager is supported.
   // TODO: Switch to the new PM once it's available in the backend.
-- 
2.47.0

