// src/codegen/encoder.rs
// THIS IS MANDATORY - REPLACES 1500+ LINES OF MANUAL ENCODING

use crate::core::{ValuePartRef, AsmReg};
use crate::x64::encoder::{X64Encoder, EncodingError};

// Note: ScratchReg will be implemented as part of the v2 architecture
// For now, we use AsmReg directly

pub trait TemplateEncoder<T> {
    fn encode<'arena>(encoder: &mut X64Encoder<'arena>, inputs: &[ValuePartRef], output: AsmReg) -> Result<(), EncodingError>;
}

// Placeholder types for generated encoders
pub struct AddF32;
pub struct SubF32;
pub struct MulF32;
pub struct DivF32;

// TODO: These will be generated by build.rs
impl TemplateEncoder<AddF32> for AddF32 {
    fn encode<'arena>(encoder: &mut X64Encoder<'arena>, inputs: &[ValuePartRef], output: AsmReg) -> Result<(), EncodingError> {
        // This will be generated from template
        todo!("Generated encoder for AddF32")
    }
}