// SPDX-FileCopyrightText: 2024 Tobias Kamm <tobias.kamm@tum.de>
// SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
//
// SPDX-License-Identifier: LicenseRef-Proprietary
#pragma once

// TODO(ts): I'd really like to keep these as normal headers in the source tree
// and generate this header
// TODO(ts): then also work with placeholders like
// -- DECLS_HERE --
// or
// -- IMPL_HERE --

namespace tpde_encgen::arm64 {
static constexpr inline char ENCODER_TEMPLATE_BEGIN[] =
    R"(// SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
// SPDX-FileCopyrightText: 2024 Tobias Kamm <tobias.kamm@tum.de>
//
// SPDX-License-Identifier: LicenseRef-Proprietary AND CC0-1.0

// NOTE: This file is autogenerated by tpde-encodegen. Please DO NOT edit this file
// as all changes will be overwritten once the file is generated again.
// NOTE: Some parts of this file are subject to the default license of TPDE
// and only the autogenerated code falls under the CC0-1.0 license

// SPDX-SnippetBegin
// SPDX-License-Identifier: LicenseRef-Proprietary
#pragma once

#include <variant>

#include "tpde/base.hpp"
#include "tpde/arm64/CompilerA64.hpp"

// Helper macros for assembling in the compiler
#if defined(ASMD)
    #error Got definition for ASM macros from somewhere else. Maybe you included compilers for multiple architectures?
#endif

#define ASMD(...) ASMC(this->derived(), __VA_ARGS__)

namespace tpde_encodegen {

using namespace tpde;

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          typename BaseTy,
          typename Config>
struct EncodeCompiler {
    using CompilerA64  = tpde::a64::CompilerA64<Adaptor, Derived, BaseTy, Config>;
    using ScratchReg   = typename CompilerA64::ScratchReg;
    using AsmReg       = typename CompilerA64::AsmReg;
    using ValuePartRef = typename CompilerA64::ValuePartRef;
    using Assembler    = typename CompilerA64::Assembler;
    using Label        = typename Assembler::Label;
    using ValLocalIdx  = typename CompilerA64::ValLocalIdx;
    using SymRef       = typename Assembler::SymRef;

    struct AsmOperand {
        struct Expr {
            std::variant<AsmReg, ScratchReg> base;
            std::variant<AsmReg, ScratchReg> index;
            i64                              scale;
            i64                              disp;

            explicit Expr()
                : base{AsmReg::make_invalid()}, scale{0}, disp{0} {}

            explicit Expr(AsmReg base, i64 disp = 0)
                : base(base), scale(0), disp(disp) {}

            explicit Expr(ScratchReg &&base, i64 disp = 0)
                : base(std::move(base)), scale(0), disp(disp) {}

            AsmReg base_reg() const noexcept {
                if (std::holds_alternative<AsmReg>(base)) {
                    return std::get<AsmReg>(base);
                }
                return std::get<ScratchReg>(base).cur_reg;
            }

            [[nodiscard]] bool has_base() const noexcept {
                if (std::holds_alternative<AsmReg>(base)) {
                    return std::get<AsmReg>(base).valid();
                }
                return true;
            }

            AsmReg index_reg() const noexcept {
                assert(scale != 0 && "index_reg() called on invalid index");
                assert((scale != 1 || has_base()) &&
                       "Expr with unscaled index must have base");
                if (std::holds_alternative<AsmReg>(index)) {
                    return std::get<AsmReg>(index);
                }
                return std::get<ScratchReg>(index).cur_reg;
            }

            [[nodiscard]] bool has_index() const noexcept { return scale != 0; }
        };

        struct Immediate {
            union {
                u64                const_u64;
                std::array<u8, 64> const_bytes;
            };

            u32 bank, size;
        };

        // TODO(ts): evaluate the use of std::variant
        // TODO(ts): I don't like the ValuePartRefs but we also don't want to
        // force all the operands into registers at the start of the encoding...
        std::variant<std::monostate,
                     ValuePartRef,
                     ValuePartRef *,
                     ScratchReg,
                     Expr,
                     Immediate>
            state;

        AsmOperand() = default;

        AsmOperand(AsmOperand &) = delete;

        AsmOperand(AsmOperand &&other) noexcept {
            state       = std::move(other.state);
            other.state = std::monostate{};
        }

        AsmOperand &operator=(const AsmOperand &) noexcept = delete;

        AsmOperand &operator=(AsmOperand &&other) noexcept {
            if (this == &other) {
                return *this;
            }
            state       = std::move(other.state);
            other.state = std::monostate{};
            return *this;
        }

        // ReSharper disable CppNonExplicitConvertingConstructor
        // NOLINTBEGIN(*-explicit-constructor)

        // reg can't be overwritten
        AsmOperand(AsmReg reg) noexcept : state{Expr(reg)} {}

        // no salvaging
        AsmOperand(const ScratchReg &reg) noexcept {
            assert(!reg.cur_reg.invalid());
            state = Expr(reg.cur_reg);
        }

        // salvaging
        AsmOperand(ScratchReg &&reg) noexcept {
            assert(!reg.cur_reg.invalid());
            state = std::move(reg);
        }

        // no salvaging
        AsmOperand(ValuePartRef &ref) noexcept {
            if (ref.is_const) {
                state = Immediate{.const_bytes = ref.state.c.const_data,
                                  .bank        = ref.state.c.bank,
                                  .size        = ref.state.c.size};
                return;
            }
            // TODO(ts): check if it is a variable_ref/frame_ptr and then
            // turning it into an Address?
            state = &ref;
        }

        // salvaging
        AsmOperand(ValuePartRef &&ref) noexcept {
            if (ref.is_const) {
                state = Immediate{.const_bytes = ref.state.c.const_data,
                                  .bank        = ref.state.c.bank,
                                  .size        = ref.state.c.size};
                return;
            }
            state = std::move(ref);
        }

        AsmOperand(Expr &&expr) noexcept {
            state = std::move(expr);
        }

        AsmOperand(Immediate imm) noexcept { state = imm; }

        // NOLINTEND(*-explicit-constructor)
        // ReSharper restore CppNonExplicitConvertingConstructor

        [[nodiscard]] bool is_expr() const noexcept {
            return std::holds_alternative<Expr>(state);
        }

        [[nodiscard]] bool is_imm() const noexcept {
            return std::holds_alternative<Immediate>(state);
        }

        [[nodiscard]] const Immediate &imm() const noexcept {
            return std::get<Immediate>(state);
        }

        [[nodiscard]] ValuePartRef &val_ref() noexcept {
            return std::get<ValuePartRef>(state);
        }

        std::optional<u64> encodeable_as_imm() const noexcept {
            if (is_imm() && imm().size <= 8) {
                return imm().const_u64;
            }
            return std::nullopt;
        }
        std::optional<std::pair<AsmReg, u64>> encodeable_with_mem_uoff12(EncodeCompiler *compiler, u64 off, unsigned shift) noexcept;

        AsmReg as_reg(EncodeCompiler *compiler) noexcept;
        bool   try_salvage(ScratchReg &, u8 bank) noexcept;
        AsmReg as_reg_try_salvage(EncodeCompiler *, ScratchReg &, u8 bank) noexcept;
        void   try_salvage_or_materialize(EncodeCompiler *compiler,
                                                 ScratchReg     &dst_scratch,
                                                 u8              bank,
                                                 u32             size) noexcept;
        // compatibility
        bool          try_salvage(AsmReg &, ScratchReg &, u8 bank) noexcept;
        void          try_salvage_or_materialize(EncodeCompiler *compiler,
                                                 AsmReg         &dst_reg,
                                                 ScratchReg     &dst_scratch,
                                                 u8              bank,
                                                 u32             size) noexcept;
        void          reset() noexcept;
    };

    CompilerA64 *derived() noexcept {
        return static_cast<CompilerA64 *>(static_cast<Derived *>(this));
    }

    const CompilerA64 *derived() const noexcept {
        return static_cast<const CompilerA64 *>(
            static_cast<const Derived *>(this));
    }

    struct FixedRegBackup {
        ScratchReg  scratch;
        ValLocalIdx local_idx;
        u32         part;
        u32         lock_count;
    };

    void scratch_alloc_specific(AsmReg                              reg,
                                ScratchReg                         &scratch,
                                std::initializer_list<AsmOperand *> operands,
                                FixedRegBackup &backup_reg) noexcept;

    void scratch_check_fixed_backup(ScratchReg     &scratch,
                                    FixedRegBackup &backup_reg,
                                    bool            is_ret_reg) noexcept;

// SPDX-SnippetEnd
// SPDX-SnippetBegin
// SPDX-License-Identifier: CC0-1.0
// clang-format off
)";

static constexpr inline char ENCODER_TEMPLATE_END[] = R"(
};
// SPDX-SnippetEnd
)";

static constexpr inline char ENCODER_IMPL_TEMPLATE_BEGIN[] = R"(

// SPDX-SnippetBegin
// SPDX-License-Identifier: LicenseRef-Proprietary
// clang-format on
template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
std::optional<std::pair<typename EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmReg, u64>> EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    encodeable_with_mem_uoff12(EncodeCompiler<Adaptor, Derived, BaseTy, Config> *compiler, u64 off, unsigned shift) noexcept {
    Expr *expr = std::get_if<Expr>(&state);
    if (!expr || !expr->has_base()) {
        return std::nullopt;
    }

    u64 res_off = expr->disp + off;
    if (res_off >= (u64{0x1000} << shift) || (res_off & ((1 << shift) - 1))) {
        return std::nullopt;
    }
    if (res_off == 0 && expr->has_index()) {
        // In this case, try index encoding.
        return std::nullopt;
    }

    if (!expr->has_index()) {
        return std::make_pair(expr->base_reg(), res_off);
    }
    if ((expr->scale & (expr->scale - 1)) != 0) {
        return std::nullopt;
    }

    ScratchReg scratch{compiler->derived()};
    AsmReg base_reg = expr->base_reg();
    AsmReg index_reg = expr->index_reg();
    if (std::holds_alternative<ScratchReg>(expr->base)) {
        scratch = std::move(std::get<ScratchReg>(expr->base));
    } else if (std::holds_alternative<ScratchReg>(expr->index)) {
        scratch = std::move(std::get<ScratchReg>(expr->index));
    } else {
        (void)scratch.alloc_gp();
    }
    const auto scale_shift = __builtin_ctzl(expr->scale);
    AsmReg dst = scratch.cur_reg;
    ASMC(compiler->derived(), ADDx_lsl, dst, base_reg, index_reg, scale_shift);
    if (expr->disp != 0) {
        expr->base = std::move(scratch);
        expr->index = AsmReg::make_invalid();
        expr->scale = 0;
    } else {
        state = std::move(scratch);
    }

    return std::make_pair(dst, res_off);
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
typename EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmReg
    EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::as_reg(
        EncodeCompiler<Adaptor, Derived, BaseTy, Config> *compiler) noexcept {
    if (std::holds_alternative<ScratchReg>(state)) {
        return std::get<ScratchReg>(state).cur_reg;
    }
    if (std::holds_alternative<ValuePartRef>(state)) {
        auto      &val_ref = std::get<ValuePartRef>(state);
        const auto reg     = val_ref.alloc_reg();
        val_ref.lock();
        return reg;
    }
    if (std::holds_alternative<ValuePartRef *>(state)) {
        auto      &val_ref = *std::get<ValuePartRef *>(state);
        const auto reg     = val_ref.alloc_reg();
        val_ref.lock();
        return reg;
    }
    if (is_imm()) {
        const auto &data = std::get<Immediate>(state);
        ScratchReg  dst{compiler->derived()};
        const auto  dst_reg = dst.alloc_from_bank(data.bank);
        compiler->derived()->materialize_constant(
            data.const_bytes, data.bank, data.size, dst_reg);
        state = std::move(dst);
        return dst_reg;
    }
    Expr *expr = std::get_if<Expr>(&state);
    if (!expr) {
        // TODO(ts): allow mem operands with scratchreg param?
        assert(0);
        exit(1);
    }

    if (expr->has_base() && !expr->has_index() && expr->disp == 0) {
        return expr->base_reg();
    }

    ScratchReg scratch{compiler->derived()};
    if (!expr->has_base() && !expr->has_index()) {
        AsmReg dst = scratch.alloc_gp();
        compiler->derived()->materialize_constant(expr->disp, 0, 8, dst);
        expr->disp = 0;
    } else if (!expr->has_base() && expr->has_index()) {
        AsmReg index_reg = expr->index_reg();
        if (std::holds_alternative<ScratchReg>(expr->index)) {
            scratch = std::move(std::get<ScratchReg>(expr->index));
        } else {
            (void)scratch.alloc_gp();
        }
        AsmReg dst = scratch.cur_reg;
        if ((expr->scale & (expr->scale - 1)) == 0) {
            const auto shift = __builtin_ctzl(expr->scale);
            ASMC(compiler->derived(), LSLxi, dst, index_reg, shift);
        } else {
            ScratchReg scratch2{compiler->derived()};
            AsmReg tmp2 = scratch2.alloc_gp();
            compiler->derived()->materialize_constant(expr->scale, 0, 8, tmp2);
            ASMC(compiler->derived(), MULx, dst, index_reg, tmp2);
        }
    } else if (expr->has_base() && expr->has_index()) {
        AsmReg base_reg = expr->base_reg();
        AsmReg index_reg = expr->index_reg();
        if (std::holds_alternative<ScratchReg>(expr->base)) {
            scratch = std::move(std::get<ScratchReg>(expr->base));
        } else if (std::holds_alternative<ScratchReg>(expr->index)) {
            scratch = std::move(std::get<ScratchReg>(expr->index));
        } else {
            (void)scratch.alloc_gp();
        }
        AsmReg dst = scratch.cur_reg;
        if ((expr->scale & (expr->scale - 1)) == 0) {
            const auto shift = __builtin_ctzl(expr->scale);
            ASMC(compiler->derived(), ADDx_lsl, dst, base_reg, index_reg, shift);
        } else {
            ScratchReg scratch2{compiler->derived()};
            AsmReg tmp2 = scratch2.alloc_gp();
            compiler->derived()->materialize_constant(expr->scale, 0, 8, tmp2);
            ASMC(compiler->derived(), MULx, tmp2, index_reg, tmp2);
            ASMC(compiler->derived(), ADDx, dst, base_reg, tmp2);
        }
    } else if (expr->has_base() && !expr->has_index()) {
        AsmReg base_reg = expr->base_reg();
        if (std::holds_alternative<ScratchReg>(expr->base)) {
            scratch = std::move(std::get<ScratchReg>(expr->base));
        } else {
            (void)scratch.alloc_gp();
        }
        AsmReg dst = scratch.cur_reg;
        if (ASMIFC(compiler->derived(), ADDxi, dst, base_reg, expr->disp)) {
            expr->disp = 0;
        } else {
            ASMC(compiler->derived(), MOVx, dst, base_reg);
        }
    } else {
        assert(0);
    }

    AsmReg dst = scratch.cur_reg;
    if (expr->disp != 0) {
        if (!ASMIFC(compiler->derived(), ADDxi, dst, dst, expr->disp)) {
            ScratchReg scratch2{compiler->derived()};
            AsmReg tmp2 = scratch2.alloc_gp();
            compiler->derived()->materialize_constant(expr->disp, 0, 8, tmp2);
            ASMC(compiler->derived(), ADDx, dst, dst, tmp2);
        }
    }

    state = std::move(scratch);
    return dst;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::try_salvage(
    ScratchReg &dst_scratch, const u8 bank) noexcept {
    if (!dst_scratch.cur_reg.invalid()) {
        return false;
    }

    if (std::holds_alternative<ScratchReg>(state)) {
        assert(std::get<ScratchReg>(state).compiler->register_file.reg_bank(
                   std::get<ScratchReg>(state).cur_reg)
               == bank);
        dst_scratch = std::move(std::get<ScratchReg>(state));
        state       = std::monostate{};
        return true;
    } else if (std::holds_alternative<ValuePartRef>(state)) {
        auto &ref = std::get<ValuePartRef>(state);
        assert(ref.bank() == bank);
        if (ref.can_salvage()) {
            auto reg = ref.salvage();
            dst_scratch.alloc_specific(reg);
            return true;
        }
        // dst = std::get<ValuePartRef>(state).alloc_reg();
        // return;
    } else if (std::holds_alternative<Immediate>(state)) {
        this->as_reg(static_cast<Derived *>(dst_scratch.compiler));
        assert(std::holds_alternative<ScratchReg>(state));
        assert(std::get<ScratchReg>(state).compiler->register_file.reg_bank(
                   std::get<ScratchReg>(state).cur_reg)
               == bank);

        dst_scratch = std::move(std::get<ScratchReg>(state));
        state       = std::monostate{};
        return true;
    }

    dst_scratch.alloc_from_bank(bank);
    return false;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
typename EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmReg
    EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    as_reg_try_salvage(EncodeCompiler *compiler,
                       ScratchReg &dst_scratch,
                       u8 bank) noexcept {
    if (try_salvage(dst_scratch, bank)) {
        return dst_scratch.cur_reg;
    }
    return as_reg(compiler);
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::try_salvage(
    AsmReg &dst_reg, ScratchReg &dst_scratch, const u8 bank) noexcept {
    const auto res = try_salvage(dst_scratch, bank);
    dst_reg        = dst_scratch.cur_reg;
    return res;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    try_salvage_or_materialize(EncodeCompiler *compiler,
                               AsmReg         &dst_reg,
                               ScratchReg     &dst_scratch,
                               u8              bank,
                               u32             size) noexcept {
    try_salvage_or_materialize(compiler, dst_scratch, bank, size);
    dst_reg = dst_scratch.cur_reg;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    try_salvage_or_materialize(EncodeCompiler *compiler,
                               ScratchReg     &dst_scratch,
                               u8              bank,
                               u32             size) noexcept {
    if (!this->try_salvage(dst_scratch, bank)) {
        if (bank == 0) {
            if (std::holds_alternative<Immediate>(state)) {
                const auto &data = std::get<Immediate>(state);
                compiler->derived()->materialize_constant(data.const_bytes,
                                                          data.bank,
                                                          data.size,
                                                          dst_scratch.cur_reg);
                return;
            }

            AsmReg val = this->as_reg(compiler);
            if (size <= 4) {
                ASMC(compiler->derived(), MOVw, dst_scratch.cur_reg, val);
            } else {
                ASMC(compiler->derived(), MOVx, dst_scratch.cur_reg, val);
            }
        } else {
            AsmReg val = this->as_reg(compiler);
            ASMC(compiler->derived(), MOV8b, dst_scratch.cur_reg, val);
        }
    }
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    reset() noexcept {
    state = std::monostate{};
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::scratch_alloc_specific(
    AsmReg                              reg,
    ScratchReg                         &scratch,
    std::initializer_list<AsmOperand *> operands,
    FixedRegBackup                     &backup_reg) noexcept {
    if (!derived()->register_file.is_fixed(reg)) [[likely]] {
        scratch.alloc_specific(reg);
        return;
    }

    const auto bank = derived()->register_file.reg_bank(reg);
    if (bank != 0) {
        // TODO(ts): need to know the size
        assert(0);
        exit(1);
    }

    const auto alloc_backup = [this, &backup_reg, &scratch, reg, bank]() {
        const auto bak_reg    = backup_reg.scratch.alloc_from_bank(bank);
        auto      &reg_file   = derived()->register_file;
        auto      &assignment = reg_file.assignments[reg.id()];
        backup_reg.local_idx  = assignment.local_idx;
        backup_reg.part       = assignment.part;
        backup_reg.lock_count = assignment.lock_count;

        assignment.local_idx  = CompilerA64::INVALID_VAL_LOCAL_IDX;
        assignment.part       = 0;
        assignment.lock_count = 0;

        assert(scratch.cur_reg.invalid());
        scratch.cur_reg = reg;

        ASMD(MOV64rr, bak_reg, reg);
    };

    // check if one of the operands holds the fixed register
    for (auto *op_ptr : operands) {
        auto &op = op_ptr->state;
        if (std::holds_alternative<ScratchReg>(op)) {
            auto &op_scratch = std::get<ScratchReg>(op);
            if (op_scratch.cur_reg == reg) {
                scratch = std::move(op_scratch);
                op_scratch.alloc_from_bank(bank);
                ASMD(MOVx, op_scratch.cur_reg, reg);
                return;
            }
            continue;
        }

        if (std::holds_alternative<ValuePartRef>(op)) {
            auto &op_ref = std::get<ValuePartRef>(op);
            if (!op_ref.is_const) {
                assert(!op_ref.state.v.locked);
                const auto ap = op_ref.assignment();
                if (ap.register_valid()) {
                    assert(AsmReg{ap.full_reg_id()} != reg);
                }
            }
            continue;
        }

        if (std::holds_alternative<ValuePartRef *>(op)) {
            auto &op_ref = *std::get<ValuePartRef *>(op);
            if (!op_ref.is_const) {
                assert(!op_ref.state.v.locked);
                const auto ap = op_ref.assignment();
                if (ap.register_valid()) {
                    assert(AsmReg{ap.full_reg_id()} != reg);
                }
            }
            continue;
        }

        if (std::holds_alternative<typename AsmOperand::Expr>(op)) {
            auto &expr = std::get<typename AsmOperand::Expr>(op);
            if (expr.base_reg() == reg) {
                if (std::holds_alternative<ScratchReg>(expr.base)) {
                    auto &op_scratch = std::get<ScratchReg>(expr.base);
                    scratch          = std::move(op_scratch);
                    op_scratch.alloc_from_bank(bank);
                    ASMD(MOVx, op_scratch.cur_reg, reg);
                } else {
                    alloc_backup();
                    expr.base = backup_reg.scratch.cur_reg;
                }
                return;
            }
            if (expr.scale != 0 && expr.index_reg() == reg) {
                if (std::holds_alternative<ScratchReg>(expr.index)) {
                    auto &op_scratch = std::get<ScratchReg>(expr.index);
                    scratch          = std::move(op_scratch);
                    op_scratch.alloc_from_bank(bank);
                    ASMD(MOVx, op_scratch.cur_reg, reg);
                } else {
                    alloc_backup();
                    expr.index = backup_reg.scratch.cur_reg;
                }
                return;
            }
            continue;
        }
    }

    // otherwise temporarily store it somewhere else
    alloc_backup();
    return;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::
    scratch_check_fixed_backup(ScratchReg     &scratch,
                               FixedRegBackup &backup_reg,
                               const bool      is_ret_reg) noexcept {
    if (backup_reg.scratch.cur_reg.invalid()) [[likely]] {
        return;
    }

    assert(!scratch.cur_reg.invalid());
    auto &reg_file        = derived()->register_file;
    auto &assignment      = reg_file.assignments[scratch.cur_reg.id()];
    assignment.local_idx  = backup_reg.local_idx;
    assignment.part       = backup_reg.part;
    assignment.lock_count = backup_reg.lock_count;

    assert(reg_file.reg_bank(scratch.cur_reg) == 0);
    if (is_ret_reg) {
        // TODO(ts): allocate another scratch? Though at this point the scratch
        // regs have not been released yet so we might need to spill...

        // need to switch around backup and reg so it can be returned as a
        // ScratchReg
        assert(false);
        // ASMD(XCHG64rr, scratch.cur_reg, backup_reg.scratch.cur_reg);
        // scratch.cur_reg            = backup_reg.scratch.cur_reg;
        // backup_reg.scratch.cur_reg = AsmReg::make_invalid();
    } else {
        ASMD(MOVx, scratch.cur_reg, backup_reg.scratch.cur_reg);

        scratch.cur_reg = AsmReg::make_invalid();
        backup_reg.scratch.reset();
    }
}

// clang-format off
// SPDX-SnippetEnd
// SPDX-SnippetBegin
// SPDX-License-Identifier: CC0-1.0
)";


static constexpr inline char ENCODER_IMPL_TEMPLATE_END[] = R"(
} // namespace tpde_encodegen

#undef ASMD
// SPDX-SnippetEnd
)";
} // namespace tpde_encgen::arm64
