// SPDX-FileCopyrightText: 2024 Tobias Kamm <tobias.kamm@tum.de>
// SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
//
// SPDX-License-Identifier: LicenseRef-Proprietary
#pragma once

// TODO(ts): I'd really like to keep these as normal headers in the source tree
// and generate this header
// TODO(ts): then also work with placeholders like
// -- DECLS_HERE --
// or
// -- IMPL_HERE --

namespace tpde_encgen::x64 {
static constexpr inline char ENCODER_TEMPLATE_BEGIN[] =
    R"(// SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
// SPDX-FileCopyrightText: 2024 Tobias Kamm <tobias.kamm@tum.de>
//
// SPDX-License-Identifier: LicenseRef-Proprietary AND CC0-1.0

// NOTE: This file is autogenerated by tpde-encodegen. Please DO NOT edit this file
// as all changes will be overwritten once the file is generated again.
// NOTE: Some parts of this file are subject to the default license of TPDE
// and only the autogenerated code falls under the CC0-1.0 license

// SPDX-SnippetBegin
// SPDX-License-Identifier: LicenseRef-Proprietary
#pragma once

#include <variant>

#include "base.hpp"
#include "tpde/x64/CompilerX64.hpp"

// Helper macros for assembling in the compiler
#if defined(ASMD)
    #error Got definition for ASM macros from somewhere else. Maybe you included compilers for multiple architectures?
#endif

#define ASMD(...) ASMC(this->derived(), __VA_ARGS__)

namespace tpde_encodegen {

using namespace tpde;

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          typename BaseTy,
          typename Config>
struct EncodeCompiler {
    using CompilerX64  = tpde::x64::CompilerX64<Adaptor, Derived, BaseTy, Config>;
    using ScratchReg   = typename CompilerX64::ScratchReg;
    using AsmReg       = typename CompilerX64::AsmReg;
    using ValuePartRef = typename CompilerX64::ValuePartRef;
    using Assembler    = typename CompilerX64::Assembler;
    using Label        = typename Assembler::Label;
    using ValLocalIdx  = typename CompilerX64::ValLocalIdx;
    using SymRef       = typename Assembler::SymRef;

    struct AsmOperand {
        struct ArbitraryAddress {
            std::variant<AsmReg, ScratchReg> base;
            std::variant<AsmReg, ScratchReg> index;
            i64                              scale;
            i64                              disp;

            explicit ArbitraryAddress()
                : base{AsmReg::make_invalid()}, scale{0}, disp{0} {}

            explicit ArbitraryAddress(AsmReg base, i64 disp = 0)
                : base(base), scale(0), disp(disp) {}

            explicit ArbitraryAddress(ScratchReg &&base, i64 disp = 0)
                : base(std::move(base)), scale(0), disp(disp) {}

            AsmReg base_reg() const noexcept {
                if (std::holds_alternative<AsmReg>(base)) {
                    return std::get<AsmReg>(base);
                }
                return std::get<ScratchReg>(base).cur_reg;
            }

            AsmReg index_reg() const noexcept {
                if (std::holds_alternative<AsmReg>(index)) {
                    return std::get<AsmReg>(index);
                }
                return std::get<ScratchReg>(index).cur_reg;
            }

            [[nodiscard]] bool has_index() const noexcept { return scale != 0; }
        };

        struct LegalAddress {
            std::variant<AsmReg, ScratchReg> base;
            std::variant<AsmReg, ScratchReg> index;
            u8                               scale;
            i32                              disp;

            AsmReg base_reg() const noexcept {
                if (std::holds_alternative<AsmReg>(base)) {
                    return std::get<AsmReg>(base);
                }
                return std::get<ScratchReg>(base).cur_reg;
            }

            AsmReg index_reg() const noexcept {
                if (std::holds_alternative<AsmReg>(index)) {
                    return std::get<AsmReg>(index);
                }
                return std::get<ScratchReg>(index).cur_reg;
            }

            [[nodiscard]] bool has_index() const noexcept { return scale != 0; }
        };

        struct Immediate {
            union {
                u64                const_u64;
                std::array<u8, 64> const_bytes;
            };

            u32 bank, size;
        };

        // TODO(ts): evaluate the use of std::variant
        // TODO(ts): I don't like the ValuePartRefs but we also don't want to
        // force all the operands into registers at the start of the encoding...
        std::variant<std::monostate,
                     ScratchReg,
                     ValuePartRef,
                     ValuePartRef *,
                     AsmReg,
                     ArbitraryAddress,
                     LegalAddress,
                     Immediate>
            state;

        AsmOperand() = default;

        AsmOperand(AsmOperand &) = delete;

        AsmOperand(AsmOperand &&other) noexcept {
            state       = std::move(other.state);
            other.state = std::monostate{};
        }

        AsmOperand &operator=(const AsmOperand &) noexcept = delete;

        AsmOperand &operator=(AsmOperand &&other) noexcept {
            if (this == &other) {
                return *this;
            }
            state       = std::move(other.state);
            other.state = std::monostate{};
            return *this;
        }

        // ReSharper disable CppNonExplicitConvertingConstructor
        // NOLINTBEGIN(*-explicit-constructor)

        // reg can't be overwritten
        AsmOperand(AsmReg reg) noexcept : state{reg} {}

        // no salvaging
        AsmOperand(const ScratchReg &reg) noexcept {
            assert(!reg.cur_reg.invalid());
            state = reg.cur_reg;
        }

        // salvaging
        AsmOperand(ScratchReg &&reg) noexcept {
            assert(!reg.cur_reg.invalid());
            state = std::move(reg);
        }

        // no salvaging
        AsmOperand(ValuePartRef &ref) noexcept {
            if (ref.is_const) {
                state = Immediate{.const_bytes = ref.state.c.const_data,
                                  .bank        = ref.state.c.bank,
                                  .size        = ref.state.c.size};
                return;
            }
            // TODO(ts): check if it is a variable_ref/frame_ptr and then
            // turning it into an Address?
            state = &ref;
        }

        // salvaging
        AsmOperand(ValuePartRef &&ref) noexcept {
            if (ref.is_const) {
                state = Immediate{.const_bytes = ref.state.c.const_data,
                                  .bank        = ref.state.c.bank,
                                  .size        = ref.state.c.size};
                return;
            }
            state = std::move(ref);
        }

        AsmOperand(ArbitraryAddress &&addr) noexcept {
            state = std::move(addr);
        }

        AsmOperand(Immediate imm) noexcept { state = imm; }

        // NOLINTEND(*-explicit-constructor)
        // ReSharper restore CppNonExplicitConvertingConstructor

        [[nodiscard]] bool is_addr() const noexcept {
            return std::holds_alternative<ArbitraryAddress>(state)
                   || std::holds_alternative<LegalAddress>(state);
        }

        [[nodiscard]] bool is_imm() const noexcept {
            return std::holds_alternative<Immediate>(state);
        }

        [[nodiscard]] Immediate &imm() noexcept {
            return std::get<Immediate>(state);
        }

        [[nodiscard]] ValuePartRef &val_ref() noexcept {
            return std::get<ValuePartRef>(state);
        }

        [[nodiscard]] bool encodeable_as_imm64() const noexcept;
        [[nodiscard]] bool encodeable_as_imm32_sext() const noexcept;
        [[nodiscard]] bool encodeable_as_imm16_sext() const noexcept;
        [[nodiscard]] bool encodeable_as_imm8_sext() const noexcept;
        [[nodiscard]] bool val_ref_prefers_mem_enc() const noexcept;
        [[nodiscard]] u32  val_ref_frame_off() const noexcept;
        AsmReg             as_reg(EncodeCompiler *compiler) noexcept;
        bool               try_salvage(ScratchReg &, u8 bank) noexcept;
        bool          try_salvage_if_nonalloc(ScratchReg &, u8 bank) noexcept;
        void          try_salvage_or_materialize(EncodeCompiler *compiler,
                                                 ScratchReg     &dst_scratch,
                                                 u8              bank,
                                                 u32             size) noexcept;
        // compatibility
        bool          try_salvage(AsmReg &, ScratchReg &, u8 bank) noexcept;
        void          try_salvage_or_materialize(EncodeCompiler *compiler,
                                                 AsmReg         &dst_reg,
                                                 ScratchReg     &dst_scratch,
                                                 u8              bank,
                                                 u32             size) noexcept;
        LegalAddress &legalize_address(EncodeCompiler *compiler) noexcept;
        void          reset() noexcept;

        static LegalAddress
            arbitrary_to_legal_address(EncodeCompiler    *compiler,
                                       ArbitraryAddress &&src_addr) noexcept;
    };

    CompilerX64 *derived() noexcept {
        return static_cast<CompilerX64 *>(static_cast<Derived *>(this));
    }

    const CompilerX64 *derived() const noexcept {
        return static_cast<const CompilerX64 *>(
            static_cast<const Derived *>(this));
    }

    static bool reg_needs_avx512(AsmReg reg) noexcept {
        if (reg.id() > AsmReg::XMM15) {
            return true;
        }
        return false;
    }

    [[nodiscard]] bool has_avx() const noexcept {
        return derived()->has_cpu_feats(CompilerX64::CPU_AVX);
    }

    [[nodiscard]] static bool disp_add_encodeable(int32_t disp,
                                                  int32_t add) noexcept {
        const auto tmp = static_cast<int64_t>(disp) + add;
        return (static_cast<int64_t>(static_cast<int32_t>(tmp)) == tmp);
    }

    struct FixedRegBackup {
        ScratchReg  scratch;
        ValLocalIdx local_idx;
        u32         part;
        u32         lock_count;
    };

    void scratch_alloc_specific(AsmReg                              reg,
                                ScratchReg                         &scratch,
                                std::initializer_list<AsmOperand *> operands,
                                FixedRegBackup &backup_reg) noexcept;

    void scratch_check_fixed_backup(ScratchReg     &scratch,
                                    FixedRegBackup &backup_reg,
                                    bool            is_ret_reg) noexcept;

// SPDX-SnippetEnd
// SPDX-SnippetBegin
// SPDX-License-Identifier: CC0-1.0
// clang-format off
)";

static constexpr inline char ENCODER_TEMPLATE_END[] = R"(
};
// SPDX-SnippetEnd
)";

static constexpr inline char ENCODER_IMPL_TEMPLATE_BEGIN[] = R"(

// SPDX-SnippetBegin
// SPDX-License-Identifier: LicenseRef-Proprietary
// clang-format on
template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    encodeable_as_imm64() const noexcept {
    if (!is_imm() || std::get<Immediate>(state).size > 8) {
        return false;
    }

    const u64 imm = std::get<Immediate>(state).const_u64;
    return imm;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    encodeable_as_imm32_sext() const noexcept {
    if (!is_imm()) {
        return false;
    }

    const auto &data = std::get<Immediate>(state);
    assert(data.size <= 8);
    if (data.size <= 4) {
        // always encodeable
        return true;
    }

    const u64 imm = data.const_u64;
    return static_cast<i64>(static_cast<i32>(imm)) == static_cast<i64>(imm);
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    encodeable_as_imm16_sext() const noexcept {
    if (!is_imm()) {
        return false;
    }

    const auto &info = std::get<Immediate>(state);
    assert(info.bank == 0);
    assert(info.size <= 8);

    const u64 imm = std::get<Immediate>(state).const_u64;
    return static_cast<i64>(static_cast<i16>(imm)) == static_cast<i64>(imm);
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    encodeable_as_imm8_sext() const noexcept {
    if (!is_imm()) {
        return false;
    }

    const auto &info = std::get<Immediate>(state);
    assert(info.bank == 0);
    assert(info.size <= 8);

    const u64 imm = std::get<Immediate>(state).const_u64;
    return static_cast<i64>(static_cast<i8>(imm)) == static_cast<i8>(imm);
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    val_ref_prefers_mem_enc() const noexcept {
    const ValuePartRef *ptr;
    if (std::holds_alternative<ValuePartRef>(state)) {
        ptr = &std::get<ValuePartRef>(state);
    } else if (std::holds_alternative<ValuePartRef *>(state)) {
        ptr = std::get<ValuePartRef *>(state);
    } else {
        return false;
    }

    if (ptr->is_const) {
        return false;
    }

    const auto ap = ptr->assignment();
    return (!ap.register_valid() && !ap.variable_ref());
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
u32 EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    val_ref_frame_off() const noexcept {
    if (std::holds_alternative<ValuePartRef>(state)) {
        const auto &val_ref = std::get<ValuePartRef>(state);
        assert(!val_ref.is_const);
        const auto ap = val_ref.assignment();
        assert(!ap.variable_ref());
        return ap.frame_off();
    } else {
        assert(std::holds_alternative<ValuePartRef *>(state));
        const auto *val_ref = std::get<ValuePartRef *>(state);
        assert(!val_ref->is_const);
        const auto ap = val_ref->assignment();
        assert(!ap.variable_ref());
        return ap.frame_off();
    }
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
typename EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmReg
    EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::as_reg(
        EncodeCompiler<Adaptor, Derived, BaseTy, Config> *compiler) noexcept {
    if (std::holds_alternative<ScratchReg>(state)) {
        return std::get<ScratchReg>(state).cur_reg;
    }
    if (std::holds_alternative<ValuePartRef>(state)) {
        return std::get<ValuePartRef>(state).alloc_reg();
    }
    if (std::holds_alternative<ValuePartRef *>(state)) {
        return std::get<ValuePartRef *>(state)->alloc_reg();
    }
    if (std::holds_alternative<AsmReg>(state)) {
        return std::get<AsmReg>(state);
    }
    if (is_imm()) {
        const auto &data = std::get<Immediate>(state);
        ScratchReg  dst{compiler->derived()};
        const auto  dst_reg = dst.alloc_from_bank(data.bank);
        compiler->derived()->materialize_constant(
            data.const_bytes, data.bank, data.size, dst_reg);
        state = std::move(dst);
        return dst_reg;
    }
    // TODO(ts): allow mem operands with scratchreg param?
    assert(0);
    exit(1);
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::try_salvage(
    ScratchReg &dst_scratch, const u8 bank) noexcept {
    if (!dst_scratch.cur_reg.invalid()) {
        return false;
    }

    if (std::holds_alternative<ScratchReg>(state)) {
        assert(std::get<ScratchReg>(state).compiler->register_file.reg_bank(
                   std::get<ScratchReg>(state).cur_reg)
               == bank);
        dst_scratch = std::move(std::get<ScratchReg>(state));
        state       = std::monostate{};
        return true;
    } else if (std::holds_alternative<ValuePartRef>(state)) {
        auto &ref = std::get<ValuePartRef>(state);
        assert(ref.bank() == bank);
        if (ref.can_salvage()) {
            auto reg = ref.salvage();
            dst_scratch.alloc_specific(reg);
            return true;
        }
        // dst = std::get<ValuePartRef>(state).alloc_reg();
        // return;
    } else if (std::holds_alternative<Immediate>(state)) {
        this->as_reg(static_cast<Derived *>(dst_scratch.compiler));
        assert(std::holds_alternative<ScratchReg>(state));
        assert(std::get<ScratchReg>(state).compiler->register_file.reg_bank(
                   std::get<ScratchReg>(state).cur_reg)
               == bank);

        dst_scratch = std::move(std::get<ScratchReg>(state));
        state       = std::monostate{};
        return true;
    }

    dst_scratch.alloc_from_bank(bank);
    return false;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    try_salvage_if_nonalloc(ScratchReg &dst_scratch, const u8 bank) noexcept {
    if (!dst_scratch.cur_reg.invalid()) {
        return false;
    }
    return try_salvage(dst_scratch, bank);
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::try_salvage(
    AsmReg &dst_reg, ScratchReg &dst_scratch, const u8 bank) noexcept {
    const auto res = try_salvage(dst_scratch, bank);
    dst_reg        = dst_scratch.cur_reg;
    return res;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    try_salvage_or_materialize(EncodeCompiler *compiler,
                               AsmReg         &dst_reg,
                               ScratchReg     &dst_scratch,
                               u8              bank,
                               u32             size) noexcept {
    try_salvage_or_materialize(compiler, dst_scratch, bank, size);
    dst_reg = dst_scratch.cur_reg;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
typename EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    LegalAddress &
    EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
        legalize_address(EncodeCompiler *compiler) noexcept {
    assert(is_addr());

    if (std::holds_alternative<LegalAddress>(state)) {
        return std::get<LegalAddress>(state);
    }

    state = arbitrary_to_legal_address(
        compiler, std::move(std::get<ArbitraryAddress>(state)));
    return std::get<LegalAddress>(state);
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    try_salvage_or_materialize(EncodeCompiler *compiler,
                               ScratchReg     &dst_scratch,
                               u8              bank,
                               u32             size) noexcept {
    if (!this->try_salvage(dst_scratch, bank)) {
        if (bank == 0) {
            if (std::holds_alternative<Immediate>(state)) {
                const auto &data = std::get<Immediate>(state);
                compiler->derived()->materialize_constant(data.const_bytes,
                                                          data.bank,
                                                          data.size,
                                                          dst_scratch.cur_reg);
                return;
            }

            AsmReg val = this->as_reg(compiler);
            if (size <= 4) {
                ASMC(compiler->derived(), MOV32rr, dst_scratch.cur_reg, val);
            } else {
                ASMC(compiler->derived(), MOV64rr, dst_scratch.cur_reg, val);
            }
        } else {
            AsmReg val = this->as_reg(compiler);
            if (size <= 16) {
                if (compiler->derived()->has_cpu_feats(CompilerX64::CPU_AVX)) {
                    ASMC(compiler->derived(),
                         VMOVAPD128rr,
                         dst_scratch.cur_reg,
                         val);
                } else {
                    ASMC(compiler->derived(),
                         SSE_MOVAPDrr,
                         dst_scratch.cur_reg,
                         val);
                }
            } else if (size <= 32) {
                assert(
                    compiler->derived()->has_cpu_feats(CompilerX64::CPU_AVX));
                ASMC(compiler->derived(),
                     VMOVAPD256rr,
                     dst_scratch.cur_reg,
                     val);
            } else {
                assert(size <= 64);
                assert(compiler->derived()->has_cpu_feats(
                    CompilerX64::CPU_AVX512F));
                ASMC(compiler->derived(),
                     VMOVAPD512rr,
                     dst_scratch.cur_reg,
                     val);
            }
        }
    }
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    reset() noexcept {
    state = std::monostate{};
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
typename EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    LegalAddress
    EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
        arbitrary_to_legal_address(EncodeCompiler    *compiler,
                                   ArbitraryAddress &&src_addr) noexcept {
    LegalAddress res{};
    res.base = std::move(src_addr.base);

    if (src_addr.has_index()) {
        if (src_addr.scale != 1 && src_addr.scale != 2 && src_addr.scale != 4
            && src_addr.scale != 8) {
            ScratchReg   scratch{compiler->derived()};
            const AsmReg index_reg = src_addr.index_reg();
            AsmReg       tmp;
            if (std::holds_alternative<ScratchReg>(src_addr.index)) {
                scratch = std::move(std::get<ScratchReg>(src_addr.index));
                tmp     = scratch.cur_reg;
            } else {
                tmp = scratch.alloc_gp();
            }
            if ((src_addr.scale & (src_addr.scale - 1)) == 0) {
                const auto shift = __builtin_ctzl(src_addr.scale);
                if (tmp != index_reg) {
                    ASMC(compiler->derived(), MOV64rr, tmp, index_reg);
                }
                ASMC(compiler->derived(), SHL64ri, tmp, shift);
            } else {
                if (src_addr.scale >= std::numeric_limits<i32>::min()
                    && src_addr.scale <= std::numeric_limits<i32>::max()) {
                    ASMC(compiler->derived(),
                         IMUL64rri,
                         tmp,
                         index_reg,
                         src_addr.scale);
                } else {
                    ScratchReg scratch2{compiler->derived()};
                    auto       tmp2 = scratch2.alloc_gp();
                    ASMC(compiler->derived(), MOV64ri, tmp2, src_addr.scale);
                    if (tmp != index_reg) {
                        ASMC(compiler->derived(), MOV64rr, tmp, index_reg);
                    }
                    ASMC(compiler->derived(), IMUL64rr, tmp, tmp2);
                }
            }
            res.index = std::move(scratch);
            res.scale = 1;
        } else {
            res.index = std::move(src_addr.index);
            res.scale = src_addr.scale;
        }
    }

    if (src_addr.disp >= std::numeric_limits<i32>::min()
        && src_addr.disp <= std::numeric_limits<i32>::max()) [[likely]] {
        res.disp = src_addr.disp;
        return res;
    }

    ScratchReg scratch{compiler->derived()};
    auto       tmp = scratch.alloc_gp();
    ASMC(compiler->derived(), MOV64ri, tmp, src_addr.disp);
    ASMC(compiler->derived(), ADD64rr, tmp, res.base_reg());
    if (res.has_index()) {
        ASMC(compiler->derived(),
             LEA64rm,
             tmp,
             FE_MEM(tmp, res.scale, res.index_reg(), 0));
    }

    res.base  = std::move(scratch);
    res.index = AsmReg::make_invalid();
    res.scale = 0;
    res.disp  = 0;
    return res;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::scratch_alloc_specific(
    AsmReg                              reg,
    ScratchReg                         &scratch,
    std::initializer_list<AsmOperand *> operands,
    FixedRegBackup                     &backup_reg) noexcept {
    if (!derived()->register_file.is_fixed(reg)) [[likely]] {
        scratch.alloc_specific(reg);
        return;
    }

    const auto bank = derived()->register_file.reg_bank(reg);
    if (bank != 0) {
        // TODO(ts): need to know the size
        assert(0);
        exit(1);
    }

    const auto alloc_backup = [this, &backup_reg, &scratch, reg, bank]() {
        const auto bak_reg    = backup_reg.scratch.alloc_from_bank(bank);
        auto      &reg_file   = derived()->register_file;
        auto      &assignment = reg_file.assignments[reg.id()];
        backup_reg.local_idx  = assignment.local_idx;
        backup_reg.part       = assignment.part;
        backup_reg.lock_count = assignment.lock_count;

        assignment.local_idx  = CompilerX64::INVALID_VAL_LOCAL_IDX;
        assignment.part       = 0;
        assignment.lock_count = 0;

        assert(scratch.cur_reg.invalid());
        scratch.cur_reg = reg;

        ASMD(MOV64rr, bak_reg, reg);
    };

    // check if one of the operands holds the fixed register
    for (auto *op_ptr : operands) {
        auto &op = op_ptr->state;
        if (std::holds_alternative<ScratchReg>(op)) {
            auto &op_scratch = std::get<ScratchReg>(op);
            if (op_scratch.cur_reg == reg) {
                scratch = std::move(op_scratch);
                op_scratch.alloc_from_bank(bank);
                ASMD(MOV64rr, op_scratch.cur_reg, reg);
                return;
            }
            continue;
        }

        if (std::holds_alternative<ValuePartRef>(op)) {
            auto &op_ref = std::get<ValuePartRef>(op);
            if (!op_ref.is_const) {
                assert(!op_ref.state.v.locked);
                const auto ap = op_ref.assignment();
                if (ap.register_valid()) {
                    assert(AsmReg{ap.full_reg_id()} != reg);
                }
            }
            continue;
        }

        if (std::holds_alternative<ValuePartRef *>(op)) {
            auto &op_ref = *std::get<ValuePartRef *>(op);
            if (!op_ref.is_const) {
                assert(!op_ref.state.v.locked);
                const auto ap = op_ref.assignment();
                if (ap.register_valid()) {
                    assert(AsmReg{ap.full_reg_id()} != reg);
                }
            }
            continue;
        }

        if (std::holds_alternative<AsmReg>(op)) {
            auto &op_reg = std::get<AsmReg>(op);
            if (op_reg == reg) {
                alloc_backup();
                op_reg = backup_reg.scratch.cur_reg;
                return;
            }
            continue;
        }

        if (std::holds_alternative<typename AsmOperand::ArbitraryAddress>(op)) {
            auto &addr = std::get<typename AsmOperand::ArbitraryAddress>(op);
            if (addr.base_reg() == reg) {
                if (std::holds_alternative<ScratchReg>(addr.base)) {
                    auto &op_scratch = std::get<ScratchReg>(addr.base);
                    scratch          = std::move(op_scratch);
                    op_scratch.alloc_from_bank(bank);
                    ASMD(MOV64rr, op_scratch.cur_reg, reg);
                } else {
                    alloc_backup();
                    addr.base = backup_reg.scratch.cur_reg;
                }
                return;
            }
            if (addr.scale != 0 && addr.index_reg() == reg) {
                if (std::holds_alternative<ScratchReg>(addr.index)) {
                    auto &op_scratch = std::get<ScratchReg>(addr.index);
                    scratch          = std::move(op_scratch);
                    op_scratch.alloc_from_bank(bank);
                    ASMD(MOV64rr, op_scratch.cur_reg, reg);
                } else {
                    alloc_backup();
                    addr.index = backup_reg.scratch.cur_reg;
                }
                return;
            }
            continue;
        }

        if (std::holds_alternative<typename AsmOperand::LegalAddress>(op)) {
            auto &addr = std::get<typename AsmOperand::LegalAddress>(op);
            if (addr.base_reg() == reg) {
                if (std::holds_alternative<ScratchReg>(addr.base)) {
                    auto &op_scratch = std::get<ScratchReg>(addr.base);
                    scratch          = std::move(op_scratch);
                    op_scratch.alloc_from_bank(bank);
                    ASMD(MOV64rr, op_scratch.cur_reg, reg);
                } else {
                    alloc_backup();
                    addr.base = backup_reg.scratch.cur_reg;
                }
                return;
            }
            if (addr.scale != 0 && addr.index_reg() == reg) {
                if (std::holds_alternative<ScratchReg>(addr.index)) {
                    auto &op_scratch = std::get<ScratchReg>(addr.index);
                    scratch          = std::move(op_scratch);
                    op_scratch.alloc_from_bank(bank);
                    ASMD(MOV64rr, op_scratch.cur_reg, reg);
                } else {
                    alloc_backup();
                    addr.index = backup_reg.scratch.cur_reg;
                }
                return;
            }
            continue;
        }
    }

    // otherwise temporarily store it somewhere else
    alloc_backup();
    return;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::
    scratch_check_fixed_backup(ScratchReg     &scratch,
                               FixedRegBackup &backup_reg,
                               const bool      is_ret_reg) noexcept {
    if (backup_reg.scratch.cur_reg.invalid()) [[likely]] {
        return;
    }

    assert(!scratch.cur_reg.invalid());
    auto &reg_file        = derived()->register_file;
    auto &assignment      = reg_file.assignments[scratch.cur_reg.id()];
    assignment.local_idx  = backup_reg.local_idx;
    assignment.part       = backup_reg.part;
    assignment.lock_count = backup_reg.lock_count;

    assert(reg_file.reg_bank(scratch.cur_reg) == 0);
    if (is_ret_reg) {
        // TODO(ts): allocate another scratch? Though at this point the scratch
        // regs have not been released yet so we might need to spill...

        // need to switch around backup and reg so it can be returned as a
        // ScratchReg
        ASMD(XCHG64rr, scratch.cur_reg, backup_reg.scratch.cur_reg);
        scratch.cur_reg            = backup_reg.scratch.cur_reg;
        backup_reg.scratch.cur_reg = AsmReg::make_invalid();
    } else {
        ASMD(MOV64rr, scratch.cur_reg, backup_reg.scratch.cur_reg);

        scratch.cur_reg = AsmReg::make_invalid();
        backup_reg.scratch.reset();
    }
}

// clang-format off
// SPDX-SnippetEnd
// SPDX-SnippetBegin
// SPDX-License-Identifier: CC0-1.0
)";


static constexpr inline char ENCODER_IMPL_TEMPLATE_END[] = R"(
} // namespace tpde_encodegen

#undef ASMD
// SPDX-SnippetEnd
)";
} // namespace tpde_encgen::x64
