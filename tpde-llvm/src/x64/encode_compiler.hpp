// SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
// SPDX-FileCopyrightText: 2024 Tobias Kamm <tobias.kamm@tum.de>
//
// SPDX-License-Identifier: LicenseRef-Proprietary AND CC0-1.0

// NOTE: This file is autogenerated by tpde-encodegen. Please DO NOT edit this file
// as all changes will be overwritten once the file is generated again.
// NOTE: Some parts of this file are subject to the default license of TPDE
// and only the autogenerated code falls under the CC0-1.0 license

// SPDX-SnippetBegin
// SPDX-License-Identifier: LicenseRef-Proprietary
#pragma once

#include <variant>

#include "base.hpp"
#include "tpde/x64/CompilerX64.hpp"

// Helper macros for assembling in the compiler
#if defined(ASMD)
    #error Got definition for ASM macros from somewhere else. Maybe you included compilers for multiple architectures?
#endif

#define ASMD(...) ASMC(this->derived(), __VA_ARGS__)

namespace tpde_encodegen {

using namespace tpde;

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          typename BaseTy,
          typename Config>
struct EncodeCompiler {
    using CompilerX64  = tpde::x64::CompilerX64<Adaptor, Derived, BaseTy, Config>;
    using ScratchReg   = typename CompilerX64::ScratchReg;
    using AsmReg       = typename CompilerX64::AsmReg;
    using ValuePartRef = typename CompilerX64::ValuePartRef;
    using Assembler    = typename CompilerX64::Assembler;
    using Label        = typename Assembler::Label;
    using ValLocalIdx  = typename CompilerX64::ValLocalIdx;
    using SymRef       = typename Assembler::SymRef;

    struct AsmOperand {
        struct ArbitraryAddress {
            std::variant<AsmReg, ScratchReg> base;
            std::variant<AsmReg, ScratchReg> index;
            i64                              scale;
            i64                              disp;

            explicit ArbitraryAddress()
                : base{AsmReg::make_invalid()}, scale{0}, disp{0} {}

            explicit ArbitraryAddress(AsmReg base, i64 disp = 0)
                : base(base), scale(0), disp(disp) {}

            explicit ArbitraryAddress(ScratchReg &&base, i64 disp = 0)
                : base(std::move(base)), scale(0), disp(disp) {}

            AsmReg base_reg() const noexcept {
                if (std::holds_alternative<AsmReg>(base)) {
                    return std::get<AsmReg>(base);
                }
                return std::get<ScratchReg>(base).cur_reg;
            }

            AsmReg index_reg() const noexcept {
                if (std::holds_alternative<AsmReg>(index)) {
                    return std::get<AsmReg>(index);
                }
                return std::get<ScratchReg>(index).cur_reg;
            }

            [[nodiscard]] bool has_index() const noexcept { return scale != 0; }
        };

        struct LegalAddress {
            std::variant<AsmReg, ScratchReg> base;
            std::variant<AsmReg, ScratchReg> index;
            u8                               scale;
            i32                              disp;

            AsmReg base_reg() const noexcept {
                if (std::holds_alternative<AsmReg>(base)) {
                    return std::get<AsmReg>(base);
                }
                return std::get<ScratchReg>(base).cur_reg;
            }

            AsmReg index_reg() const noexcept {
                if (std::holds_alternative<AsmReg>(index)) {
                    return std::get<AsmReg>(index);
                }
                return std::get<ScratchReg>(index).cur_reg;
            }

            [[nodiscard]] bool has_index() const noexcept { return scale != 0; }
        };

        struct Immediate {
            union {
                u64                const_u64;
                std::array<u8, 64> const_bytes;
            };

            u32 bank, size;
        };

        // TODO(ts): evaluate the use of std::variant
        // TODO(ts): I don't like the ValuePartRefs but we also don't want to
        // force all the operands into registers at the start of the encoding...
        std::variant<std::monostate,
                     ScratchReg,
                     ValuePartRef,
                     ValuePartRef *,
                     AsmReg,
                     ArbitraryAddress,
                     LegalAddress,
                     Immediate>
            state;

        AsmOperand() = default;

        AsmOperand(AsmOperand &) = delete;

        AsmOperand(AsmOperand &&other) noexcept {
            state       = std::move(other.state);
            other.state = std::monostate{};
        }

        AsmOperand &operator=(const AsmOperand &) noexcept = delete;

        AsmOperand &operator=(AsmOperand &&other) noexcept {
            if (this == &other) {
                return *this;
            }
            state       = std::move(other.state);
            other.state = std::monostate{};
            return *this;
        }

        // ReSharper disable CppNonExplicitConvertingConstructor
        // NOLINTBEGIN(*-explicit-constructor)

        // reg can't be overwritten
        AsmOperand(AsmReg reg) noexcept : state{reg} {}

        // no salvaging
        AsmOperand(const ScratchReg &reg) noexcept {
            assert(!reg.cur_reg.invalid());
            state = reg.cur_reg;
        }

        // salvaging
        AsmOperand(ScratchReg &&reg) noexcept {
            assert(!reg.cur_reg.invalid());
            state = std::move(reg);
        }

        // no salvaging
        AsmOperand(ValuePartRef &ref) noexcept {
            if (ref.is_const) {
                state = Immediate{.const_bytes = ref.state.c.const_data,
                                  .bank        = ref.state.c.bank,
                                  .size        = ref.state.c.size};
                return;
            }
            // TODO(ts): check if it is a variable_ref/frame_ptr and then
            // turning it into an Address?
            state = &ref;
        }

        // salvaging
        AsmOperand(ValuePartRef &&ref) noexcept {
            if (ref.is_const) {
                state = Immediate{.const_bytes = ref.state.c.const_data,
                                  .bank        = ref.state.c.bank,
                                  .size        = ref.state.c.size};
                return;
            }
            state = std::move(ref);
        }

        AsmOperand(ArbitraryAddress &&addr) noexcept {
            state = std::move(addr);
        }

        AsmOperand(Immediate imm) noexcept { state = imm; }

        // NOLINTEND(*-explicit-constructor)
        // ReSharper restore CppNonExplicitConvertingConstructor

        [[nodiscard]] bool is_addr() const noexcept {
            return std::holds_alternative<ArbitraryAddress>(state)
                   || std::holds_alternative<LegalAddress>(state);
        }

        [[nodiscard]] bool is_imm() const noexcept {
            return std::holds_alternative<Immediate>(state);
        }

        [[nodiscard]] Immediate &imm() noexcept {
            return std::get<Immediate>(state);
        }

        [[nodiscard]] ValuePartRef &val_ref() noexcept {
            return std::get<ValuePartRef>(state);
        }

        [[nodiscard]] bool encodeable_as_imm64() const noexcept;
        [[nodiscard]] bool encodeable_as_imm32_sext() const noexcept;
        [[nodiscard]] bool encodeable_as_imm16_sext() const noexcept;
        [[nodiscard]] bool encodeable_as_imm8_sext() const noexcept;
        [[nodiscard]] bool val_ref_prefers_mem_enc() const noexcept;
        [[nodiscard]] u32  val_ref_frame_off() const noexcept;
        AsmReg             as_reg(EncodeCompiler *compiler) noexcept;
        bool               try_salvage(ScratchReg &, u8 bank) noexcept;
        bool          try_salvage_if_nonalloc(ScratchReg &, u8 bank) noexcept;
        void          try_salvage_or_materialize(EncodeCompiler *compiler,
                                                 ScratchReg     &dst_scratch,
                                                 u8              bank,
                                                 u32             size) noexcept;
        // compatibility
        bool          try_salvage(AsmReg &, ScratchReg &, u8 bank) noexcept;
        void          try_salvage_or_materialize(EncodeCompiler *compiler,
                                                 AsmReg         &dst_reg,
                                                 ScratchReg     &dst_scratch,
                                                 u8              bank,
                                                 u32             size) noexcept;
        LegalAddress &legalize_address(EncodeCompiler *compiler) noexcept;
        void          reset() noexcept;

        static LegalAddress
            arbitrary_to_legal_address(EncodeCompiler    *compiler,
                                       ArbitraryAddress &&src_addr) noexcept;
    };

    CompilerX64 *derived() noexcept {
        return static_cast<CompilerX64 *>(static_cast<Derived *>(this));
    }

    const CompilerX64 *derived() const noexcept {
        return static_cast<const CompilerX64 *>(
            static_cast<const Derived *>(this));
    }

    static bool reg_needs_avx512(AsmReg reg) noexcept {
        if (reg.id() > AsmReg::XMM15) {
            return true;
        }
        return false;
    }

    [[nodiscard]] bool has_avx() const noexcept {
        return derived()->has_cpu_feats(CompilerX64::CPU_AVX);
    }

    [[nodiscard]] static bool disp_add_encodeable(int32_t disp,
                                                  int32_t add) noexcept {
        const auto tmp = static_cast<int64_t>(disp) + add;
        return (static_cast<int64_t>(static_cast<int32_t>(tmp)) == tmp);
    }

    struct FixedRegBackup {
        ScratchReg  scratch;
        ValLocalIdx local_idx;
        u32         part;
        u32         lock_count;
    };

    void scratch_alloc_specific(AsmReg                              reg,
                                ScratchReg                         &scratch,
                                std::initializer_list<AsmOperand *> operands,
                                FixedRegBackup &backup_reg) noexcept;

    void scratch_check_fixed_backup(ScratchReg     &scratch,
                                    FixedRegBackup &backup_reg,
                                    bool            is_ret_reg) noexcept;

// SPDX-SnippetEnd
// SPDX-SnippetBegin
// SPDX-License-Identifier: CC0-1.0
// clang-format off

    bool encode_loadi8(AsmOperand param_0, ScratchReg &result_0);
    bool encode_loadi16(AsmOperand param_0, ScratchReg &result_0);
    bool encode_loadi32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_loadi64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_loadi24(AsmOperand param_0, ScratchReg &result_0);
    bool encode_loadi40(AsmOperand param_0, ScratchReg &result_0);
    bool encode_loadi48(AsmOperand param_0, ScratchReg &result_0);
    bool encode_loadi56(AsmOperand param_0, ScratchReg &result_0);
    bool encode_loadi128(AsmOperand param_0, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_loadf32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_loadf64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_loadv128(AsmOperand param_0, ScratchReg &result_0);
    bool encode_loadv256(AsmOperand param_0, ScratchReg &result_0);
    bool encode_loadv512(AsmOperand param_0, ScratchReg &result_0);
    bool encode_storei8(AsmOperand param_0, AsmOperand param_1);
    bool encode_storei16(AsmOperand param_0, AsmOperand param_1);
    bool encode_storei32(AsmOperand param_0, AsmOperand param_1);
    bool encode_storei64(AsmOperand param_0, AsmOperand param_1);
    bool encode_storei24(AsmOperand param_0, AsmOperand param_1);
    bool encode_storei40(AsmOperand param_0, AsmOperand param_1);
    bool encode_storei48(AsmOperand param_0, AsmOperand param_1);
    bool encode_storei56(AsmOperand param_0, AsmOperand param_1);
    bool encode_storei128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2);
    bool encode_storef32(AsmOperand param_0, AsmOperand param_1);
    bool encode_storef64(AsmOperand param_0, AsmOperand param_1);
    bool encode_storev128(AsmOperand param_0, AsmOperand param_1);
    bool encode_storev256(AsmOperand param_0, AsmOperand param_1);
    bool encode_storev512(AsmOperand param_0, AsmOperand param_1);
    bool encode_addi32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_subi32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_muli32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_udivi32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_sdivi32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_uremi32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_sremi32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_landi32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_lori32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_lxori32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_shli32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_shri32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_ashri32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_absi32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_addi64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_subi64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_muli64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_udivi64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_sdivi64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_uremi64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_sremi64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_landi64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_lori64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_lxori64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_shli64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_shri64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_ashri64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_absi64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_addi128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, AsmOperand param_3, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_subi128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, AsmOperand param_3, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_muli128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, AsmOperand param_3, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_landi128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, AsmOperand param_3, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_lori128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, AsmOperand param_3, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_lxori128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, AsmOperand param_3, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_shli128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_shri128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_ashri128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_shli128_lt64(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_shli128_ge64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_shri128_lt64(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_shri128_ge64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_ashri128_lt64(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_ashri128_ge64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_cttzi32_zero_poison(AsmOperand param_0, ScratchReg &result_0);
    bool encode_cttzi64_zero_poison(AsmOperand param_0, ScratchReg &result_0);
    bool encode_cttzi8(AsmOperand param_0, ScratchReg &result_0);
    bool encode_cttzi16(AsmOperand param_0, ScratchReg &result_0);
    bool encode_cttzi32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_cttzi64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_ctlzi8_zero_poison(AsmOperand param_0, ScratchReg &result_0);
    bool encode_ctlzi16_zero_poison(AsmOperand param_0, ScratchReg &result_0);
    bool encode_ctlzi32_zero_poison(AsmOperand param_0, ScratchReg &result_0);
    bool encode_ctlzi64_zero_poison(AsmOperand param_0, ScratchReg &result_0);
    bool encode_ctlzi8(AsmOperand param_0, ScratchReg &result_0);
    bool encode_ctlzi16(AsmOperand param_0, ScratchReg &result_0);
    bool encode_ctlzi32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_ctlzi64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_addf32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_subf32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_mulf32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_divf32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_addf64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_subf64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_mulf64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_divf64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fnegf32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_fnegf64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_fabsf32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_fabsf64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_fmaf32(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0);
    bool encode_fmaf64(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0);
    bool encode_f64tof32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_f32tof64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_f32toi32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_f32tou32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_f32toi64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_f32tou64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_f64toi32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_f64tou32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_f64toi64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_f64tou64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_i8tof32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_i16tof32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_i32tof32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_i64tof32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_u8tof32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_u16tof32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_u32tof32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_u64tof32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_i8tof64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_i16tof64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_i32tof64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_i64tof64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_u8tof64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_u16tof64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_u32tof64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_u64tof64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_sext_8_to_32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_sext_8_to_64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_sext_16_to_32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_sext_16_to_64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_sext_32_to_64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_sext_arbitrary_to_32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_sext_arbitrary_to_64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fill_with_sign64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_zext_8_to_32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_zext_16_to_32(AsmOperand param_0, ScratchReg &result_0);
    bool encode_zext_32_to_64(AsmOperand param_0, ScratchReg &result_0);
    bool encode_cmpxchg_u64_monotonic_monotonic(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_cmpxchg_u64_acquire_monotonic(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_cmpxchg_u64_acquire_acquire(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_cmpxchg_u64_release_monotonic(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_cmpxchg_u64_release_acquire(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_cmpxchg_u64_acqrel_monotonic(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_cmpxchg_u64_acqrel_acquire(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_cmpxchg_u64_seqcst_monotonic(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_cmpxchg_u64_seqcst_acquire(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_cmpxchg_u64_seqcst_seqcst(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_select_i32(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0);
    bool encode_select_i64(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0);
    bool encode_select_i128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, AsmOperand param_3, AsmOperand param_4, ScratchReg &result_0, ScratchReg &result_1);
    bool encode_select_f32(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0);
    bool encode_select_f64(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0);
    bool encode_fcmp_oeq_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_ogt_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_oge_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_olt_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_ole_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_one_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_ord_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_ueq_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_ugt_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_uge_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_ult_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_ule_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_une_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_uno_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_oeq_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_ogt_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_oge_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_olt_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_ole_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_one_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_ord_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_ueq_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_ugt_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_uge_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_ult_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_ule_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_une_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_fcmp_uno_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_snan_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_qnan_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_ninf_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_nnorm_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_nsnorm_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_nzero_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_pzero_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_psnorm_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_pnorm_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_pinf_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_nan_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_inf_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_norm_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_finite_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_snan_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_qnan_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_ninf_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_nnorm_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_nsnorm_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_nzero_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_pzero_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_psnorm_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_pnorm_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_pinf_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_nan_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_inf_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_norm_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_is_fpclass_finite_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0);
    bool encode_prefetch_rl0(AsmOperand param_0);
    bool encode_prefetch_rl1(AsmOperand param_0);
    bool encode_prefetch_rl2(AsmOperand param_0);
    bool encode_prefetch_rl3(AsmOperand param_0);
    bool encode_prefetch_wl0(AsmOperand param_0);
    bool encode_prefetch_wl1(AsmOperand param_0);
    bool encode_prefetch_wl2(AsmOperand param_0);
    bool encode_prefetch_wl3(AsmOperand param_0);


    SymRef sym_fnegf32_cp0 = Assembler::INVALID_SYM_REF;
    SymRef sym_fnegf64_cp0 = Assembler::INVALID_SYM_REF;
    SymRef sym_fabsf32_cp0 = Assembler::INVALID_SYM_REF;
    SymRef sym_fabsf64_cp0 = Assembler::INVALID_SYM_REF;
    SymRef sym_f32tou64_cp0 = Assembler::INVALID_SYM_REF;
    SymRef sym_f64tou64_cp0 = Assembler::INVALID_SYM_REF;
    SymRef sym_u64tof64_cp1 = Assembler::INVALID_SYM_REF;
    SymRef sym_u64tof64_cp0 = Assembler::INVALID_SYM_REF;
    SymRef sym_is_fpclass_ninf_float_cp0 = Assembler::INVALID_SYM_REF;
    SymRef sym_is_fpclass_pinf_float_cp0 = Assembler::INVALID_SYM_REF;
    SymRef sym_is_fpclass_ninf_double_cp0 = Assembler::INVALID_SYM_REF;
    SymRef sym_is_fpclass_pinf_double_cp0 = Assembler::INVALID_SYM_REF;


};
// SPDX-SnippetEnd



// SPDX-SnippetBegin
// SPDX-License-Identifier: LicenseRef-Proprietary
// clang-format on
template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    encodeable_as_imm64() const noexcept {
    if (!is_imm() || std::get<Immediate>(state).size > 8) {
        return false;
    }

    const u64 imm = std::get<Immediate>(state).const_u64;
    return imm;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    encodeable_as_imm32_sext() const noexcept {
    if (!is_imm()) {
        return false;
    }

    const auto &data = std::get<Immediate>(state);
    assert(data.size <= 8);
    if (data.size <= 4) {
        // always encodeable
        return true;
    }

    const u64 imm = data.const_u64;
    return static_cast<i64>(static_cast<i32>(imm)) == static_cast<i64>(imm);
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    encodeable_as_imm16_sext() const noexcept {
    if (!is_imm()) {
        return false;
    }

    const auto &info = std::get<Immediate>(state);
    assert(info.bank == 0);
    assert(info.size <= 8);

    const u64 imm = info.const_u64;
    return static_cast<i64>(static_cast<i16>(imm)) == static_cast<i64>(imm);
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    encodeable_as_imm8_sext() const noexcept {
    if (!is_imm()) {
        return false;
    }

    const auto &info = std::get<Immediate>(state);
    assert(info.bank == 0);
    assert(info.size <= 8);

    const u64 imm = info.const_u64;
    return static_cast<i64>(static_cast<i8>(imm)) == static_cast<i8>(imm);
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    val_ref_prefers_mem_enc() const noexcept {
    const ValuePartRef *ptr;
    if (std::holds_alternative<ValuePartRef>(state)) {
        ptr = &std::get<ValuePartRef>(state);
    } else if (std::holds_alternative<ValuePartRef *>(state)) {
        ptr = std::get<ValuePartRef *>(state);
    } else {
        return false;
    }

    if (ptr->is_const) {
        return false;
    }

    const auto ap = ptr->assignment();
    return (!ap.register_valid() && !ap.variable_ref());
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
u32 EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    val_ref_frame_off() const noexcept {
    if (std::holds_alternative<ValuePartRef>(state)) {
        const auto &val_ref = std::get<ValuePartRef>(state);
        assert(!val_ref.is_const);
        const auto ap = val_ref.assignment();
        assert(!ap.variable_ref());
        return ap.frame_off();
    } else {
        assert(std::holds_alternative<ValuePartRef *>(state));
        const auto *val_ref = std::get<ValuePartRef *>(state);
        assert(!val_ref->is_const);
        const auto ap = val_ref->assignment();
        assert(!ap.variable_ref());
        return ap.frame_off();
    }
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
typename EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmReg
    EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::as_reg(
        EncodeCompiler<Adaptor, Derived, BaseTy, Config> *compiler) noexcept {
    if (std::holds_alternative<ScratchReg>(state)) {
        return std::get<ScratchReg>(state).cur_reg;
    }
    if (std::holds_alternative<ValuePartRef>(state)) {
        auto      &val_ref = std::get<ValuePartRef>(state);
        const auto reg     = val_ref.alloc_reg();
        val_ref.lock();
        return reg;
    }
    if (std::holds_alternative<ValuePartRef *>(state)) {
        auto      &val_ref = *std::get<ValuePartRef *>(state);
        const auto reg     = val_ref.alloc_reg();
        val_ref.lock();
        return reg;
    }
    if (std::holds_alternative<AsmReg>(state)) {
        return std::get<AsmReg>(state);
    }
    if (is_imm()) {
        const auto &data = std::get<Immediate>(state);
        ScratchReg  dst{compiler->derived()};
        const auto  dst_reg = dst.alloc_from_bank(data.bank);
        compiler->derived()->materialize_constant(
            data.const_bytes, data.bank, data.size, dst_reg);
        state = std::move(dst);
        return dst_reg;
    }
    // TODO(ts): allow mem operands with scratchreg param?
    assert(0);
    exit(1);
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::try_salvage(
    ScratchReg &dst_scratch, const u8 bank) noexcept {
    if (!dst_scratch.cur_reg.invalid()) {
        return false;
    }

    if (std::holds_alternative<ScratchReg>(state)) {
        assert(std::get<ScratchReg>(state).compiler->register_file.reg_bank(
                   std::get<ScratchReg>(state).cur_reg)
               == bank);
        dst_scratch = std::move(std::get<ScratchReg>(state));
        state       = std::monostate{};
        return true;
    } else if (std::holds_alternative<ValuePartRef>(state)) {
        auto &ref = std::get<ValuePartRef>(state);
        assert(ref.bank() == bank);
        if (ref.can_salvage()) {
            auto reg = ref.salvage();
            dst_scratch.alloc_specific(reg);
            return true;
        }
        // dst = std::get<ValuePartRef>(state).alloc_reg();
        // return;
    } else if (std::holds_alternative<Immediate>(state)) {
        this->as_reg(static_cast<Derived *>(dst_scratch.compiler));
        assert(std::holds_alternative<ScratchReg>(state));
        assert(std::get<ScratchReg>(state).compiler->register_file.reg_bank(
                   std::get<ScratchReg>(state).cur_reg)
               == bank);

        dst_scratch = std::move(std::get<ScratchReg>(state));
        state       = std::monostate{};
        return true;
    }

    dst_scratch.alloc_from_bank(bank);
    return false;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    try_salvage_if_nonalloc(ScratchReg &dst_scratch, const u8 bank) noexcept {
    if (!dst_scratch.cur_reg.invalid()) {
        return false;
    }
    return try_salvage(dst_scratch, bank);
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::try_salvage(
    AsmReg &dst_reg, ScratchReg &dst_scratch, const u8 bank) noexcept {
    const auto res = try_salvage(dst_scratch, bank);
    dst_reg        = dst_scratch.cur_reg;
    return res;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    try_salvage_or_materialize(EncodeCompiler *compiler,
                               AsmReg         &dst_reg,
                               ScratchReg     &dst_scratch,
                               u8              bank,
                               u32             size) noexcept {
    try_salvage_or_materialize(compiler, dst_scratch, bank, size);
    dst_reg = dst_scratch.cur_reg;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
typename EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    LegalAddress &
    EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
        legalize_address(EncodeCompiler *compiler) noexcept {
    assert(is_addr());

    if (std::holds_alternative<LegalAddress>(state)) {
        return std::get<LegalAddress>(state);
    }

    state = arbitrary_to_legal_address(
        compiler, std::move(std::get<ArbitraryAddress>(state)));
    return std::get<LegalAddress>(state);
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    try_salvage_or_materialize(EncodeCompiler *compiler,
                               ScratchReg     &dst_scratch,
                               u8              bank,
                               u32             size) noexcept {
    if (!this->try_salvage(dst_scratch, bank)) {
        if (bank == 0) {
            if (std::holds_alternative<Immediate>(state)) {
                const auto &data = std::get<Immediate>(state);
                compiler->derived()->materialize_constant(data.const_bytes,
                                                          data.bank,
                                                          data.size,
                                                          dst_scratch.cur_reg);
                return;
            }

            AsmReg val = this->as_reg(compiler);
            if (size <= 4) {
                ASMC(compiler->derived(), MOV32rr, dst_scratch.cur_reg, val);
            } else {
                ASMC(compiler->derived(), MOV64rr, dst_scratch.cur_reg, val);
            }
        } else {
            AsmReg val = this->as_reg(compiler);
            if (size <= 16) {
                if (compiler->derived()->has_cpu_feats(CompilerX64::CPU_AVX)) {
                    ASMC(compiler->derived(),
                         VMOVAPD128rr,
                         dst_scratch.cur_reg,
                         val);
                } else {
                    ASMC(compiler->derived(),
                         SSE_MOVAPDrr,
                         dst_scratch.cur_reg,
                         val);
                }
            } else if (size <= 32) {
                assert(
                    compiler->derived()->has_cpu_feats(CompilerX64::CPU_AVX));
                ASMC(compiler->derived(),
                     VMOVAPD256rr,
                     dst_scratch.cur_reg,
                     val);
            } else {
                assert(size <= 64);
                assert(compiler->derived()->has_cpu_feats(
                    CompilerX64::CPU_AVX512F));
                ASMC(compiler->derived(),
                     VMOVAPD512rr,
                     dst_scratch.cur_reg,
                     val);
            }
        }
    }
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    reset() noexcept {
    state = std::monostate{};
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
typename EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
    LegalAddress
    EncodeCompiler<Adaptor, Derived, BaseTy, Config>::AsmOperand::
        arbitrary_to_legal_address(EncodeCompiler    *compiler,
                                   ArbitraryAddress &&src_addr) noexcept {
    LegalAddress res{};
    res.base = std::move(src_addr.base);

    if (src_addr.has_index()) {
        if (src_addr.scale != 1 && src_addr.scale != 2 && src_addr.scale != 4
            && src_addr.scale != 8) {
            ScratchReg   scratch{compiler->derived()};
            const AsmReg index_reg = src_addr.index_reg();
            AsmReg       tmp;
            if (std::holds_alternative<ScratchReg>(src_addr.index)) {
                scratch = std::move(std::get<ScratchReg>(src_addr.index));
                tmp     = scratch.cur_reg;
            } else {
                tmp = scratch.alloc_gp();
            }
            if ((src_addr.scale & (src_addr.scale - 1)) == 0) {
                const auto shift = __builtin_ctzl(src_addr.scale);
                if (tmp != index_reg) {
                    ASMC(compiler->derived(), MOV64rr, tmp, index_reg);
                }
                ASMC(compiler->derived(), SHL64ri, tmp, shift);
            } else {
                if (src_addr.scale >= std::numeric_limits<i32>::min()
                    && src_addr.scale <= std::numeric_limits<i32>::max()) {
                    ASMC(compiler->derived(),
                         IMUL64rri,
                         tmp,
                         index_reg,
                         src_addr.scale);
                } else {
                    ScratchReg scratch2{compiler->derived()};
                    auto       tmp2 = scratch2.alloc_gp();
                    ASMC(compiler->derived(), MOV64ri, tmp2, src_addr.scale);
                    if (tmp != index_reg) {
                        ASMC(compiler->derived(), MOV64rr, tmp, index_reg);
                    }
                    ASMC(compiler->derived(), IMUL64rr, tmp, tmp2);
                }
            }
            res.index = std::move(scratch);
            res.scale = 1;
        } else {
            res.index = std::move(src_addr.index);
            res.scale = src_addr.scale;
        }
    }

    if (src_addr.disp >= std::numeric_limits<i32>::min()
        && src_addr.disp <= std::numeric_limits<i32>::max()) [[likely]] {
        res.disp = src_addr.disp;
        return res;
    }

    ScratchReg scratch{compiler->derived()};
    auto       tmp = scratch.alloc_gp();
    ASMC(compiler->derived(), MOV64ri, tmp, src_addr.disp);
    ASMC(compiler->derived(), ADD64rr, tmp, res.base_reg());
    if (res.has_index()) {
        ASMC(compiler->derived(),
             LEA64rm,
             tmp,
             FE_MEM(tmp, res.scale, res.index_reg(), 0));
    }

    res.base  = std::move(scratch);
    res.index = AsmReg::make_invalid();
    res.scale = 0;
    res.disp  = 0;
    return res;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::scratch_alloc_specific(
    AsmReg                              reg,
    ScratchReg                         &scratch,
    std::initializer_list<AsmOperand *> operands,
    FixedRegBackup                     &backup_reg) noexcept {
    if (!derived()->register_file.is_fixed(reg)) [[likely]] {
        scratch.alloc_specific(reg);
        return;
    }

    const auto bank = derived()->register_file.reg_bank(reg);
    if (bank != 0) {
        // TODO(ts): need to know the size
        assert(0);
        exit(1);
    }

    const auto alloc_backup = [this, &backup_reg, &scratch, reg, bank]() {
        const auto bak_reg    = backup_reg.scratch.alloc_from_bank(bank);
        auto      &reg_file   = derived()->register_file;
        auto      &assignment = reg_file.assignments[reg.id()];
        backup_reg.local_idx  = assignment.local_idx;
        backup_reg.part       = assignment.part;
        backup_reg.lock_count = assignment.lock_count;

        assignment.local_idx  = CompilerX64::INVALID_VAL_LOCAL_IDX;
        assignment.part       = 0;
        assignment.lock_count = 0;

        assert(scratch.cur_reg.invalid());
        scratch.cur_reg = reg;

        ASMD(MOV64rr, bak_reg, reg);
    };

    // check if one of the operands holds the fixed register
    for (auto *op_ptr : operands) {
        auto &op = op_ptr->state;
        if (std::holds_alternative<ScratchReg>(op)) {
            auto &op_scratch = std::get<ScratchReg>(op);
            if (op_scratch.cur_reg == reg) {
                scratch = std::move(op_scratch);
                op_scratch.alloc_from_bank(bank);
                ASMD(MOV64rr, op_scratch.cur_reg, reg);
                return;
            }
            continue;
        }

        if (std::holds_alternative<ValuePartRef>(op)) {
            auto &op_ref = std::get<ValuePartRef>(op);
            if (!op_ref.is_const) {
                assert(!op_ref.state.v.locked);
                const auto ap = op_ref.assignment();
                if (ap.register_valid()) {
                    assert(AsmReg{ap.full_reg_id()} != reg);
                }
            }
            continue;
        }

        if (std::holds_alternative<ValuePartRef *>(op)) {
            auto &op_ref = *std::get<ValuePartRef *>(op);
            if (!op_ref.is_const) {
                assert(!op_ref.state.v.locked);
                const auto ap = op_ref.assignment();
                if (ap.register_valid()) {
                    assert(AsmReg{ap.full_reg_id()} != reg);
                }
            }
            continue;
        }

        if (std::holds_alternative<AsmReg>(op)) {
            auto &op_reg = std::get<AsmReg>(op);
            if (op_reg == reg) {
                alloc_backup();
                op_reg = backup_reg.scratch.cur_reg;
                return;
            }
            continue;
        }

        if (std::holds_alternative<typename AsmOperand::ArbitraryAddress>(op)) {
            auto &addr = std::get<typename AsmOperand::ArbitraryAddress>(op);
            if (addr.base_reg() == reg) {
                if (std::holds_alternative<ScratchReg>(addr.base)) {
                    auto &op_scratch = std::get<ScratchReg>(addr.base);
                    scratch          = std::move(op_scratch);
                    op_scratch.alloc_from_bank(bank);
                    ASMD(MOV64rr, op_scratch.cur_reg, reg);
                } else {
                    alloc_backup();
                    addr.base = backup_reg.scratch.cur_reg;
                }
                return;
            }
            if (addr.scale != 0 && addr.index_reg() == reg) {
                if (std::holds_alternative<ScratchReg>(addr.index)) {
                    auto &op_scratch = std::get<ScratchReg>(addr.index);
                    scratch          = std::move(op_scratch);
                    op_scratch.alloc_from_bank(bank);
                    ASMD(MOV64rr, op_scratch.cur_reg, reg);
                } else {
                    alloc_backup();
                    addr.index = backup_reg.scratch.cur_reg;
                }
                return;
            }
            continue;
        }

        if (std::holds_alternative<typename AsmOperand::LegalAddress>(op)) {
            auto &addr = std::get<typename AsmOperand::LegalAddress>(op);
            if (addr.base_reg() == reg) {
                if (std::holds_alternative<ScratchReg>(addr.base)) {
                    auto &op_scratch = std::get<ScratchReg>(addr.base);
                    scratch          = std::move(op_scratch);
                    op_scratch.alloc_from_bank(bank);
                    ASMD(MOV64rr, op_scratch.cur_reg, reg);
                } else {
                    alloc_backup();
                    addr.base = backup_reg.scratch.cur_reg;
                }
                return;
            }
            if (addr.scale != 0 && addr.index_reg() == reg) {
                if (std::holds_alternative<ScratchReg>(addr.index)) {
                    auto &op_scratch = std::get<ScratchReg>(addr.index);
                    scratch          = std::move(op_scratch);
                    op_scratch.alloc_from_bank(bank);
                    ASMD(MOV64rr, op_scratch.cur_reg, reg);
                } else {
                    alloc_backup();
                    addr.index = backup_reg.scratch.cur_reg;
                }
                return;
            }
            continue;
        }
    }

    // otherwise temporarily store it somewhere else
    alloc_backup();
    return;
}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>
void EncodeCompiler<Adaptor, Derived, BaseTy, Config>::
    scratch_check_fixed_backup(ScratchReg     &scratch,
                               FixedRegBackup &backup_reg,
                               const bool      is_ret_reg) noexcept {
    if (backup_reg.scratch.cur_reg.invalid()) [[likely]] {
        return;
    }

    assert(!scratch.cur_reg.invalid());
    auto &reg_file        = derived()->register_file;
    auto &assignment      = reg_file.assignments[scratch.cur_reg.id()];
    assignment.local_idx  = backup_reg.local_idx;
    assignment.part       = backup_reg.part;
    assignment.lock_count = backup_reg.lock_count;

    assert(reg_file.reg_bank(scratch.cur_reg) == 0);
    if (is_ret_reg) {
        // TODO(ts): allocate another scratch? Though at this point the scratch
        // regs have not been released yet so we might need to spill...

        // need to switch around backup and reg so it can be returned as a
        // ScratchReg
        ASMD(XCHG64rr, scratch.cur_reg, backup_reg.scratch.cur_reg);
        scratch.cur_reg            = backup_reg.scratch.cur_reg;
        backup_reg.scratch.cur_reg = AsmReg::make_invalid();
    } else {
        ASMD(MOV64rr, scratch.cur_reg, backup_reg.scratch.cur_reg);

        scratch.cur_reg = AsmReg::make_invalid();
        backup_reg.scratch.reset();
    }
}

// clang-format off
// SPDX-SnippetEnd
// SPDX-SnippetBegin
// SPDX-License-Identifier: CC0-1.0

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_loadi8(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function loadi8: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $eax = MOVZX32rm8 killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s8) from %ir.0, !tbaa !5)
    //   RET64 killed $eax
    // 
    // # End machine code for function loadi8.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $eax = MOVZX32rm8 killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s8) from %ir.0, !tbaa !5)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            base = scratch_ax.cur_reg;
        } else {
            base = param_0.as_reg(this);
        }
        inst0_op1 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOVZXr32m8, scratch_ax.cur_reg, inst0_op1);
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_loadi16(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function loadi16: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $eax = MOVZX32rm16 killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s16) from %ir.0, !tbaa !8)
    //   RET64 killed $eax
    // 
    // # End machine code for function loadi16.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $eax = MOVZX32rm16 killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s16) from %ir.0, !tbaa !8)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            base = scratch_ax.cur_reg;
        } else {
            base = param_0.as_reg(this);
        }
        inst0_op1 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOVZXr32m16, scratch_ax.cur_reg, inst0_op1);
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_loadi32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function loadi32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $eax = MOV32rm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s32) from %ir.0, !tbaa !10)
    //   RET64 killed $eax
    // 
    // # End machine code for function loadi32.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $eax = MOV32rm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s32) from %ir.0, !tbaa !10)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            base = scratch_ax.cur_reg;
        } else {
            base = param_0.as_reg(this);
        }
        inst0_op1 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOV32rm, scratch_ax.cur_reg, inst0_op1);
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_loadi64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function loadi64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0, !tbaa !12)
    //   RET64 killed $rax
    // 
    // # End machine code for function loadi64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $rax = MOV64rm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0, !tbaa !12)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            base = scratch_ax.cur_reg;
        } else {
            base = param_0.as_reg(this);
        }
        inst0_op1 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOV64rm, scratch_ax.cur_reg, inst0_op1);
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_loadi24(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function loadi24: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $ecx = MOVZX32rm16 renamable $rdi, 1, $noreg, 0, $noreg :: (load (s16) from %ir.0, align 1)
    //   renamable $eax = MOVZX32rm8 killed renamable $rdi, 1, $noreg, 2, $noreg :: (load (s8) from %ir.0 + 2)
    //   renamable $eax = SHL32ri killed renamable $eax(tied-def 0), 16, implicit-def dead $eflags
    //   renamable $eax = OR32rr killed renamable $eax(tied-def 0), killed renamable $ecx, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function loadi24.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $ecx = MOVZX32rm16 renamable $rdi, 1, $noreg, 0, $noreg :: (load (s16) from %ir.0, align 1)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op1 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(MOVZXr32m16, scratch_cx.cur_reg, inst0_op1);
    // result cx is marked as alive


    // renamable $eax = MOVZX32rm8 killed renamable $rdi, 1, $noreg, 2, $noreg :: (load (s8) from %ir.0 + 2)
    // operand 1 is a memory operand
    FeMem inst1_op1;
    ScratchReg inst1_op1_scratch{derived()};
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // LLVM memory operand has displacement, check if it is encodeable with the disp from addr
        if (disp_add_encodeable(addr.disp, 2)) {
            inst1_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp + 2);
        } else {
            // displacements not encodeable together, need to materialize the addr
            AsmReg base_tmp = inst1_op1_scratch.alloc_from_bank(0);
            ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
            inst1_op1 = FE_MEM(base_tmp, 0, FE_NOREG, 2);
        }
    } else {
        // di maps to operand param_0
        AsmReg base;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            base = scratch_ax.cur_reg;
        } else {
            base = param_0.as_reg(this);
        }
        inst1_op1 = FE_MEM(base, 0, FE_NOREG, 2);
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOVZXr32m8, scratch_ax.cur_reg, inst1_op1);
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = SHL32ri killed renamable $eax(tied-def 0), 16, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(SHL32ri, scratch_ax.cur_reg, 16);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = OR32rr killed renamable $eax(tied-def 0), killed renamable $ecx, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst3_op1 = scratch_cx.cur_reg;

    ASMD(OR32rr, scratch_ax.cur_reg, inst3_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_loadi40(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function loadi40: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $ecx = MOV32rm renamable $rdi, 1, $noreg, 0, $noreg, implicit-def $rcx :: (load (s32) from %ir.0, align 1)
    //   renamable $eax = MOVZX32rm8 killed renamable $rdi, 1, $noreg, 4, $noreg, implicit-def $rax :: (load (s8) from %ir.0 + 4)
    //   renamable $rax = SHL64ri killed renamable $rax(tied-def 0), 32, implicit-def dead $eflags
    //   renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function loadi40.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $ecx = MOV32rm renamable $rdi, 1, $noreg, 0, $noreg, implicit-def $rcx :: (load (s32) from %ir.0, align 1)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op1 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    // Ignoring implicit def RCX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(MOV32rm, scratch_cx.cur_reg, inst0_op1);
    // result cx is marked as alive
    // result cx is marked as alive


    // renamable $eax = MOVZX32rm8 killed renamable $rdi, 1, $noreg, 4, $noreg, implicit-def $rax :: (load (s8) from %ir.0 + 4)
    // operand 1 is a memory operand
    FeMem inst1_op1;
    ScratchReg inst1_op1_scratch{derived()};
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // LLVM memory operand has displacement, check if it is encodeable with the disp from addr
        if (disp_add_encodeable(addr.disp, 4)) {
            inst1_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp + 4);
        } else {
            // displacements not encodeable together, need to materialize the addr
            AsmReg base_tmp = inst1_op1_scratch.alloc_from_bank(0);
            ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
            inst1_op1 = FE_MEM(base_tmp, 0, FE_NOREG, 4);
        }
    } else {
        // di maps to operand param_0
        AsmReg base;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            base = scratch_ax.cur_reg;
        } else {
            base = param_0.as_reg(this);
        }
        inst1_op1 = FE_MEM(base, 0, FE_NOREG, 4);
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(MOVZXr32m8, scratch_ax.cur_reg, inst1_op1);
    // argument di is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // renamable $rax = SHL64ri killed renamable $rax(tied-def 0), 32, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(SHL64ri, scratch_ax.cur_reg, 32);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst3_op1 = scratch_cx.cur_reg;

    ASMD(OR64rr, scratch_ax.cur_reg, inst3_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_loadi48(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function loadi48: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $ecx = MOV32rm renamable $rdi, 1, $noreg, 0, $noreg, implicit-def $rcx :: (load (s32) from %ir.0, align 1)
    //   renamable $eax = MOVZX32rm16 killed renamable $rdi, 1, $noreg, 4, $noreg, implicit-def $rax :: (load (s16) from %ir.0 + 4, align 1)
    //   renamable $rax = SHL64ri killed renamable $rax(tied-def 0), 32, implicit-def dead $eflags
    //   renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function loadi48.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $ecx = MOV32rm renamable $rdi, 1, $noreg, 0, $noreg, implicit-def $rcx :: (load (s32) from %ir.0, align 1)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op1 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    // Ignoring implicit def RCX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(MOV32rm, scratch_cx.cur_reg, inst0_op1);
    // result cx is marked as alive
    // result cx is marked as alive


    // renamable $eax = MOVZX32rm16 killed renamable $rdi, 1, $noreg, 4, $noreg, implicit-def $rax :: (load (s16) from %ir.0 + 4, align 1)
    // operand 1 is a memory operand
    FeMem inst1_op1;
    ScratchReg inst1_op1_scratch{derived()};
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // LLVM memory operand has displacement, check if it is encodeable with the disp from addr
        if (disp_add_encodeable(addr.disp, 4)) {
            inst1_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp + 4);
        } else {
            // displacements not encodeable together, need to materialize the addr
            AsmReg base_tmp = inst1_op1_scratch.alloc_from_bank(0);
            ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
            inst1_op1 = FE_MEM(base_tmp, 0, FE_NOREG, 4);
        }
    } else {
        // di maps to operand param_0
        AsmReg base;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            base = scratch_ax.cur_reg;
        } else {
            base = param_0.as_reg(this);
        }
        inst1_op1 = FE_MEM(base, 0, FE_NOREG, 4);
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(MOVZXr32m16, scratch_ax.cur_reg, inst1_op1);
    // argument di is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // renamable $rax = SHL64ri killed renamable $rax(tied-def 0), 32, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(SHL64ri, scratch_ax.cur_reg, 32);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst3_op1 = scratch_cx.cur_reg;

    ASMD(OR64rr, scratch_ax.cur_reg, inst3_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_loadi56(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function loadi56: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $eax = MOVZX32rm16 renamable $rdi, 1, $noreg, 4, $noreg :: (load (s16) from %ir.0 + 4, align 1)
    //   renamable $ecx = MOVZX32rm8 renamable $rdi, 1, $noreg, 6, $noreg, implicit-def $rcx :: (load (s8) from %ir.0 + 6)
    //   renamable $ecx = SHL32ri killed renamable $ecx(tied-def 0), 16, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
    //   renamable $ecx = OR32rr killed renamable $ecx(tied-def 0), killed renamable $eax, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
    //   renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 32, implicit-def dead $eflags
    //   renamable $eax = MOV32rm killed renamable $rdi, 1, $noreg, 0, $noreg, implicit-def $rax :: (load (s32) from %ir.0, align 1)
    //   renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function loadi56.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $eax = MOVZX32rm16 renamable $rdi, 1, $noreg, 4, $noreg :: (load (s16) from %ir.0 + 4, align 1)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    ScratchReg inst0_op1_scratch{derived()};
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // LLVM memory operand has displacement, check if it is encodeable with the disp from addr
        if (disp_add_encodeable(addr.disp, 4)) {
            inst0_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp + 4);
        } else {
            // displacements not encodeable together, need to materialize the addr
            AsmReg base_tmp = inst0_op1_scratch.alloc_from_bank(0);
            ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
            inst0_op1 = FE_MEM(base_tmp, 0, FE_NOREG, 4);
        }
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op1 = FE_MEM(base, 0, FE_NOREG, 4);
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOVZXr32m16, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // renamable $ecx = MOVZX32rm8 renamable $rdi, 1, $noreg, 6, $noreg, implicit-def $rcx :: (load (s8) from %ir.0 + 6)
    // operand 1 is a memory operand
    FeMem inst1_op1;
    ScratchReg inst1_op1_scratch{derived()};
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // LLVM memory operand has displacement, check if it is encodeable with the disp from addr
        if (disp_add_encodeable(addr.disp, 6)) {
            inst1_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp + 6);
        } else {
            // displacements not encodeable together, need to materialize the addr
            AsmReg base_tmp = inst1_op1_scratch.alloc_from_bank(0);
            ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
            inst1_op1 = FE_MEM(base_tmp, 0, FE_NOREG, 6);
        }
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst1_op1 = FE_MEM(base, 0, FE_NOREG, 6);
    }

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    // Ignoring implicit def RCX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(MOVZXr32m8, scratch_cx.cur_reg, inst1_op1);
    // result cx is marked as alive
    // result cx is marked as alive


    // renamable $ecx = SHL32ri killed renamable $ecx(tied-def 0), 16, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is an immediate operand
    // Handling implicit operand cx
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    // Ignoring implicit def RCX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SHL32ri, scratch_cx.cur_reg, 16);
    // argument cx is killed and marked as dead
    // argument cx is killed and marked as dead
    // result cx is marked as alive
    // result cx is marked as alive


    // renamable $ecx = OR32rr killed renamable $ecx(tied-def 0), killed renamable $eax, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst3_op1 = scratch_ax.cur_reg;
    // Handling implicit operand cx
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    // Ignoring implicit def RCX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(OR32rr, scratch_cx.cur_reg, inst3_op1);
    // argument cx is killed and marked as dead
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result cx is marked as alive
    // result cx is marked as alive


    // renamable $rcx = SHL64ri killed renamable $rcx(tied-def 0), 32, implicit-def dead $eflags
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(SHL64ri, scratch_cx.cur_reg, 32);
    // argument cx is killed and marked as dead
    // result cx is marked as alive


    // renamable $eax = MOV32rm killed renamable $rdi, 1, $noreg, 0, $noreg, implicit-def $rax :: (load (s32) from %ir.0, align 1)
    // operand 1 is a memory operand
    FeMem inst5_op1;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst5_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            base = scratch_ax.cur_reg;
        } else {
            base = param_0.as_reg(this);
        }
        inst5_op1 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(MOV32rm, scratch_ax.cur_reg, inst5_op1);
    // argument di is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst6_op1 = scratch_cx.cur_reg;

    ASMD(OR64rr, scratch_ax.cur_reg, inst6_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_loadi128(AsmOperand param_0, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function loadi128: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0, align 16, !tbaa !18)
    //   renamable $rdx = MOV64rm killed renamable $rdi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.0 + 8, basealign 16, !tbaa !18)
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function loadi128.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};


    // renamable $rax = MOV64rm renamable $rdi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0, align 16, !tbaa !18)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op1 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOV64rm, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // renamable $rdx = MOV64rm killed renamable $rdi, 1, $noreg, 8, $noreg :: (load (s64) from %ir.0 + 8, basealign 16, !tbaa !18)
    // operand 1 is a memory operand
    FeMem inst1_op1;
    ScratchReg inst1_op1_scratch{derived()};
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // LLVM memory operand has displacement, check if it is encodeable with the disp from addr
        if (disp_add_encodeable(addr.disp, 8)) {
            inst1_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp + 8);
        } else {
            // displacements not encodeable together, need to materialize the addr
            AsmReg base_tmp = inst1_op1_scratch.alloc_from_bank(0);
            ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
            inst1_op1 = FE_MEM(base_tmp, 0, FE_NOREG, 8);
        }
    } else {
        // di maps to operand param_0
        AsmReg base;
        if (param_0.try_salvage_if_nonalloc(scratch_dx, 0)) {
            base = scratch_dx.cur_reg;
        } else {
            base = param_0.as_reg(this);
        }
        inst1_op1 = FE_MEM(base, 0, FE_NOREG, 8);
    }

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(MOV64rm, scratch_dx.cur_reg, inst1_op1);
    // argument di is killed and marked as dead
    // result dx is marked as alive


    // RET64 killed $rax, killed $rdx
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_loadf32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function loadf32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $xmm0 = MOVSSrm_alt killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s32) from %ir.0, !tbaa !20)
    //   RET64 killed $xmm0
    // 
    // # End machine code for function loadf32.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = MOVSSrm_alt killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s32) from %ir.0, !tbaa !20)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op1 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_MOVSSrm, scratch_xmm0.cur_reg, inst0_op1);
    // argument di is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_loadf64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function loadf64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $xmm0 = MOVSDrm_alt killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0, !tbaa !22)
    //   RET64 killed $xmm0
    // 
    // # End machine code for function loadf64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = MOVSDrm_alt killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s64) from %ir.0, !tbaa !22)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op1 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_MOVSDrm, scratch_xmm0.cur_reg, inst0_op1);
    // argument di is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_loadv128(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function loadv128: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $xmm0 = MOVAPSrm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s128) from %ir.0, !tbaa !5)
    //   RET64 killed $xmm0
    // 
    // # End machine code for function loadv128.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = MOVAPSrm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s128) from %ir.0, !tbaa !5)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op1 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_MOVAPSrm, scratch_xmm0.cur_reg, inst0_op1);
    // argument di is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_loadv256(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function loadv256: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $ymm0 = VMOVAPSYrm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s256) from %ir.0, !tbaa !5)
    //   RET64 killed $ymm0
    // 
    // # End machine code for function loadv256.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $ymm0 = VMOVAPSYrm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s256) from %ir.0, !tbaa !5)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op1 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(VMOVAPS256rm, scratch_xmm0.cur_reg, inst0_op1);
    // argument di is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $ymm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_loadv512(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function loadv512: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $zmm0 = VMOVAPSZrm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s512) from %ir.0, !tbaa !5)
    //   RET64 killed $zmm0
    // 
    // # End machine code for function loadv512.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $zmm0 = VMOVAPSZrm killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s512) from %ir.0, !tbaa !5)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op1 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op1 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(VMOVAPS512rm, scratch_xmm0.cur_reg, inst0_op1);
    // argument di is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $zmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_storei8(AsmOperand param_0, AsmOperand param_1) {
    // # Machine code for function storei8: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $esi, $rdi
    //   MOV8mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $sil, implicit killed $esi :: (store (s8) into %ir.0, !tbaa !5)
    //   RET64
    // 
    // # End machine code for function storei8.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // MOV8mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $sil, implicit killed $esi :: (store (s8) into %ir.0, !tbaa !5)
    // MOV8mr has a preferred encoding as MOV8mi if possible
    if (param_1.encodeable_as_imm8_sext()) {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();
        // Handling implicit operand si
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(MOV8mi, inst0_op0, imm.const_u64);
    } else {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);
        // Handling implicit operand si
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(MOV8mr, inst0_op0, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument si is killed and marked as dead
    // argument si is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_storei16(AsmOperand param_0, AsmOperand param_1) {
    // # Machine code for function storei16: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $esi, $rdi
    //   MOV16mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $si, implicit killed $esi :: (store (s16) into %ir.0, !tbaa !8)
    //   RET64
    // 
    // # End machine code for function storei16.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // MOV16mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $si, implicit killed $esi :: (store (s16) into %ir.0, !tbaa !8)
    // MOV16mr has a preferred encoding as MOV16mi if possible
    if (param_1.encodeable_as_imm16_sext()) {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();
        // Handling implicit operand si
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(MOV16mi, inst0_op0, imm.const_u64);
    } else {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);
        // Handling implicit operand si
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(MOV16mr, inst0_op0, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument si is killed and marked as dead
    // argument si is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_storei32(AsmOperand param_0, AsmOperand param_1) {
    // # Machine code for function storei32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $esi, $rdi
    //   MOV32mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.0, !tbaa !10)
    //   RET64
    // 
    // # End machine code for function storei32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // MOV32mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $esi :: (store (s32) into %ir.0, !tbaa !10)
    // MOV32mr has a preferred encoding as MOV32mi if possible
    if (param_1.encodeable_as_imm32_sext()) {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(MOV32mi, inst0_op0, imm.const_u64);
    } else {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(MOV32mr, inst0_op0, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument si is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_storei64(AsmOperand param_0, AsmOperand param_1) {
    // # Machine code for function storei64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   MOV64mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0, !tbaa !12)
    //   RET64
    // 
    // # End machine code for function storei64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // MOV64mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0, !tbaa !12)
    // MOV64mr has a preferred encoding as MOV64mi if possible
    if (param_1.encodeable_as_imm32_sext()) {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(MOV64mi, inst0_op0, imm.const_u64);
    } else {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(MOV64mr, inst0_op0, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument si is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_storei24(AsmOperand param_0, AsmOperand param_1) {
    // # Machine code for function storei24: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $esi, $rdi
    //   MOV16mr renamable $rdi, 1, $noreg, 0, $noreg, renamable $si :: (store (s16) into %ir.0, align 1)
    //   renamable $esi = SHR32ri killed renamable $esi(tied-def 0), 16, implicit-def dead $eflags
    //   MOV8mr killed renamable $rdi, 1, $noreg, 2, $noreg, killed renamable $sil, implicit killed $esi :: (store (s8) into %ir.0 + 2)
    //   RET64
    // 
    // # End machine code for function storei24.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // MOV16mr renamable $rdi, 1, $noreg, 0, $noreg, renamable $si :: (store (s16) into %ir.0, align 1)
    // MOV16mr has a preferred encoding as MOV16mi if possible
    if (param_1.encodeable_as_imm16_sext()) {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(MOV16mi, inst0_op0, imm.const_u64);
    } else {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(MOV16mr, inst0_op0, inst0_op1);
    }


    // renamable $esi = SHR32ri killed renamable $esi(tied-def 0), 16, implicit-def dead $eflags
    // operand 0 is si
    // si is mapped to param_1
    // operand 0(param_1) is tied so try to salvage or materialize
    param_1.try_salvage_or_materialize(this, scratch_si, 0, 4);
    // operand 1 is an immediate operand

    ASMD(SHR32ri, scratch_si.cur_reg, 16);
    // argument si is killed and marked as dead
    // result si is marked as alive


    // MOV8mr killed renamable $rdi, 1, $noreg, 2, $noreg, killed renamable $sil, implicit killed $esi :: (store (s8) into %ir.0 + 2)
    // operand 0 is a memory operand
    FeMem inst2_op0;
    ScratchReg inst2_op0_scratch{derived()};
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // LLVM memory operand has displacement, check if it is encodeable with the disp from addr
        if (disp_add_encodeable(addr.disp, 2)) {
            inst2_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp + 2);
        } else {
            // displacements not encodeable together, need to materialize the addr
            AsmReg base_tmp = inst2_op0_scratch.alloc_from_bank(0);
            ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
            inst2_op0 = FE_MEM(base_tmp, 0, FE_NOREG, 2);
        }
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst2_op0 = FE_MEM(base, 0, FE_NOREG, 2);
    }
    // operand 1 is si
    // operand 1(si) is a simple register
    AsmReg inst2_op1 = scratch_si.cur_reg;
    // Handling implicit operand si
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    ASMD(MOV8mr, inst2_op0, inst2_op1);
    // argument di is killed and marked as dead
    // argument si is killed and marked as dead
    // argument si is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_storei40(AsmOperand param_0, AsmOperand param_1) {
    // # Machine code for function storei40: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   MOV32mr renamable $rdi, 1, $noreg, 0, $noreg, renamable $esi :: (store (s32) into %ir.0, align 1)
    //   renamable $rsi = SHR64ri killed renamable $rsi(tied-def 0), 32, implicit-def dead $eflags
    //   MOV8mr killed renamable $rdi, 1, $noreg, 4, $noreg, killed renamable $sil, implicit killed $rsi :: (store (s8) into %ir.0 + 4)
    //   RET64
    // 
    // # End machine code for function storei40.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // MOV32mr renamable $rdi, 1, $noreg, 0, $noreg, renamable $esi :: (store (s32) into %ir.0, align 1)
    // MOV32mr has a preferred encoding as MOV32mi if possible
    if (param_1.encodeable_as_imm32_sext()) {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(MOV32mi, inst0_op0, imm.const_u64);
    } else {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(MOV32mr, inst0_op0, inst0_op1);
    }


    // renamable $rsi = SHR64ri killed renamable $rsi(tied-def 0), 32, implicit-def dead $eflags
    // operand 0 is si
    // si is mapped to param_1
    // operand 0(param_1) is tied so try to salvage or materialize
    param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
    // operand 1 is an immediate operand

    ASMD(SHR64ri, scratch_si.cur_reg, 32);
    // argument si is killed and marked as dead
    // result si is marked as alive


    // MOV8mr killed renamable $rdi, 1, $noreg, 4, $noreg, killed renamable $sil, implicit killed $rsi :: (store (s8) into %ir.0 + 4)
    // operand 0 is a memory operand
    FeMem inst2_op0;
    ScratchReg inst2_op0_scratch{derived()};
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // LLVM memory operand has displacement, check if it is encodeable with the disp from addr
        if (disp_add_encodeable(addr.disp, 4)) {
            inst2_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp + 4);
        } else {
            // displacements not encodeable together, need to materialize the addr
            AsmReg base_tmp = inst2_op0_scratch.alloc_from_bank(0);
            ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
            inst2_op0 = FE_MEM(base_tmp, 0, FE_NOREG, 4);
        }
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst2_op0 = FE_MEM(base, 0, FE_NOREG, 4);
    }
    // operand 1 is si
    // operand 1(si) is a simple register
    AsmReg inst2_op1 = scratch_si.cur_reg;
    // Handling implicit operand si
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    ASMD(MOV8mr, inst2_op0, inst2_op1);
    // argument di is killed and marked as dead
    // argument si is killed and marked as dead
    // argument si is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_storei48(AsmOperand param_0, AsmOperand param_1) {
    // # Machine code for function storei48: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   MOV32mr renamable $rdi, 1, $noreg, 0, $noreg, renamable $esi :: (store (s32) into %ir.0, align 1)
    //   renamable $rsi = SHR64ri killed renamable $rsi(tied-def 0), 32, implicit-def dead $eflags
    //   MOV16mr killed renamable $rdi, 1, $noreg, 4, $noreg, killed renamable $si, implicit killed $rsi :: (store (s16) into %ir.0 + 4, align 1)
    //   RET64
    // 
    // # End machine code for function storei48.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // MOV32mr renamable $rdi, 1, $noreg, 0, $noreg, renamable $esi :: (store (s32) into %ir.0, align 1)
    // MOV32mr has a preferred encoding as MOV32mi if possible
    if (param_1.encodeable_as_imm32_sext()) {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(MOV32mi, inst0_op0, imm.const_u64);
    } else {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(MOV32mr, inst0_op0, inst0_op1);
    }


    // renamable $rsi = SHR64ri killed renamable $rsi(tied-def 0), 32, implicit-def dead $eflags
    // operand 0 is si
    // si is mapped to param_1
    // operand 0(param_1) is tied so try to salvage or materialize
    param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
    // operand 1 is an immediate operand

    ASMD(SHR64ri, scratch_si.cur_reg, 32);
    // argument si is killed and marked as dead
    // result si is marked as alive


    // MOV16mr killed renamable $rdi, 1, $noreg, 4, $noreg, killed renamable $si, implicit killed $rsi :: (store (s16) into %ir.0 + 4, align 1)
    // operand 0 is a memory operand
    FeMem inst2_op0;
    ScratchReg inst2_op0_scratch{derived()};
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // LLVM memory operand has displacement, check if it is encodeable with the disp from addr
        if (disp_add_encodeable(addr.disp, 4)) {
            inst2_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp + 4);
        } else {
            // displacements not encodeable together, need to materialize the addr
            AsmReg base_tmp = inst2_op0_scratch.alloc_from_bank(0);
            ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
            inst2_op0 = FE_MEM(base_tmp, 0, FE_NOREG, 4);
        }
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst2_op0 = FE_MEM(base, 0, FE_NOREG, 4);
    }
    // operand 1 is si
    // operand 1(si) is a simple register
    AsmReg inst2_op1 = scratch_si.cur_reg;
    // Handling implicit operand si
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    ASMD(MOV16mr, inst2_op0, inst2_op1);
    // argument di is killed and marked as dead
    // argument si is killed and marked as dead
    // argument si is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_storei56(AsmOperand param_0, AsmOperand param_1) {
    // # Machine code for function storei56: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   MOV32mr renamable $rdi, 1, $noreg, 0, $noreg, renamable $esi :: (store (s32) into %ir.0, align 1)
    //   $rax = MOV64rr $rsi
    //   renamable $rax = SHR64ri killed renamable $rax(tied-def 0), 48, implicit-def dead $eflags
    //   MOV8mr renamable $rdi, 1, $noreg, 6, $noreg, killed renamable $al, implicit killed $rax :: (store (s8) into %ir.0 + 6)
    //   renamable $rsi = SHR64ri killed renamable $rsi(tied-def 0), 32, implicit-def dead $eflags
    //   MOV16mr killed renamable $rdi, 1, $noreg, 4, $noreg, killed renamable $si, implicit killed $rsi :: (store (s16) into %ir.0 + 4, align 1)
    //   RET64
    // 
    // # End machine code for function storei56.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // MOV32mr renamable $rdi, 1, $noreg, 0, $noreg, renamable $esi :: (store (s32) into %ir.0, align 1)
    // MOV32mr has a preferred encoding as MOV32mi if possible
    if (param_1.encodeable_as_imm32_sext()) {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(MOV32mi, inst0_op0, imm.const_u64);
    } else {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(MOV32mr, inst0_op0, inst0_op1);
    }


    // $rax = MOV64rr $rsi
    // aliasing ax to si


    // renamable $rax = SHR64ri killed renamable $rax(tied-def 0), 48, implicit-def dead $eflags
    // operand 0 is ax
    // ax is an alias for si
    // si is mapped to param_1
    AsmReg inst2_op0 = scratch_ax.alloc_from_bank(0);
    AsmReg inst2_op0_tmp = param_1.as_reg(this);
    ASMD(MOV64rr, inst2_op0, inst2_op0_tmp);
    // operand 1 is an immediate operand

    ASMD(SHR64ri, scratch_ax.cur_reg, 48);
    // argument ax is killed and marked as dead
    // removing alias from ax to si
    // result ax is marked as alive


    // MOV8mr renamable $rdi, 1, $noreg, 6, $noreg, killed renamable $al, implicit killed $rax :: (store (s8) into %ir.0 + 6)
    // operand 0 is a memory operand
    FeMem inst3_op0;
    ScratchReg inst3_op0_scratch{derived()};
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // LLVM memory operand has displacement, check if it is encodeable with the disp from addr
        if (disp_add_encodeable(addr.disp, 6)) {
            inst3_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp + 6);
        } else {
            // displacements not encodeable together, need to materialize the addr
            AsmReg base_tmp = inst3_op0_scratch.alloc_from_bank(0);
            ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
            inst3_op0 = FE_MEM(base_tmp, 0, FE_NOREG, 6);
        }
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst3_op0 = FE_MEM(base, 0, FE_NOREG, 6);
    }
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst3_op1 = scratch_ax.cur_reg;
    // Handling implicit operand ax
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    ASMD(MOV8mr, inst3_op0, inst3_op1);
    // argument ax is killed and marked as dead
    // argument ax is killed and marked as dead


    // renamable $rsi = SHR64ri killed renamable $rsi(tied-def 0), 32, implicit-def dead $eflags
    // operand 0 is si
    // si is mapped to param_1
    // operand 0(param_1) is tied so try to salvage or materialize
    param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
    // operand 1 is an immediate operand

    ASMD(SHR64ri, scratch_si.cur_reg, 32);
    // argument si is killed and marked as dead
    // result si is marked as alive


    // MOV16mr killed renamable $rdi, 1, $noreg, 4, $noreg, killed renamable $si, implicit killed $rsi :: (store (s16) into %ir.0 + 4, align 1)
    // operand 0 is a memory operand
    FeMem inst5_op0;
    ScratchReg inst5_op0_scratch{derived()};
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // LLVM memory operand has displacement, check if it is encodeable with the disp from addr
        if (disp_add_encodeable(addr.disp, 4)) {
            inst5_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp + 4);
        } else {
            // displacements not encodeable together, need to materialize the addr
            AsmReg base_tmp = inst5_op0_scratch.alloc_from_bank(0);
            ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
            inst5_op0 = FE_MEM(base_tmp, 0, FE_NOREG, 4);
        }
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst5_op0 = FE_MEM(base, 0, FE_NOREG, 4);
    }
    // operand 1 is si
    // operand 1(si) is a simple register
    AsmReg inst5_op1 = scratch_si.cur_reg;
    // Handling implicit operand si
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    ASMD(MOV16mr, inst5_op0, inst5_op1);
    // argument di is killed and marked as dead
    // argument si is killed and marked as dead
    // argument si is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_storei128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2) {
    // # Machine code for function storei128: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx, $rsi
    //   MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.0 + 8, basealign 16, !tbaa !18)
    //   MOV64mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0, align 16, !tbaa !18)
    //   RET64
    // 
    // # End machine code for function storei128.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};


    // MOV64mr renamable $rdi, 1, $noreg, 8, $noreg, killed renamable $rdx :: (store (s64) into %ir.0 + 8, basealign 16, !tbaa !18)
    // MOV64mr has a preferred encoding as MOV64mi if possible
    if (param_2.encodeable_as_imm32_sext()) {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        ScratchReg inst0_op0_scratch{derived()};
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // LLVM memory operand has displacement, check if it is encodeable with the disp from addr
            if (disp_add_encodeable(addr.disp, 8)) {
                inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp + 8);
            } else {
                // displacements not encodeable together, need to materialize the addr
                AsmReg base_tmp = inst0_op0_scratch.alloc_from_bank(0);
                ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
                inst0_op0 = FE_MEM(base_tmp, 0, FE_NOREG, 8);
            }
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 8);
        }
        // operand 1 is an immediate operand
        const auto& imm = param_2.imm();

        ASMD(MOV64mi, inst0_op0, imm.const_u64);
    } else {
        // operand 0 is a memory operand
        FeMem inst0_op0;
        ScratchReg inst0_op0_scratch{derived()};
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // LLVM memory operand has displacement, check if it is encodeable with the disp from addr
            if (disp_add_encodeable(addr.disp, 8)) {
                inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp + 8);
            } else {
                // displacements not encodeable together, need to materialize the addr
                AsmReg base_tmp = inst0_op0_scratch.alloc_from_bank(0);
                ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
                inst0_op0 = FE_MEM(base_tmp, 0, FE_NOREG, 8);
            }
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst0_op0 = FE_MEM(base, 0, FE_NOREG, 8);
        }
        // operand 1 is dx
        // dx is mapped to param_2
        AsmReg inst0_op1 = param_2.as_reg(this);

        ASMD(MOV64mr, inst0_op0, inst0_op1);
    }
    // argument dx is killed and marked as dead


    // MOV64mr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rsi :: (store (s64) into %ir.0, align 16, !tbaa !18)
    // MOV64mr has a preferred encoding as MOV64mi if possible
    if (param_1.encodeable_as_imm32_sext()) {
        // operand 0 is a memory operand
        FeMem inst1_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst1_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst1_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(MOV64mi, inst1_op0, imm.const_u64);
    } else {
        // operand 0 is a memory operand
        FeMem inst1_op0;
        // looking at base di
        // di maps to param_0, so could be an address
        if (param_0.is_addr()) {
            const auto& addr = param_0.legalize_address(this);
            // no index/disp in LLVM, can simply use the operand address
            inst1_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
        } else {
            // di maps to operand param_0
            AsmReg base = param_0.as_reg(this);
            inst1_op0 = FE_MEM(base, 0, FE_NOREG, 0);
        }
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(MOV64mr, inst1_op0, inst1_op1);
    }
    // argument di is killed and marked as dead
    // argument si is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_storef32(AsmOperand param_0, AsmOperand param_1) {
    // # Machine code for function storef32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $xmm0
    //   MOVSSmr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.0, !tbaa !20)
    //   RET64
    // 
    // # End machine code for function storef32.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // MOVSSmr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s32) into %ir.0, !tbaa !20)
    // operand 0 is a memory operand
    FeMem inst0_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    ASMD(SSE_MOVSSmr, inst0_op0, inst0_op1);
    // argument di is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_storef64(AsmOperand param_0, AsmOperand param_1) {
    // # Machine code for function storef64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $xmm0
    //   MOVSDmr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.0, !tbaa !22)
    //   RET64
    // 
    // # End machine code for function storef64.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // MOVSDmr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s64) into %ir.0, !tbaa !22)
    // operand 0 is a memory operand
    FeMem inst0_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    ASMD(SSE_MOVSDmr, inst0_op0, inst0_op1);
    // argument di is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_storev128(AsmOperand param_0, AsmOperand param_1) {
    // # Machine code for function storev128: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $xmm0
    //   MOVAPSmr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.0, !tbaa !5)
    //   RET64
    // 
    // # End machine code for function storev128.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // MOVAPSmr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $xmm0 :: (store (s128) into %ir.0, !tbaa !5)
    // operand 0 is a memory operand
    FeMem inst0_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    ASMD(SSE_MOVAPSmr, inst0_op0, inst0_op1);
    // argument di is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_storev256(AsmOperand param_0, AsmOperand param_1) {
    // # Machine code for function storev256: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $ymm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $ymm0
    //   VMOVAPSYmr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $ymm0 :: (store (s256) into %ir.0, !tbaa !5)
    //   VZEROUPPER implicit-def dead $ymm0, implicit-def dead $ymm1, implicit-def dead $ymm2, implicit-def dead $ymm3, implicit-def dead $ymm4, implicit-def dead $ymm5, implicit-def dead $ymm6, implicit-def dead $ymm7, implicit-def dead $ymm8, implicit-def dead $ymm9, implicit-def dead $ymm10, implicit-def dead $ymm11, implicit-def dead $ymm12, implicit-def dead $ymm13, implicit-def dead $ymm14, implicit-def dead $ymm15
    //   RET64
    // 
    // # End machine code for function storev256.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // VMOVAPSYmr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $ymm0 :: (store (s256) into %ir.0, !tbaa !5)
    // operand 0 is a memory operand
    FeMem inst0_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    ASMD(VMOVAPS256mr, inst0_op0, inst0_op1);
    // argument di is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // VZEROUPPER implicit-def dead $ymm0, implicit-def dead $ymm1, implicit-def dead $ymm2, implicit-def dead $ymm3, implicit-def dead $ymm4, implicit-def dead $ymm5, implicit-def dead $ymm6, implicit-def dead $ymm7, implicit-def dead $ymm8, implicit-def dead $ymm9, implicit-def dead $ymm10, implicit-def dead $ymm11, implicit-def dead $ymm12, implicit-def dead $ymm13, implicit-def dead $ymm14, implicit-def dead $ymm15
    // Skipping


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_storev512(AsmOperand param_0, AsmOperand param_1) {
    // # Machine code for function storev512: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $zmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $zmm0
    //   VMOVAPSZmr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $zmm0 :: (store (s512) into %ir.0, !tbaa !5)
    //   VZEROUPPER implicit-def dead $ymm0, implicit-def dead $ymm1, implicit-def dead $ymm2, implicit-def dead $ymm3, implicit-def dead $ymm4, implicit-def dead $ymm5, implicit-def dead $ymm6, implicit-def dead $ymm7, implicit-def dead $ymm8, implicit-def dead $ymm9, implicit-def dead $ymm10, implicit-def dead $ymm11, implicit-def dead $ymm12, implicit-def dead $ymm13, implicit-def dead $ymm14, implicit-def dead $ymm15
    //   RET64
    // 
    // # End machine code for function storev512.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // VMOVAPSZmr killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $zmm0 :: (store (s512) into %ir.0, !tbaa !5)
    // operand 0 is a memory operand
    FeMem inst0_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    ASMD(VMOVAPS512mr, inst0_op0, inst0_op1);
    // argument di is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // VZEROUPPER implicit-def dead $ymm0, implicit-def dead $ymm1, implicit-def dead $ymm2, implicit-def dead $ymm3, implicit-def dead $ymm4, implicit-def dead $ymm5, implicit-def dead $ymm6, implicit-def dead $ymm7, implicit-def dead $ymm8, implicit-def dead $ymm9, implicit-def dead $ymm10, implicit-def dead $ymm11, implicit-def dead $ymm12, implicit-def dead $ymm13, implicit-def dead $ymm14, implicit-def dead $ymm15
    // Skipping


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_addi32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function addi32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $esi
    //   renamable $esi = KILL killed $esi, implicit-def $rsi
    //   renamable $edi = KILL killed $edi, implicit-def $rdi
    //   renamable $eax = LEA64_32r killed renamable $rdi, 1, killed renamable $rsi, 0, $noreg
    //   RET64 killed $eax
    // 
    // # End machine code for function addi32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // renamable $esi = KILL killed $esi, implicit-def $rsi
    // KILL is a no-op


    // renamable $edi = KILL killed $edi, implicit-def $rdi
    // KILL is a no-op


    // renamable $eax = LEA64_32r killed renamable $rdi, 1, killed renamable $rsi, 0, $noreg
    // operand 1 is a memory operand
    FeMem inst2_op1;
    ScratchReg inst2_op1_scratch{derived()};
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // LLVM memory operand has index, need to materialize the addr
        AsmReg base_tmp = inst2_op1_scratch.alloc_from_bank(0);
        ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
        // gather the LLVM memory operand index si
        // si maps to operand param_1
        AsmReg index_tmp = param_1.as_reg(this);
        inst2_op1 = FE_MEM(base_tmp, 1, index_tmp, 0);
    } else {
        // di maps to operand param_0
        AsmReg base;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            base = scratch_ax.cur_reg;
        } else {
            base = param_0.as_reg(this);
        }
        // LLVM memory operand has index reg si
        // si maps to operand param_1
        if (param_1.encodeable_as_imm32_sext()) {
            inst2_op1 = FE_MEM(base, 0, FE_NOREG, 1 * (i32)param_1.imm().const_u64 + 0);
        } else {
            AsmReg index_tmp = param_1.as_reg(this);
            inst2_op1 = FE_MEM(base, 1, index_tmp, 0);
        }
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(LEA32rm, scratch_ax.cur_reg, inst2_op1);
    // argument di is killed and marked as dead
    // argument si is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_subi32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function subi32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $esi
    //   $eax = MOV32rr killed $edi
    //   renamable $eax = SUB32rr killed renamable $eax(tied-def 0), killed renamable $esi, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function subi32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // $eax = MOV32rr killed $edi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $eax = SUB32rr killed renamable $eax(tied-def 0), killed renamable $esi, implicit-def dead $eflags
    // SUB32rr has a preferred encoding as SUB32ri if possible
    if (param_1.encodeable_as_imm32_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SUB32ri, scratch_ax.cur_reg, imm.const_u64);
    }    // SUB32rr has a preferred encoding as SUB32rm if possible
    else if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SUB32rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SUB32rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument si is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_muli32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function muli32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $esi
    //   $eax = MOV32rr killed $edi
    //   renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), killed renamable $esi, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function muli32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // $eax = MOV32rr killed $edi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $eax = IMUL32rr killed renamable $eax(tied-def 0), killed renamable $esi, implicit-def dead $eflags
    // IMUL32rr has a preferred encoding as IMUL32rm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(IMUL32rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(IMUL32rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument si is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_udivi32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function udivi32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $esi
    //   $eax = MOV32rr killed $edi
    //   $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags
    //   DIV32r killed renamable $esi, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
    //   RET64 killed $eax
    // 
    // # End machine code for function udivi32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1}, reg_backup_ax);
    FixedRegBackup reg_backup_dx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::DX, scratch_dx, {&param_0, &param_1}, reg_backup_dx);


    // $eax = MOV32rr killed $edi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is dx
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is dx
    // operand is undef, just allocating scratch for it
    AsmReg inst1_op1 = scratch_dx.alloc_from_bank(0);


    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_dx.cur_reg, inst1_op1);
    // result dx is marked as alive


    // DIV32r killed renamable $esi, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
    // DIV32r has a preferred encoding as DIV32m if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst2_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());
        // Handling implicit operand ax
        // Need to break alias from ax to operand param_0 and copy the value
        AsmReg inst2_op4_tmp = param_0.as_reg(this);
        ASMD(MOV32rr, scratch_ax.cur_reg, inst2_op4_tmp);
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(DIV32m, inst2_op0);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        AsmReg inst2_op0 = param_1.as_reg(this);
        // Handling implicit operand ax
        // Need to break alias from ax to operand param_0 and copy the value
        AsmReg inst2_op4_tmp = param_0.as_reg(this);
        ASMD(MOV32rr, scratch_ax.cur_reg, inst2_op4_tmp);
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(DIV32r, inst2_op0);
    }
    // argument si is killed and marked as dead
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as alive
    // result dx is marked as dead


    // RET64 killed $eax
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    scratch_check_fixed_backup(scratch_dx, reg_backup_dx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_sdivi32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function sdivi32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $esi
    //   $eax = MOV32rr killed $edi
    //   CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
    //   IDIV32r killed renamable $esi, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
    //   RET64 killed $eax
    // 
    // # End machine code for function sdivi32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1}, reg_backup_ax);
    FixedRegBackup reg_backup_dx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::DX, scratch_dx, {&param_0, &param_1}, reg_backup_dx);


    // $eax = MOV32rr killed $edi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
    // Handling implicit operand ax
    // Need to break alias from ax to operand param_0 and copy the value
    AsmReg inst1_op2_tmp = param_0.as_reg(this);
    ASMD(MOV32rr, scratch_ax.cur_reg, inst1_op2_tmp);

    ASMD(CDQ);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result dx is marked as alive


    // IDIV32r killed renamable $esi, implicit-def $eax, implicit-def dead $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
    // IDIV32r has a preferred encoding as IDIV32m if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst2_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());
        // Handling implicit operand ax
        // Value is already in register, no need to copy
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(IDIV32m, inst2_op0);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        AsmReg inst2_op0 = param_1.as_reg(this);
        // Handling implicit operand ax
        // Value is already in register, no need to copy
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(IDIV32r, inst2_op0);
    }
    // argument si is killed and marked as dead
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as alive
    // result dx is marked as dead


    // RET64 killed $eax
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    scratch_check_fixed_backup(scratch_dx, reg_backup_dx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_uremi32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function uremi32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $esi
    //   $eax = MOV32rr killed $edi
    //   $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags
    //   DIV32r killed renamable $esi, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
    //   $eax = MOV32rr killed $edx
    //   RET64 killed $eax
    // 
    // # End machine code for function uremi32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1}, reg_backup_ax);
    FixedRegBackup reg_backup_dx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::DX, scratch_dx, {&param_0, &param_1}, reg_backup_dx);


    // $eax = MOV32rr killed $edi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is dx
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is dx
    // operand is undef, just allocating scratch for it
    AsmReg inst1_op1 = scratch_dx.alloc_from_bank(0);


    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_dx.cur_reg, inst1_op1);
    // result dx is marked as alive


    // DIV32r killed renamable $esi, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
    // DIV32r has a preferred encoding as DIV32m if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst2_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());
        // Handling implicit operand ax
        // Need to break alias from ax to operand param_0 and copy the value
        AsmReg inst2_op4_tmp = param_0.as_reg(this);
        ASMD(MOV32rr, scratch_ax.cur_reg, inst2_op4_tmp);
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(DIV32m, inst2_op0);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        AsmReg inst2_op0 = param_1.as_reg(this);
        // Handling implicit operand ax
        // Need to break alias from ax to operand param_0 and copy the value
        AsmReg inst2_op4_tmp = param_0.as_reg(this);
        ASMD(MOV32rr, scratch_ax.cur_reg, inst2_op4_tmp);
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(DIV32r, inst2_op0);
    }
    // argument si is killed and marked as dead
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as dead
    // result dx is marked as alive


    // $eax = MOV32rr killed $edx
    // aliasing ax to dx
    // source dx is killed, all aliases redirected and marked as dead


    // RET64 killed $eax
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    scratch_check_fixed_backup(scratch_dx, reg_backup_dx, false);
    // returning reg ax as result_0
    // ax is an alias for dx
    result_0 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_sremi32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function sremi32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $esi
    //   $eax = MOV32rr killed $edi
    //   CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
    //   IDIV32r killed renamable $esi, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
    //   $eax = MOV32rr killed $edx
    //   RET64 killed $eax
    // 
    // # End machine code for function sremi32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1}, reg_backup_ax);
    FixedRegBackup reg_backup_dx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::DX, scratch_dx, {&param_0, &param_1}, reg_backup_dx);


    // $eax = MOV32rr killed $edi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // CDQ implicit-def $eax, implicit-def $edx, implicit killed $eax
    // Handling implicit operand ax
    // Need to break alias from ax to operand param_0 and copy the value
    AsmReg inst1_op2_tmp = param_0.as_reg(this);
    ASMD(MOV32rr, scratch_ax.cur_reg, inst1_op2_tmp);

    ASMD(CDQ);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result dx is marked as alive


    // IDIV32r killed renamable $esi, implicit-def dead $eax, implicit-def $edx, implicit-def dead $eflags, implicit killed $eax, implicit killed $edx
    // IDIV32r has a preferred encoding as IDIV32m if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst2_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());
        // Handling implicit operand ax
        // Value is already in register, no need to copy
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(IDIV32m, inst2_op0);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        AsmReg inst2_op0 = param_1.as_reg(this);
        // Handling implicit operand ax
        // Value is already in register, no need to copy
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(IDIV32r, inst2_op0);
    }
    // argument si is killed and marked as dead
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as dead
    // result dx is marked as alive


    // $eax = MOV32rr killed $edx
    // aliasing ax to dx
    // source dx is killed, all aliases redirected and marked as dead


    // RET64 killed $eax
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    scratch_check_fixed_backup(scratch_dx, reg_backup_dx, false);
    // returning reg ax as result_0
    // ax is an alias for dx
    result_0 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_landi32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function landi32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $esi
    //   $eax = MOV32rr killed $edi
    //   renamable $eax = AND32rr killed renamable $eax(tied-def 0), killed renamable $esi, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function landi32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // $eax = MOV32rr killed $edi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $eax = AND32rr killed renamable $eax(tied-def 0), killed renamable $esi, implicit-def dead $eflags
    // AND32rr has a preferred encoding as AND32ri if possible
    if (param_1.encodeable_as_imm32_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(AND32ri, scratch_ax.cur_reg, imm.const_u64);
    }    // AND32rr has a preferred encoding as AND32rm if possible
    else if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(AND32rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(AND32rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument si is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_lori32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function lori32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $esi
    //   $eax = MOV32rr killed $edi
    //   renamable $eax = OR32rr killed renamable $eax(tied-def 0), killed renamable $esi, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function lori32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // $eax = MOV32rr killed $edi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $eax = OR32rr killed renamable $eax(tied-def 0), killed renamable $esi, implicit-def dead $eflags
    // OR32rr has a preferred encoding as OR32ri if possible
    if (param_1.encodeable_as_imm32_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(OR32ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR32rr has a preferred encoding as OR32rm if possible
    else if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(OR32rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(OR32rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument si is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_lxori32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function lxori32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $esi
    //   $eax = MOV32rr killed $edi
    //   renamable $eax = XOR32rr killed renamable $eax(tied-def 0), killed renamable $esi, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function lxori32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // $eax = MOV32rr killed $edi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $eax = XOR32rr killed renamable $eax(tied-def 0), killed renamable $esi, implicit-def dead $eflags
    // XOR32rr has a preferred encoding as XOR32ri if possible
    if (param_1.encodeable_as_imm32_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(XOR32ri, scratch_ax.cur_reg, imm.const_u64);
    }    // XOR32rr has a preferred encoding as XOR32rm if possible
    else if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(XOR32rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(XOR32rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument si is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_shli32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function shli32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $esi
    //   $ecx = MOV32rr killed $esi
    //   $eax = MOV32rr killed $edi
    //   $cl = KILL killed renamable $cl, implicit killed $ecx
    //   renamable $eax = SHL32rCL killed renamable $eax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   RET64 killed $eax
    // 
    // # End machine code for function shli32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    if (((!param_1.encodeable_as_imm8_sext()))) {
        scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1}, reg_backup_cx);
    }


    // $ecx = MOV32rr killed $esi
    // aliasing cx to si
    // source si is killed, all aliases redirected and marked as dead


    // $eax = MOV32rr killed $edi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // $cl = KILL killed renamable $cl, implicit killed $ecx
    // KILL is a no-op


    // renamable $eax = SHL32rCL killed renamable $eax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // SHL32rr has a preferred encoding as SHL32ri if possible
    if (param_1.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SHL32ri, scratch_ax.cur_reg, imm.const_u64);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is cx
        // cx is mapped to param_1
        // cx is an implicit operand, cannot salvage
        AsmReg inst3_op1_tmp = param_1.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst3_op1_tmp);

        ASMD(SHL32rr, scratch_ax.cur_reg, scratch_cx.cur_reg);
    }
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_shri32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function shri32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $esi
    //   $ecx = MOV32rr killed $esi
    //   $eax = MOV32rr killed $edi
    //   $cl = KILL killed renamable $cl, implicit killed $ecx
    //   renamable $eax = SHR32rCL killed renamable $eax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   RET64 killed $eax
    // 
    // # End machine code for function shri32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    if (((!param_1.encodeable_as_imm8_sext()))) {
        scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1}, reg_backup_cx);
    }


    // $ecx = MOV32rr killed $esi
    // aliasing cx to si
    // source si is killed, all aliases redirected and marked as dead


    // $eax = MOV32rr killed $edi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // $cl = KILL killed renamable $cl, implicit killed $ecx
    // KILL is a no-op


    // renamable $eax = SHR32rCL killed renamable $eax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // SHR32rr has a preferred encoding as SHR32ri if possible
    if (param_1.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SHR32ri, scratch_ax.cur_reg, imm.const_u64);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is cx
        // cx is mapped to param_1
        // cx is an implicit operand, cannot salvage
        AsmReg inst3_op1_tmp = param_1.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst3_op1_tmp);

        ASMD(SHR32rr, scratch_ax.cur_reg, scratch_cx.cur_reg);
    }
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_ashri32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function ashri32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $esi
    //   $ecx = MOV32rr killed $esi
    //   $eax = MOV32rr killed $edi
    //   $cl = KILL killed renamable $cl, implicit killed $ecx
    //   renamable $eax = SAR32rCL killed renamable $eax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   RET64 killed $eax
    // 
    // # End machine code for function ashri32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    if (((!param_1.encodeable_as_imm8_sext()))) {
        scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1}, reg_backup_cx);
    }


    // $ecx = MOV32rr killed $esi
    // aliasing cx to si
    // source si is killed, all aliases redirected and marked as dead


    // $eax = MOV32rr killed $edi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // $cl = KILL killed renamable $cl, implicit killed $ecx
    // KILL is a no-op


    // renamable $eax = SAR32rCL killed renamable $eax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // SAR32rr has a preferred encoding as SAR32ri if possible
    if (param_1.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SAR32ri, scratch_ax.cur_reg, imm.const_u64);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is cx
        // cx is mapped to param_1
        // cx is an implicit operand, cannot salvage
        AsmReg inst3_op1_tmp = param_1.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst3_op1_tmp);

        ASMD(SAR32rr, scratch_ax.cur_reg, scratch_cx.cur_reg);
    }
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_absi32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function absi32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   $eax = MOV32rr $edi
    //   renamable $eax = NEG32r killed renamable $eax(tied-def 0), implicit-def $eflags
    //   renamable $eax = CMOV32rr killed renamable $eax(tied-def 0), killed renamable $edi, 8, implicit killed $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function absi32.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // $eax = MOV32rr $edi
    // aliasing ax to di


    // renamable $eax = NEG32r killed renamable $eax(tied-def 0), implicit-def $eflags
    // operand 0 is ax
    // ax is an alias for di
    // di is mapped to param_0
    AsmReg inst1_op0 = scratch_ax.alloc_from_bank(0);
    AsmReg inst1_op0_tmp = param_0.as_reg(this);
    ASMD(MOV32rr, inst1_op0, inst1_op0_tmp);

    ASMD(NEG32r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // removing alias from ax to di
    // result ax is marked as alive


    // renamable $eax = CMOV32rr killed renamable $eax(tied-def 0), killed renamable $edi, 8, implicit killed $eflags
    // CMOVS32rr has a preferred encoding as CMOVS32rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst2_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        ASMD(CMOVS32rm, scratch_ax.cur_reg, inst2_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst2_op1 = param_0.as_reg(this);

        ASMD(CMOVS32rr, scratch_ax.cur_reg, inst2_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_addi64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function addi64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   renamable $rax = LEA64r killed renamable $rdi, 1, killed renamable $rsi, 0, $noreg
    //   RET64 killed $rax
    // 
    // # End machine code for function addi64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // renamable $rax = LEA64r killed renamable $rdi, 1, killed renamable $rsi, 0, $noreg
    // operand 1 is a memory operand
    FeMem inst0_op1;
    ScratchReg inst0_op1_scratch{derived()};
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // LLVM memory operand has index, need to materialize the addr
        AsmReg base_tmp = inst0_op1_scratch.alloc_from_bank(0);
        ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
        // gather the LLVM memory operand index si
        // si maps to operand param_1
        AsmReg index_tmp = param_1.as_reg(this);
        inst0_op1 = FE_MEM(base_tmp, 1, index_tmp, 0);
    } else {
        // di maps to operand param_0
        AsmReg base;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            base = scratch_ax.cur_reg;
        } else {
            base = param_0.as_reg(this);
        }
        // LLVM memory operand has index reg si
        // si maps to operand param_1
        if (param_1.encodeable_as_imm32_sext()) {
            inst0_op1 = FE_MEM(base, 0, FE_NOREG, 1 * (i32)param_1.imm().const_u64 + 0);
        } else {
            AsmReg index_tmp = param_1.as_reg(this);
            inst0_op1 = FE_MEM(base, 1, index_tmp, 0);
        }
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(LEA64rm, scratch_ax.cur_reg, inst0_op1);
    // argument di is killed and marked as dead
    // argument si is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_subi64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function subi64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   $rax = MOV64rr killed $rdi
    //   renamable $rax = SUB64rr killed renamable $rax(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function subi64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $rax = SUB64rr killed renamable $rax(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    // SUB64rr has a preferred encoding as SUB64ri if possible
    if (param_1.encodeable_as_imm32_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SUB64ri, scratch_ax.cur_reg, imm.const_u64);
    }    // SUB64rr has a preferred encoding as SUB64rm if possible
    else if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SUB64rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SUB64rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument si is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_muli64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function muli64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   $rax = MOV64rr killed $rdi
    //   renamable $rax = IMUL64rr killed renamable $rax(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function muli64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $rax = IMUL64rr killed renamable $rax(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    // IMUL64rr has a preferred encoding as IMUL64rm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(IMUL64rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(IMUL64rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument si is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_udivi64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function udivi64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   $rax = MOV64rr killed $rdi
    //   $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx
    //   DIV64r killed renamable $rsi, implicit-def $rax, implicit-def dead $rdx, implicit-def dead $eflags, implicit killed $rax, implicit killed $rdx
    //   RET64 killed $rax
    // 
    // # End machine code for function udivi64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1}, reg_backup_ax);
    FixedRegBackup reg_backup_dx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::DX, scratch_dx, {&param_0, &param_1}, reg_backup_dx);


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is dx
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is dx
    // operand is undef, just allocating scratch for it
    AsmReg inst1_op1 = scratch_dx.alloc_from_bank(0);


    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    // Ignoring implicit def RDX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(XOR32rr, scratch_dx.cur_reg, inst1_op1);
    // result dx is marked as alive
    // result dx is marked as alive


    // DIV64r killed renamable $rsi, implicit-def $rax, implicit-def dead $rdx, implicit-def dead $eflags, implicit killed $rax, implicit killed $rdx
    // DIV64r has a preferred encoding as DIV64m if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst2_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());
        // Handling implicit operand ax
        // Need to break alias from ax to operand param_0 and copy the value
        AsmReg inst2_op4_tmp = param_0.as_reg(this);
        ASMD(MOV64rr, scratch_ax.cur_reg, inst2_op4_tmp);
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(DIV64m, inst2_op0);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        AsmReg inst2_op0 = param_1.as_reg(this);
        // Handling implicit operand ax
        // Need to break alias from ax to operand param_0 and copy the value
        AsmReg inst2_op4_tmp = param_0.as_reg(this);
        ASMD(MOV64rr, scratch_ax.cur_reg, inst2_op4_tmp);
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(DIV64r, inst2_op0);
    }
    // argument si is killed and marked as dead
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as alive
    // result dx is marked as dead


    // RET64 killed $rax
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    scratch_check_fixed_backup(scratch_dx, reg_backup_dx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_sdivi64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function sdivi64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   $rax = MOV64rr killed $rdi
    //   CQO implicit-def $rax, implicit-def $rdx, implicit killed $rax
    //   IDIV64r killed renamable $rsi, implicit-def $rax, implicit-def dead $rdx, implicit-def dead $eflags, implicit killed $rax, implicit killed $rdx
    //   RET64 killed $rax
    // 
    // # End machine code for function sdivi64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1}, reg_backup_ax);
    FixedRegBackup reg_backup_dx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::DX, scratch_dx, {&param_0, &param_1}, reg_backup_dx);


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // CQO implicit-def $rax, implicit-def $rdx, implicit killed $rax
    // Handling implicit operand ax
    // Need to break alias from ax to operand param_0 and copy the value
    AsmReg inst1_op2_tmp = param_0.as_reg(this);
    ASMD(MOV64rr, scratch_ax.cur_reg, inst1_op2_tmp);

    ASMD(CQO);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result dx is marked as alive


    // IDIV64r killed renamable $rsi, implicit-def $rax, implicit-def dead $rdx, implicit-def dead $eflags, implicit killed $rax, implicit killed $rdx
    // IDIV64r has a preferred encoding as IDIV64m if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst2_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());
        // Handling implicit operand ax
        // Value is already in register, no need to copy
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(IDIV64m, inst2_op0);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        AsmReg inst2_op0 = param_1.as_reg(this);
        // Handling implicit operand ax
        // Value is already in register, no need to copy
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(IDIV64r, inst2_op0);
    }
    // argument si is killed and marked as dead
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as alive
    // result dx is marked as dead


    // RET64 killed $rax
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    scratch_check_fixed_backup(scratch_dx, reg_backup_dx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_uremi64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function uremi64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   $rax = MOV64rr killed $rdi
    //   $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx
    //   DIV64r killed renamable $rsi, implicit-def dead $rax, implicit-def $rdx, implicit-def dead $eflags, implicit killed $rax, implicit killed $rdx
    //   $rax = MOV64rr killed $rdx
    //   RET64 killed $rax
    // 
    // # End machine code for function uremi64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1}, reg_backup_ax);
    FixedRegBackup reg_backup_dx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::DX, scratch_dx, {&param_0, &param_1}, reg_backup_dx);


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is dx
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is dx
    // operand is undef, just allocating scratch for it
    AsmReg inst1_op1 = scratch_dx.alloc_from_bank(0);


    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    // Ignoring implicit def RDX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(XOR32rr, scratch_dx.cur_reg, inst1_op1);
    // result dx is marked as alive
    // result dx is marked as alive


    // DIV64r killed renamable $rsi, implicit-def dead $rax, implicit-def $rdx, implicit-def dead $eflags, implicit killed $rax, implicit killed $rdx
    // DIV64r has a preferred encoding as DIV64m if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst2_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());
        // Handling implicit operand ax
        // Need to break alias from ax to operand param_0 and copy the value
        AsmReg inst2_op4_tmp = param_0.as_reg(this);
        ASMD(MOV64rr, scratch_ax.cur_reg, inst2_op4_tmp);
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(DIV64m, inst2_op0);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        AsmReg inst2_op0 = param_1.as_reg(this);
        // Handling implicit operand ax
        // Need to break alias from ax to operand param_0 and copy the value
        AsmReg inst2_op4_tmp = param_0.as_reg(this);
        ASMD(MOV64rr, scratch_ax.cur_reg, inst2_op4_tmp);
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(DIV64r, inst2_op0);
    }
    // argument si is killed and marked as dead
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as dead
    // result dx is marked as alive


    // $rax = MOV64rr killed $rdx
    // aliasing ax to dx
    // source dx is killed, all aliases redirected and marked as dead


    // RET64 killed $rax
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    scratch_check_fixed_backup(scratch_dx, reg_backup_dx, false);
    // returning reg ax as result_0
    // ax is an alias for dx
    result_0 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_sremi64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function sremi64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   $rax = MOV64rr killed $rdi
    //   CQO implicit-def $rax, implicit-def $rdx, implicit killed $rax
    //   IDIV64r killed renamable $rsi, implicit-def dead $rax, implicit-def $rdx, implicit-def dead $eflags, implicit killed $rax, implicit killed $rdx
    //   $rax = MOV64rr killed $rdx
    //   RET64 killed $rax
    // 
    // # End machine code for function sremi64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1}, reg_backup_ax);
    FixedRegBackup reg_backup_dx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::DX, scratch_dx, {&param_0, &param_1}, reg_backup_dx);


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // CQO implicit-def $rax, implicit-def $rdx, implicit killed $rax
    // Handling implicit operand ax
    // Need to break alias from ax to operand param_0 and copy the value
    AsmReg inst1_op2_tmp = param_0.as_reg(this);
    ASMD(MOV64rr, scratch_ax.cur_reg, inst1_op2_tmp);

    ASMD(CQO);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result dx is marked as alive


    // IDIV64r killed renamable $rsi, implicit-def dead $rax, implicit-def $rdx, implicit-def dead $eflags, implicit killed $rax, implicit killed $rdx
    // IDIV64r has a preferred encoding as IDIV64m if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst2_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());
        // Handling implicit operand ax
        // Value is already in register, no need to copy
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(IDIV64m, inst2_op0);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        AsmReg inst2_op0 = param_1.as_reg(this);
        // Handling implicit operand ax
        // Value is already in register, no need to copy
        // Handling implicit operand dx
        // Value is already in register, no need to copy

        ASMD(IDIV64r, inst2_op0);
    }
    // argument si is killed and marked as dead
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as dead
    // result dx is marked as alive


    // $rax = MOV64rr killed $rdx
    // aliasing ax to dx
    // source dx is killed, all aliases redirected and marked as dead


    // RET64 killed $rax
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    scratch_check_fixed_backup(scratch_dx, reg_backup_dx, false);
    // returning reg ax as result_0
    // ax is an alias for dx
    result_0 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_landi64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function landi64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   $rax = MOV64rr killed $rdi
    //   renamable $rax = AND64rr killed renamable $rax(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function landi64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $rax = AND64rr killed renamable $rax(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    // AND64rr has a preferred encoding as AND64ri if possible
    if (param_1.encodeable_as_imm32_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(AND64ri, scratch_ax.cur_reg, imm.const_u64);
    }    // AND64rr has a preferred encoding as AND64rm if possible
    else if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(AND64rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(AND64rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument si is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_lori64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function lori64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   $rax = MOV64rr killed $rdi
    //   renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function lori64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    // OR64rr has a preferred encoding as OR64ri if possible
    if (param_1.encodeable_as_imm32_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(OR64ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR64rr has a preferred encoding as OR64rm if possible
    else if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(OR64rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(OR64rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument si is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_lxori64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function lxori64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   $rax = MOV64rr killed $rdi
    //   renamable $rax = XOR64rr killed renamable $rax(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function lxori64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $rax = XOR64rr killed renamable $rax(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    // XOR64rr has a preferred encoding as XOR64ri if possible
    if (param_1.encodeable_as_imm32_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(XOR64ri, scratch_ax.cur_reg, imm.const_u64);
    }    // XOR64rr has a preferred encoding as XOR64rm if possible
    else if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is a memory operand
        // si is base for memory operand to use
        // si maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(XOR64rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is si
        // si is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(XOR64rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument si is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_shli64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function shli64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   $rcx = MOV64rr killed $rsi
    //   $rax = MOV64rr killed $rdi
    //   $cl = KILL killed renamable $cl, implicit killed $rcx
    //   renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   RET64 killed $rax
    // 
    // # End machine code for function shli64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    if (((!param_1.encodeable_as_imm8_sext()))) {
        scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1}, reg_backup_cx);
    }


    // $rcx = MOV64rr killed $rsi
    // aliasing cx to si
    // source si is killed, all aliases redirected and marked as dead


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // $cl = KILL killed renamable $cl, implicit killed $rcx
    // KILL is a no-op


    // renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // SHL64rr has a preferred encoding as SHL64ri if possible
    if (param_1.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SHL64ri, scratch_ax.cur_reg, imm.const_u64);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_1
        // cx is an implicit operand, cannot salvage
        AsmReg inst3_op1_tmp = param_1.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst3_op1_tmp);

        ASMD(SHL64rr, scratch_ax.cur_reg, scratch_cx.cur_reg);
    }
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_shri64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function shri64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   $rcx = MOV64rr killed $rsi
    //   $rax = MOV64rr killed $rdi
    //   $cl = KILL killed renamable $cl, implicit killed $rcx
    //   renamable $rax = SHR64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   RET64 killed $rax
    // 
    // # End machine code for function shri64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    if (((!param_1.encodeable_as_imm8_sext()))) {
        scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1}, reg_backup_cx);
    }


    // $rcx = MOV64rr killed $rsi
    // aliasing cx to si
    // source si is killed, all aliases redirected and marked as dead


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // $cl = KILL killed renamable $cl, implicit killed $rcx
    // KILL is a no-op


    // renamable $rax = SHR64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // SHR64rr has a preferred encoding as SHR64ri if possible
    if (param_1.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SHR64ri, scratch_ax.cur_reg, imm.const_u64);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_1
        // cx is an implicit operand, cannot salvage
        AsmReg inst3_op1_tmp = param_1.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst3_op1_tmp);

        ASMD(SHR64rr, scratch_ax.cur_reg, scratch_cx.cur_reg);
    }
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_ashri64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function ashri64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $rdi, $rsi
    //   $rcx = MOV64rr killed $rsi
    //   $rax = MOV64rr killed $rdi
    //   $cl = KILL killed renamable $cl, implicit killed $rcx
    //   renamable $rax = SAR64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   RET64 killed $rax
    // 
    // # End machine code for function ashri64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    if (((!param_1.encodeable_as_imm8_sext()))) {
        scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1}, reg_backup_cx);
    }


    // $rcx = MOV64rr killed $rsi
    // aliasing cx to si
    // source si is killed, all aliases redirected and marked as dead


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // $cl = KILL killed renamable $cl, implicit killed $rcx
    // KILL is a no-op


    // renamable $rax = SAR64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // SAR64rr has a preferred encoding as SAR64ri if possible
    if (param_1.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SAR64ri, scratch_ax.cur_reg, imm.const_u64);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_1
        // cx is an implicit operand, cannot salvage
        AsmReg inst3_op1_tmp = param_1.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst3_op1_tmp);

        ASMD(SAR64rr, scratch_ax.cur_reg, scratch_cx.cur_reg);
    }
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_absi64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function absi64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   $rax = MOV64rr $rdi
    //   renamable $rax = NEG64r killed renamable $rax(tied-def 0), implicit-def $eflags
    //   renamable $rax = CMOV64rr killed renamable $rax(tied-def 0), killed renamable $rdi, 8, implicit killed $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function absi64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // $rax = MOV64rr $rdi
    // aliasing ax to di


    // renamable $rax = NEG64r killed renamable $rax(tied-def 0), implicit-def $eflags
    // operand 0 is ax
    // ax is an alias for di
    // di is mapped to param_0
    AsmReg inst1_op0 = scratch_ax.alloc_from_bank(0);
    AsmReg inst1_op0_tmp = param_0.as_reg(this);
    ASMD(MOV64rr, inst1_op0, inst1_op0_tmp);

    ASMD(NEG64r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // removing alias from ax to di
    // result ax is marked as alive


    // renamable $rax = CMOV64rr killed renamable $rax(tied-def 0), killed renamable $rdi, 8, implicit killed $eflags
    // CMOVS64rr has a preferred encoding as CMOVS64rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst2_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        ASMD(CMOVS64rm, scratch_ax.cur_reg, inst2_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst2_op1 = param_0.as_reg(this);

        ASMD(CMOVS64rr, scratch_ax.cur_reg, inst2_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_addi128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, AsmOperand param_3, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function addi128: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx, $rcx
    // 
    // bb.0 (%ir-block.4):
    //   liveins: $rcx, $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rdi
    //   renamable $rax = ADD64rr killed renamable $rax(tied-def 0), killed renamable $rdx, implicit-def $eflags
    //   renamable $rsi = ADC64rr killed renamable $rsi(tied-def 0), killed renamable $rcx, implicit-def dead $eflags, implicit killed $eflags
    //   $rdx = MOV64rr killed $rsi
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function addi128.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    // Mapping cx to param_3
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $rax = ADD64rr killed renamable $rax(tied-def 0), killed renamable $rdx, implicit-def $eflags
    // ADD64rr has a preferred encoding as ADD64ri if possible
    if (param_2.encodeable_as_imm32_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_2.imm();

        ASMD(ADD64ri, scratch_ax.cur_reg, imm.const_u64);
    }    // ADD64rr has a preferred encoding as ADD64rm if possible
    else if (param_2.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is a memory operand
        // dx is base for memory operand to use
        // dx maps to operand param_2 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_2.val_ref_frame_off());

        ASMD(ADD64rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is dx
        // dx is mapped to param_2
        AsmReg inst1_op1 = param_2.as_reg(this);

        ASMD(ADD64rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as alive


    // renamable $rsi = ADC64rr killed renamable $rsi(tied-def 0), killed renamable $rcx, implicit-def dead $eflags, implicit killed $eflags
    // ADC64rr has a preferred encoding as ADC64ri if possible
    if (param_3.encodeable_as_imm32_sext()) {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_3.imm();

        ASMD(ADC64ri, scratch_si.cur_reg, imm.const_u64);
    }    // ADC64rr has a preferred encoding as ADC64rm if possible
    else if (param_3.val_ref_prefers_mem_enc()) {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is a memory operand
        // cx is base for memory operand to use
        // cx maps to operand param_3 which is known to be a ValuePartRef
        FeMem inst2_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_3.val_ref_frame_off());

        ASMD(ADC64rm, scratch_si.cur_reg, inst2_op1);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_3
        AsmReg inst2_op1 = param_3.as_reg(this);

        ASMD(ADC64rr, scratch_si.cur_reg, inst2_op1);
    }
    // argument si is killed and marked as dead
    // argument cx is killed and marked as dead
    // result si is marked as alive


    // $rdx = MOV64rr killed $rsi
    // aliasing dx to si
    // source si is killed, all aliases redirected and marked as dead


    // RET64 killed $rax, killed $rdx
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    // dx is an alias for si
    result_1 = std::move(scratch_si);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_subi128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, AsmOperand param_3, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function subi128: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx, $rcx
    // 
    // bb.0 (%ir-block.4):
    //   liveins: $rcx, $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rdi
    //   renamable $rax = SUB64rr killed renamable $rax(tied-def 0), killed renamable $rdx, implicit-def $eflags
    //   renamable $rsi = SBB64rr killed renamable $rsi(tied-def 0), killed renamable $rcx, implicit-def dead $eflags, implicit killed $eflags
    //   $rdx = MOV64rr killed $rsi
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function subi128.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    // Mapping cx to param_3
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $rax = SUB64rr killed renamable $rax(tied-def 0), killed renamable $rdx, implicit-def $eflags
    // SUB64rr has a preferred encoding as SUB64ri if possible
    if (param_2.encodeable_as_imm32_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_2.imm();

        ASMD(SUB64ri, scratch_ax.cur_reg, imm.const_u64);
    }    // SUB64rr has a preferred encoding as SUB64rm if possible
    else if (param_2.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is a memory operand
        // dx is base for memory operand to use
        // dx maps to operand param_2 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_2.val_ref_frame_off());

        ASMD(SUB64rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is dx
        // dx is mapped to param_2
        AsmReg inst1_op1 = param_2.as_reg(this);

        ASMD(SUB64rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as alive


    // renamable $rsi = SBB64rr killed renamable $rsi(tied-def 0), killed renamable $rcx, implicit-def dead $eflags, implicit killed $eflags
    // SBB64rr has a preferred encoding as SBB64ri if possible
    if (param_3.encodeable_as_imm32_sext()) {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_3.imm();

        ASMD(SBB64ri, scratch_si.cur_reg, imm.const_u64);
    }    // SBB64rr has a preferred encoding as SBB64rm if possible
    else if (param_3.val_ref_prefers_mem_enc()) {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is a memory operand
        // cx is base for memory operand to use
        // cx maps to operand param_3 which is known to be a ValuePartRef
        FeMem inst2_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_3.val_ref_frame_off());

        ASMD(SBB64rm, scratch_si.cur_reg, inst2_op1);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_3
        AsmReg inst2_op1 = param_3.as_reg(this);

        ASMD(SBB64rr, scratch_si.cur_reg, inst2_op1);
    }
    // argument si is killed and marked as dead
    // argument cx is killed and marked as dead
    // result si is marked as alive


    // $rdx = MOV64rr killed $rsi
    // aliasing dx to si
    // source si is killed, all aliases redirected and marked as dead


    // RET64 killed $rax, killed $rdx
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    // dx is an alias for si
    result_1 = std::move(scratch_si);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_muli128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, AsmOperand param_3, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function muli128: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx, $rcx
    // 
    // bb.0 (%ir-block.4):
    //   liveins: $rcx, $rdi, $rdx, $rsi
    //   $rax = MOV64rr $rdx
    //   renamable $rsi = IMUL64rr killed renamable $rsi(tied-def 0), killed $rdx, implicit-def dead $eflags
    //   MUL64r renamable $rdi, implicit-def $rax, implicit-def $rdx, implicit-def dead $eflags, implicit killed $rax
    //   renamable $rdx = ADD64rr killed renamable $rdx(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    //   renamable $rcx = IMUL64rr killed renamable $rcx(tied-def 0), killed renamable $rdi, implicit-def dead $eflags
    //   renamable $rdx = ADD64rr killed renamable $rdx(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function muli128.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    // Mapping cx to param_3
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1, &param_2, &param_3}, reg_backup_ax);
    FixedRegBackup reg_backup_dx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::DX, scratch_dx, {&param_0, &param_1, &param_2, &param_3}, reg_backup_dx);


    // $rax = MOV64rr $rdx
    // aliasing ax to dx


    // renamable $rsi = IMUL64rr killed renamable $rsi(tied-def 0), killed $rdx, implicit-def dead $eflags
    // IMUL64rr has a preferred encoding as IMUL64rm if possible
    if (param_2.val_ref_prefers_mem_enc()) {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is a memory operand
        // dx is base for memory operand to use
        // dx maps to operand param_2 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_2.val_ref_frame_off());

        ASMD(IMUL64rm, scratch_si.cur_reg, inst1_op1);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is dx
        // dx is mapped to param_2
        AsmReg inst1_op1 = param_2.as_reg(this);

        ASMD(IMUL64rr, scratch_si.cur_reg, inst1_op1);
    }
    // argument si is killed and marked as dead
    // argument dx is killed and marked as dead
    // result si is marked as alive


    // MUL64r renamable $rdi, implicit-def $rax, implicit-def $rdx, implicit-def dead $eflags, implicit killed $rax
    // MUL64r has a preferred encoding as MUL64m if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst2_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand ax
        // ax is an alias for dx
        // Need to break alias from ax to dx and copy the value
        ASMD(MOV64rr, scratch_ax.cur_reg, scratch_dx.cur_reg);

        ASMD(MUL64m, inst2_op0);
    } else {
        // operand 0 is di
        // di is mapped to param_0
        AsmReg inst2_op0 = param_0.as_reg(this);
        // Handling implicit operand ax
        // ax is an alias for dx
        // Need to break alias from ax to dx and copy the value
        ASMD(MOV64rr, scratch_ax.cur_reg, scratch_dx.cur_reg);
    // removing alias from ax to dx

        ASMD(MUL64r, inst2_op0);
    }
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result dx is marked as alive


    // renamable $rdx = ADD64rr killed renamable $rdx(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    // operand 0 is dx
    // operand 0(dx) is the same as its tied destination
    scratch_dx.alloc_from_bank(0);
    // operand 1 is si
    // operand 1(si) is a simple register
    AsmReg inst3_op1 = scratch_si.cur_reg;

    ASMD(ADD64rr, scratch_dx.cur_reg, inst3_op1);
    // argument dx is killed and marked as dead
    // argument si is killed and marked as dead
    // result dx is marked as alive


    // renamable $rcx = IMUL64rr killed renamable $rcx(tied-def 0), killed renamable $rdi, implicit-def dead $eflags
    // IMUL64rr has a preferred encoding as IMUL64rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is cx
        // cx is mapped to param_3
        // operand 0(param_3) is tied so try to salvage or materialize
        param_3.try_salvage_or_materialize(this, scratch_cx, 0, 8);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst4_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        ASMD(IMUL64rm, scratch_cx.cur_reg, inst4_op1);
    } else {
        // operand 0 is cx
        // cx is mapped to param_3
        // operand 0(param_3) is tied so try to salvage or materialize
        param_3.try_salvage_or_materialize(this, scratch_cx, 0, 8);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst4_op1 = param_0.as_reg(this);

        ASMD(IMUL64rr, scratch_cx.cur_reg, inst4_op1);
    }
    // argument cx is killed and marked as dead
    // argument di is killed and marked as dead
    // result cx is marked as alive


    // renamable $rdx = ADD64rr killed renamable $rdx(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    // operand 0 is dx
    // operand 0(dx) is the same as its tied destination
    scratch_dx.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst5_op1 = scratch_cx.cur_reg;

    ASMD(ADD64rr, scratch_dx.cur_reg, inst5_op1);
    // argument dx is killed and marked as dead
    // argument cx is killed and marked as dead
    // result dx is marked as alive


    // RET64 killed $rax, killed $rdx
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    scratch_check_fixed_backup(scratch_dx, reg_backup_dx, true);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_landi128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, AsmOperand param_3, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function landi128: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx, $rcx
    // 
    // bb.0 (%ir-block.4):
    //   liveins: $rcx, $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rdi
    //   renamable $rax = AND64rr killed renamable $rax(tied-def 0), killed renamable $rdx, implicit-def dead $eflags
    //   renamable $rsi = AND64rr killed renamable $rsi(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    //   $rdx = MOV64rr killed $rsi
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function landi128.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    // Mapping cx to param_3
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $rax = AND64rr killed renamable $rax(tied-def 0), killed renamable $rdx, implicit-def dead $eflags
    // AND64rr has a preferred encoding as AND64ri if possible
    if (param_2.encodeable_as_imm32_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_2.imm();

        ASMD(AND64ri, scratch_ax.cur_reg, imm.const_u64);
    }    // AND64rr has a preferred encoding as AND64rm if possible
    else if (param_2.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is a memory operand
        // dx is base for memory operand to use
        // dx maps to operand param_2 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_2.val_ref_frame_off());

        ASMD(AND64rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is dx
        // dx is mapped to param_2
        AsmReg inst1_op1 = param_2.as_reg(this);

        ASMD(AND64rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as alive


    // renamable $rsi = AND64rr killed renamable $rsi(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    // AND64rr has a preferred encoding as AND64ri if possible
    if (param_3.encodeable_as_imm32_sext()) {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_3.imm();

        ASMD(AND64ri, scratch_si.cur_reg, imm.const_u64);
    }    // AND64rr has a preferred encoding as AND64rm if possible
    else if (param_3.val_ref_prefers_mem_enc()) {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is a memory operand
        // cx is base for memory operand to use
        // cx maps to operand param_3 which is known to be a ValuePartRef
        FeMem inst2_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_3.val_ref_frame_off());

        ASMD(AND64rm, scratch_si.cur_reg, inst2_op1);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_3
        AsmReg inst2_op1 = param_3.as_reg(this);

        ASMD(AND64rr, scratch_si.cur_reg, inst2_op1);
    }
    // argument si is killed and marked as dead
    // argument cx is killed and marked as dead
    // result si is marked as alive


    // $rdx = MOV64rr killed $rsi
    // aliasing dx to si
    // source si is killed, all aliases redirected and marked as dead


    // RET64 killed $rax, killed $rdx
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    // dx is an alias for si
    result_1 = std::move(scratch_si);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_lori128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, AsmOperand param_3, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function lori128: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx, $rcx
    // 
    // bb.0 (%ir-block.4):
    //   liveins: $rcx, $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rdi
    //   renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rdx, implicit-def dead $eflags
    //   renamable $rsi = OR64rr killed renamable $rsi(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    //   $rdx = MOV64rr killed $rsi
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function lori128.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    // Mapping cx to param_3
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rdx, implicit-def dead $eflags
    // OR64rr has a preferred encoding as OR64ri if possible
    if (param_2.encodeable_as_imm32_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_2.imm();

        ASMD(OR64ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR64rr has a preferred encoding as OR64rm if possible
    else if (param_2.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is a memory operand
        // dx is base for memory operand to use
        // dx maps to operand param_2 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_2.val_ref_frame_off());

        ASMD(OR64rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is dx
        // dx is mapped to param_2
        AsmReg inst1_op1 = param_2.as_reg(this);

        ASMD(OR64rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as alive


    // renamable $rsi = OR64rr killed renamable $rsi(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    // OR64rr has a preferred encoding as OR64ri if possible
    if (param_3.encodeable_as_imm32_sext()) {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_3.imm();

        ASMD(OR64ri, scratch_si.cur_reg, imm.const_u64);
    }    // OR64rr has a preferred encoding as OR64rm if possible
    else if (param_3.val_ref_prefers_mem_enc()) {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is a memory operand
        // cx is base for memory operand to use
        // cx maps to operand param_3 which is known to be a ValuePartRef
        FeMem inst2_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_3.val_ref_frame_off());

        ASMD(OR64rm, scratch_si.cur_reg, inst2_op1);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_3
        AsmReg inst2_op1 = param_3.as_reg(this);

        ASMD(OR64rr, scratch_si.cur_reg, inst2_op1);
    }
    // argument si is killed and marked as dead
    // argument cx is killed and marked as dead
    // result si is marked as alive


    // $rdx = MOV64rr killed $rsi
    // aliasing dx to si
    // source si is killed, all aliases redirected and marked as dead


    // RET64 killed $rax, killed $rdx
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    // dx is an alias for si
    result_1 = std::move(scratch_si);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_lxori128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, AsmOperand param_3, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function lxori128: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx, $rcx
    // 
    // bb.0 (%ir-block.4):
    //   liveins: $rcx, $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rdi
    //   renamable $rax = XOR64rr killed renamable $rax(tied-def 0), killed renamable $rdx, implicit-def dead $eflags
    //   renamable $rsi = XOR64rr killed renamable $rsi(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    //   $rdx = MOV64rr killed $rsi
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function lxori128.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    // Mapping cx to param_3
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $rax = XOR64rr killed renamable $rax(tied-def 0), killed renamable $rdx, implicit-def dead $eflags
    // XOR64rr has a preferred encoding as XOR64ri if possible
    if (param_2.encodeable_as_imm32_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_2.imm();

        ASMD(XOR64ri, scratch_ax.cur_reg, imm.const_u64);
    }    // XOR64rr has a preferred encoding as XOR64rm if possible
    else if (param_2.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is a memory operand
        // dx is base for memory operand to use
        // dx maps to operand param_2 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_2.val_ref_frame_off());

        ASMD(XOR64rm, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is dx
        // dx is mapped to param_2
        AsmReg inst1_op1 = param_2.as_reg(this);

        ASMD(XOR64rr, scratch_ax.cur_reg, inst1_op1);
    }
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as alive


    // renamable $rsi = XOR64rr killed renamable $rsi(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    // XOR64rr has a preferred encoding as XOR64ri if possible
    if (param_3.encodeable_as_imm32_sext()) {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_3.imm();

        ASMD(XOR64ri, scratch_si.cur_reg, imm.const_u64);
    }    // XOR64rr has a preferred encoding as XOR64rm if possible
    else if (param_3.val_ref_prefers_mem_enc()) {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is a memory operand
        // cx is base for memory operand to use
        // cx maps to operand param_3 which is known to be a ValuePartRef
        FeMem inst2_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_3.val_ref_frame_off());

        ASMD(XOR64rm, scratch_si.cur_reg, inst2_op1);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_3
        AsmReg inst2_op1 = param_3.as_reg(this);

        ASMD(XOR64rr, scratch_si.cur_reg, inst2_op1);
    }
    // argument si is killed and marked as dead
    // argument cx is killed and marked as dead
    // result si is marked as alive


    // $rdx = MOV64rr killed $rsi
    // aliasing dx to si
    // source si is killed, all aliases redirected and marked as dead


    // RET64 killed $rax, killed $rdx
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    // dx is an alias for si
    result_1 = std::move(scratch_si);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_shli128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function shli128: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.4):
    //   liveins: $rdi, $rdx, $rsi
    //   $r8 = MOV64rr killed $rdx
    //   $ecx = MOV32rr undef $r8d, implicit $r8b
    //   renamable $rsi = SHL64rCL killed renamable $rsi(tied-def 0), implicit-def dead $eflags, implicit $cl
    //   $rdx = MOV64rr $rdi
    //   renamable $rdx = SHR64ri killed renamable $rdx(tied-def 0), 1, implicit-def dead $eflags
    //   renamable $cl = NOT8r killed renamable $cl(tied-def 0)
    //   renamable $rdx = SHR64rCL killed renamable $rdx(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   renamable $rdx = OR64rr killed renamable $rdx(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    //   $ecx = MOV32rr undef $r8d, implicit $r8b
    //   renamable $rdi = SHL64rCL killed renamable $rdi(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $rax
    //   TEST8ri killed renamable $r8b, 64, implicit-def $eflags, implicit killed $r8
    //   renamable $rdx = CMOV64rr killed renamable $rdx(tied-def 0), renamable $rdi, 5, implicit $eflags
    //   renamable $rax = CMOV64rr killed renamable $rax(tied-def 0), killed renamable $rdi, 4, implicit killed $eflags
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function shli128.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    ScratchReg scratch_r8{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1, &param_2}, reg_backup_cx);


    // $r8 = MOV64rr killed $rdx
    // aliasing r8 to dx
    // source dx is killed, all aliases redirected and marked as dead


    // $ecx = MOV32rr undef $r8d, implicit $r8b
    // aliasing cx to r8


    // renamable $rsi = SHL64rCL killed renamable $rsi(tied-def 0), implicit-def dead $eflags, implicit $cl
    // SHL64rr has a preferred encoding as SHL64ri if possible
    if (param_2.encodeable_as_imm8_sext()) {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is an immediate operand
        // cx is an alias for r8
        const auto& imm = param_2.imm();

        ASMD(SHL64ri, scratch_si.cur_reg, imm.const_u64);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is cx
        // cx is an alias for r8
        // r8 is mapped to param_2
        // cx is an implicit operand, cannot salvage
        AsmReg inst2_op1_tmp = param_2.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst2_op1_tmp);

        ASMD(SHL64rr, scratch_si.cur_reg, scratch_cx.cur_reg);
    }
    // argument si is killed and marked as dead
    // result si is marked as alive


    // $rdx = MOV64rr $rdi
    // aliasing dx to di


    // renamable $rdx = SHR64ri killed renamable $rdx(tied-def 0), 1, implicit-def dead $eflags
    // operand 0 is dx
    // dx is an alias for di
    // di is mapped to param_0
    AsmReg inst4_op0 = scratch_dx.alloc_from_bank(0);
    AsmReg inst4_op0_tmp = param_0.as_reg(this);
    ASMD(MOV64rr, inst4_op0, inst4_op0_tmp);
    // operand 1 is an immediate operand

    ASMD(SHR64ri, scratch_dx.cur_reg, 1);
    // argument dx is killed and marked as dead
    // removing alias from dx to di
    // result dx is marked as alive


    // renamable $cl = NOT8r killed renamable $cl(tied-def 0)
    // operand 0 is cx
    // cx is an alias for r8
    // r8 is mapped to param_2
    AsmReg inst5_op0 = scratch_cx.alloc_from_bank(0);
    AsmReg inst5_op0_tmp = param_2.as_reg(this);
    ASMD(MOV32rr, inst5_op0, inst5_op0_tmp);

    ASMD(NOT8r, scratch_cx.cur_reg);
    // argument cx is killed and marked as dead
    // removing alias from cx to r8
    // result cx is marked as alive


    // renamable $rdx = SHR64rCL killed renamable $rdx(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // operand 0 is dx
    // operand 0(dx) is the same as its tied destination
    scratch_dx.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst6_op1 = scratch_cx.cur_reg;

    ASMD(SHR64rr, scratch_dx.cur_reg, inst6_op1);
    // argument dx is killed and marked as dead
    // argument cx is killed and marked as dead
    // result dx is marked as alive


    // renamable $rdx = OR64rr killed renamable $rdx(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    // operand 0 is dx
    // operand 0(dx) is the same as its tied destination
    scratch_dx.alloc_from_bank(0);
    // operand 1 is si
    // operand 1(si) is a simple register
    AsmReg inst7_op1 = scratch_si.cur_reg;

    ASMD(OR64rr, scratch_dx.cur_reg, inst7_op1);
    // argument dx is killed and marked as dead
    // argument si is killed and marked as dead
    // result dx is marked as alive


    // $ecx = MOV32rr undef $r8d, implicit $r8b
    // aliasing cx to r8


    // renamable $rdi = SHL64rCL killed renamable $rdi(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // SHL64rr has a preferred encoding as SHL64ri if possible
    if (param_2.encodeable_as_imm8_sext()) {
        // operand 0 is di
        // di is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_di, 0, 8);
        // operand 1 is an immediate operand
        // cx is an alias for r8
        const auto& imm = param_2.imm();

        ASMD(SHL64ri, scratch_di.cur_reg, imm.const_u64);
    } else {
        // operand 0 is di
        // di is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_di, 0, 8);
        // operand 1 is cx
        // cx is an alias for r8
        // r8 is mapped to param_2
        // cx is an implicit operand, cannot salvage
        AsmReg inst9_op1_tmp = param_2.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst9_op1_tmp);

        ASMD(SHL64rr, scratch_di.cur_reg, scratch_cx.cur_reg);
    }
    // argument di is killed and marked as dead
    // argument cx is killed and marked as dead
    // removing alias from cx to r8
    // result di is marked as alive


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $rax
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst10_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(XOR32rr, scratch_ax.cur_reg, inst10_op1);
    // result ax is marked as alive
    // result ax is marked as alive


    // TEST8ri killed renamable $r8b, 64, implicit-def $eflags, implicit killed $r8
    // TEST8ri has a preferred encoding as TEST8mi if possible
    if (param_2.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // r8 is base for memory operand to use
        // r8 maps to operand param_2 which is known to be a ValuePartRef
        FeMem inst11_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_2.val_ref_frame_off());
        // operand 1 is an immediate operand
        // Handling implicit operand r8
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8mi, inst11_op0, 64);
    } else {
        // operand 0 is r8
        // r8 is mapped to param_2
        AsmReg inst11_op0 = param_2.as_reg(this);
        // operand 1 is an immediate operand
        // Handling implicit operand r8
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8ri, inst11_op0, 64);
    }
    // argument r8 is killed and marked as dead
    // argument r8 is killed and marked as dead


    // renamable $rdx = CMOV64rr killed renamable $rdx(tied-def 0), renamable $rdi, 5, implicit $eflags
    // operand 0 is dx
    // operand 0(dx) is the same as its tied destination
    scratch_dx.alloc_from_bank(0);
    // operand 1 is di
    // operand 1(di) is a simple register
    AsmReg inst12_op1 = scratch_di.cur_reg;

    ASMD(CMOVNZ64rr, scratch_dx.cur_reg, inst12_op1);
    // argument dx is killed and marked as dead
    // result dx is marked as alive


    // renamable $rax = CMOV64rr killed renamable $rax(tied-def 0), killed renamable $rdi, 4, implicit killed $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is di
    // operand 1(di) is a simple register
    AsmReg inst13_op1 = scratch_di.cur_reg;

    ASMD(CMOVZ64rr, scratch_ax.cur_reg, inst13_op1);
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax, killed $rdx
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_shri128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function shri128: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.4):
    //   liveins: $rdi, $rdx, $rsi
    //   $r8 = MOV64rr killed $rdx
    //   $ecx = MOV32rr undef $r8d, implicit $r8b
    //   renamable $rdi = SHR64rCL killed renamable $rdi(tied-def 0), implicit-def dead $eflags, implicit $cl
    //   renamable $rax = LEA64r renamable $rsi, 1, renamable $rsi, 0, $noreg
    //   renamable $cl = NOT8r killed renamable $cl(tied-def 0)
    //   renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rdi, implicit-def dead $eflags
    //   $ecx = MOV32rr undef $r8d, implicit $r8b
    //   renamable $rsi = SHR64rCL killed renamable $rsi(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   renamable $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx
    //   TEST8ri killed renamable $r8b, 64, implicit-def $eflags, implicit killed $r8
    //   renamable $rax = CMOV64rr killed renamable $rax(tied-def 0), renamable $rsi, 5, implicit $eflags
    //   renamable $rdx = CMOV64rr killed renamable $rdx(tied-def 0), killed renamable $rsi, 4, implicit killed $eflags
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function shri128.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    ScratchReg scratch_r8{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1, &param_2}, reg_backup_cx);


    // $r8 = MOV64rr killed $rdx
    // aliasing r8 to dx
    // source dx is killed, all aliases redirected and marked as dead


    // $ecx = MOV32rr undef $r8d, implicit $r8b
    // aliasing cx to r8


    // renamable $rdi = SHR64rCL killed renamable $rdi(tied-def 0), implicit-def dead $eflags, implicit $cl
    // SHR64rr has a preferred encoding as SHR64ri if possible
    if (param_2.encodeable_as_imm8_sext()) {
        // operand 0 is di
        // di is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_di, 0, 8);
        // operand 1 is an immediate operand
        // cx is an alias for r8
        const auto& imm = param_2.imm();

        ASMD(SHR64ri, scratch_di.cur_reg, imm.const_u64);
    } else {
        // operand 0 is di
        // di is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_di, 0, 8);
        // operand 1 is cx
        // cx is an alias for r8
        // r8 is mapped to param_2
        // cx is an implicit operand, cannot salvage
        AsmReg inst2_op1_tmp = param_2.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst2_op1_tmp);

        ASMD(SHR64rr, scratch_di.cur_reg, scratch_cx.cur_reg);
    }
    // argument di is killed and marked as dead
    // result di is marked as alive


    // renamable $rax = LEA64r renamable $rsi, 1, renamable $rsi, 0, $noreg
    // operand 1 is a memory operand
    FeMem inst3_op1;
    ScratchReg inst3_op1_scratch{derived()};
    // looking at base si
    // si maps to param_1, so could be an address
    if (param_1.is_addr()) {
        const auto& addr = param_1.legalize_address(this);
        // LLVM memory operand has index, need to materialize the addr
        AsmReg base_tmp = inst3_op1_scratch.alloc_from_bank(0);
        ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
        // gather the LLVM memory operand index si
        // si maps to operand param_1
        AsmReg index_tmp = param_1.as_reg(this);
        inst3_op1 = FE_MEM(base_tmp, 1, index_tmp, 0);
    } else {
        // si maps to operand param_1
        AsmReg base = param_1.as_reg(this);
        // LLVM memory operand has index reg si
        // si maps to operand param_1
        if (param_1.encodeable_as_imm32_sext()) {
            inst3_op1 = FE_MEM(base, 0, FE_NOREG, 1 * (i32)param_1.imm().const_u64 + 0);
        } else {
            AsmReg index_tmp = param_1.as_reg(this);
            inst3_op1 = FE_MEM(base, 1, index_tmp, 0);
        }
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(LEA64rm, scratch_ax.cur_reg, inst3_op1);
    // result ax is marked as alive


    // renamable $cl = NOT8r killed renamable $cl(tied-def 0)
    // operand 0 is cx
    // cx is an alias for r8
    // r8 is mapped to param_2
    AsmReg inst4_op0 = scratch_cx.alloc_from_bank(0);
    AsmReg inst4_op0_tmp = param_2.as_reg(this);
    ASMD(MOV32rr, inst4_op0, inst4_op0_tmp);

    ASMD(NOT8r, scratch_cx.cur_reg);
    // argument cx is killed and marked as dead
    // removing alias from cx to r8
    // result cx is marked as alive


    // renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst5_op1 = scratch_cx.cur_reg;

    ASMD(SHL64rr, scratch_ax.cur_reg, inst5_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rdi, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is di
    // operand 1(di) is a simple register
    AsmReg inst6_op1 = scratch_di.cur_reg;

    ASMD(OR64rr, scratch_ax.cur_reg, inst6_op1);
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // $ecx = MOV32rr undef $r8d, implicit $r8b
    // aliasing cx to r8


    // renamable $rsi = SHR64rCL killed renamable $rsi(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // SHR64rr has a preferred encoding as SHR64ri if possible
    if (param_2.encodeable_as_imm8_sext()) {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is an immediate operand
        // cx is an alias for r8
        const auto& imm = param_2.imm();

        ASMD(SHR64ri, scratch_si.cur_reg, imm.const_u64);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is cx
        // cx is an alias for r8
        // r8 is mapped to param_2
        // cx is an implicit operand, cannot salvage
        AsmReg inst8_op1_tmp = param_2.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst8_op1_tmp);

        ASMD(SHR64rr, scratch_si.cur_reg, scratch_cx.cur_reg);
    }
    // argument si is killed and marked as dead
    // argument cx is killed and marked as dead
    // removing alias from cx to r8
    // result si is marked as alive


    // renamable $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is dx
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is dx
    // operand is undef, just allocating scratch for it
    AsmReg inst9_op1 = scratch_dx.alloc_from_bank(0);


    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    // Ignoring implicit def RDX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(XOR32rr, scratch_dx.cur_reg, inst9_op1);
    // result dx is marked as alive
    // result dx is marked as alive


    // TEST8ri killed renamable $r8b, 64, implicit-def $eflags, implicit killed $r8
    // TEST8ri has a preferred encoding as TEST8mi if possible
    if (param_2.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // r8 is base for memory operand to use
        // r8 maps to operand param_2 which is known to be a ValuePartRef
        FeMem inst10_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_2.val_ref_frame_off());
        // operand 1 is an immediate operand
        // Handling implicit operand r8
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8mi, inst10_op0, 64);
    } else {
        // operand 0 is r8
        // r8 is mapped to param_2
        AsmReg inst10_op0 = param_2.as_reg(this);
        // operand 1 is an immediate operand
        // Handling implicit operand r8
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8ri, inst10_op0, 64);
    }
    // argument r8 is killed and marked as dead
    // argument r8 is killed and marked as dead


    // renamable $rax = CMOV64rr killed renamable $rax(tied-def 0), renamable $rsi, 5, implicit $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is si
    // operand 1(si) is a simple register
    AsmReg inst11_op1 = scratch_si.cur_reg;

    ASMD(CMOVNZ64rr, scratch_ax.cur_reg, inst11_op1);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $rdx = CMOV64rr killed renamable $rdx(tied-def 0), killed renamable $rsi, 4, implicit killed $eflags
    // operand 0 is dx
    // operand 0(dx) is the same as its tied destination
    scratch_dx.alloc_from_bank(0);
    // operand 1 is si
    // operand 1(si) is a simple register
    AsmReg inst12_op1 = scratch_si.cur_reg;

    ASMD(CMOVZ64rr, scratch_dx.cur_reg, inst12_op1);
    // argument dx is killed and marked as dead
    // argument si is killed and marked as dead
    // result dx is marked as alive


    // RET64 killed $rax, killed $rdx
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_ashri128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function ashri128: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.4):
    //   liveins: $rdi, $rdx, $rsi
    //   $r8 = MOV64rr killed $rdx
    //   $ecx = MOV32rr undef $r8d, implicit $r8b
    //   renamable $rdi = SHR64rCL killed renamable $rdi(tied-def 0), implicit-def dead $eflags, implicit $cl
    //   renamable $rax = LEA64r renamable $rsi, 1, renamable $rsi, 0, $noreg
    //   renamable $cl = NOT8r killed renamable $cl(tied-def 0)
    //   renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rdi, implicit-def dead $eflags
    //   $rdx = MOV64rr $rsi
    //   $ecx = MOV32rr undef $r8d, implicit $r8b
    //   renamable $rdx = SAR64rCL killed renamable $rdx(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 63, implicit-def dead $eflags
    //   TEST8ri killed renamable $r8b, 64, implicit-def $eflags, implicit killed $r8
    //   renamable $rax = CMOV64rr killed renamable $rax(tied-def 0), renamable $rdx, 5, implicit $eflags
    //   renamable $rdx = CMOV64rr killed renamable $rdx(tied-def 0), killed renamable $rsi, 5, implicit killed $eflags
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function ashri128.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    ScratchReg scratch_r8{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1, &param_2}, reg_backup_cx);


    // $r8 = MOV64rr killed $rdx
    // aliasing r8 to dx
    // source dx is killed, all aliases redirected and marked as dead


    // $ecx = MOV32rr undef $r8d, implicit $r8b
    // aliasing cx to r8


    // renamable $rdi = SHR64rCL killed renamable $rdi(tied-def 0), implicit-def dead $eflags, implicit $cl
    // SHR64rr has a preferred encoding as SHR64ri if possible
    if (param_2.encodeable_as_imm8_sext()) {
        // operand 0 is di
        // di is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_di, 0, 8);
        // operand 1 is an immediate operand
        // cx is an alias for r8
        const auto& imm = param_2.imm();

        ASMD(SHR64ri, scratch_di.cur_reg, imm.const_u64);
    } else {
        // operand 0 is di
        // di is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_di, 0, 8);
        // operand 1 is cx
        // cx is an alias for r8
        // r8 is mapped to param_2
        // cx is an implicit operand, cannot salvage
        AsmReg inst2_op1_tmp = param_2.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst2_op1_tmp);

        ASMD(SHR64rr, scratch_di.cur_reg, scratch_cx.cur_reg);
    }
    // argument di is killed and marked as dead
    // result di is marked as alive


    // renamable $rax = LEA64r renamable $rsi, 1, renamable $rsi, 0, $noreg
    // operand 1 is a memory operand
    FeMem inst3_op1;
    ScratchReg inst3_op1_scratch{derived()};
    // looking at base si
    // si maps to param_1, so could be an address
    if (param_1.is_addr()) {
        const auto& addr = param_1.legalize_address(this);
        // LLVM memory operand has index, need to materialize the addr
        AsmReg base_tmp = inst3_op1_scratch.alloc_from_bank(0);
        ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
        // gather the LLVM memory operand index si
        // si maps to operand param_1
        AsmReg index_tmp = param_1.as_reg(this);
        inst3_op1 = FE_MEM(base_tmp, 1, index_tmp, 0);
    } else {
        // si maps to operand param_1
        AsmReg base = param_1.as_reg(this);
        // LLVM memory operand has index reg si
        // si maps to operand param_1
        if (param_1.encodeable_as_imm32_sext()) {
            inst3_op1 = FE_MEM(base, 0, FE_NOREG, 1 * (i32)param_1.imm().const_u64 + 0);
        } else {
            AsmReg index_tmp = param_1.as_reg(this);
            inst3_op1 = FE_MEM(base, 1, index_tmp, 0);
        }
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(LEA64rm, scratch_ax.cur_reg, inst3_op1);
    // result ax is marked as alive


    // renamable $cl = NOT8r killed renamable $cl(tied-def 0)
    // operand 0 is cx
    // cx is an alias for r8
    // r8 is mapped to param_2
    AsmReg inst4_op0 = scratch_cx.alloc_from_bank(0);
    AsmReg inst4_op0_tmp = param_2.as_reg(this);
    ASMD(MOV32rr, inst4_op0, inst4_op0_tmp);

    ASMD(NOT8r, scratch_cx.cur_reg);
    // argument cx is killed and marked as dead
    // removing alias from cx to r8
    // result cx is marked as alive


    // renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst5_op1 = scratch_cx.cur_reg;

    ASMD(SHL64rr, scratch_ax.cur_reg, inst5_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rdi, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is di
    // operand 1(di) is a simple register
    AsmReg inst6_op1 = scratch_di.cur_reg;

    ASMD(OR64rr, scratch_ax.cur_reg, inst6_op1);
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // $rdx = MOV64rr $rsi
    // aliasing dx to si


    // $ecx = MOV32rr undef $r8d, implicit $r8b
    // aliasing cx to r8


    // renamable $rdx = SAR64rCL killed renamable $rdx(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // SAR64rr has a preferred encoding as SAR64ri if possible
    if (param_2.encodeable_as_imm8_sext()) {
        // operand 0 is dx
        // dx is an alias for si
        // si is mapped to param_1
        AsmReg inst9_op0 = scratch_dx.alloc_from_bank(0);
        AsmReg inst9_op0_tmp = param_1.as_reg(this);
        ASMD(MOV64rr, inst9_op0, inst9_op0_tmp);
        // operand 1 is an immediate operand
        // cx is an alias for r8
        const auto& imm = param_2.imm();

        ASMD(SAR64ri, scratch_dx.cur_reg, imm.const_u64);
    } else {
        // operand 0 is dx
        // dx is an alias for si
        // si is mapped to param_1
        AsmReg inst9_op0 = scratch_dx.alloc_from_bank(0);
        AsmReg inst9_op0_tmp = param_1.as_reg(this);
        ASMD(MOV64rr, inst9_op0, inst9_op0_tmp);
        // operand 1 is cx
        // cx is an alias for r8
        // r8 is mapped to param_2
        // cx is an implicit operand, cannot salvage
        AsmReg inst9_op1_tmp = param_2.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst9_op1_tmp);

        ASMD(SAR64rr, scratch_dx.cur_reg, scratch_cx.cur_reg);
    }
    // argument dx is killed and marked as dead
    // removing alias from dx to si
    // argument cx is killed and marked as dead
    // removing alias from cx to r8
    // result dx is marked as alive


    // renamable $rsi = SAR64ri killed renamable $rsi(tied-def 0), 63, implicit-def dead $eflags
    // operand 0 is si
    // si is mapped to param_1
    // operand 0(param_1) is tied so try to salvage or materialize
    param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
    // operand 1 is an immediate operand

    ASMD(SAR64ri, scratch_si.cur_reg, 63);
    // argument si is killed and marked as dead
    // result si is marked as alive


    // TEST8ri killed renamable $r8b, 64, implicit-def $eflags, implicit killed $r8
    // TEST8ri has a preferred encoding as TEST8mi if possible
    if (param_2.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // r8 is base for memory operand to use
        // r8 maps to operand param_2 which is known to be a ValuePartRef
        FeMem inst11_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_2.val_ref_frame_off());
        // operand 1 is an immediate operand
        // Handling implicit operand r8
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8mi, inst11_op0, 64);
    } else {
        // operand 0 is r8
        // r8 is mapped to param_2
        AsmReg inst11_op0 = param_2.as_reg(this);
        // operand 1 is an immediate operand
        // Handling implicit operand r8
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8ri, inst11_op0, 64);
    }
    // argument r8 is killed and marked as dead
    // argument r8 is killed and marked as dead


    // renamable $rax = CMOV64rr killed renamable $rax(tied-def 0), renamable $rdx, 5, implicit $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is dx
    // operand 1(dx) is a simple register
    AsmReg inst12_op1 = scratch_dx.cur_reg;

    ASMD(CMOVNZ64rr, scratch_ax.cur_reg, inst12_op1);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $rdx = CMOV64rr killed renamable $rdx(tied-def 0), killed renamable $rsi, 5, implicit killed $eflags
    // operand 0 is dx
    // operand 0(dx) is the same as its tied destination
    scratch_dx.alloc_from_bank(0);
    // operand 1 is si
    // operand 1(si) is a simple register
    AsmReg inst13_op1 = scratch_si.cur_reg;

    ASMD(CMOVNZ64rr, scratch_dx.cur_reg, inst13_op1);
    // argument dx is killed and marked as dead
    // argument si is killed and marked as dead
    // result dx is marked as alive


    // RET64 killed $rax, killed $rdx
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_shli128_lt64(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function shli128_lt64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx, $rsi
    //   $rcx = MOV64rr killed $rdx
    //   $rax = MOV64rr $rdi
    //   renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit $cl
    //   renamable $rsi = SHL64rCL killed renamable $rsi(tied-def 0), implicit-def dead $eflags, implicit $cl
    //   renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 1, implicit-def dead $eflags
    //   renamable $cl = NOT8r killed renamable $cl(tied-def 0), implicit killed $rcx, implicit-def $rcx
    //   $cl = KILL killed renamable $cl, implicit killed $rcx
    //   renamable $rdi = SHR64rCL killed renamable $rdi(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   renamable $rdi = OR64rr killed renamable $rdi(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    //   $rdx = MOV64rr killed $rdi
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function shli128_lt64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1, &param_2}, reg_backup_cx);


    // $rcx = MOV64rr killed $rdx
    // aliasing cx to dx
    // source dx is killed, all aliases redirected and marked as dead


    // $rax = MOV64rr $rdi
    // aliasing ax to di


    // renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit $cl
    // SHL64rr has a preferred encoding as SHL64ri if possible
    if (param_2.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // ax is an alias for di
        // di is mapped to param_0
        AsmReg inst2_op0 = scratch_ax.alloc_from_bank(0);
        AsmReg inst2_op0_tmp = param_0.as_reg(this);
        ASMD(MOV64rr, inst2_op0, inst2_op0_tmp);
        // operand 1 is an immediate operand
        const auto& imm = param_2.imm();

        ASMD(SHL64ri, scratch_ax.cur_reg, imm.const_u64);
    } else {
        // operand 0 is ax
        // ax is an alias for di
        // di is mapped to param_0
        AsmReg inst2_op0 = scratch_ax.alloc_from_bank(0);
        AsmReg inst2_op0_tmp = param_0.as_reg(this);
        ASMD(MOV64rr, inst2_op0, inst2_op0_tmp);
        // operand 1 is cx
        // cx is mapped to param_2
        // cx is an implicit operand, cannot salvage
        AsmReg inst2_op1_tmp = param_2.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst2_op1_tmp);

        ASMD(SHL64rr, scratch_ax.cur_reg, scratch_cx.cur_reg);
    }
    // argument ax is killed and marked as dead
    // removing alias from ax to di
    // result ax is marked as alive


    // renamable $rsi = SHL64rCL killed renamable $rsi(tied-def 0), implicit-def dead $eflags, implicit $cl
    // SHL64rr has a preferred encoding as SHL64ri if possible
    if (param_2.encodeable_as_imm8_sext()) {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_2.imm();

        ASMD(SHL64ri, scratch_si.cur_reg, imm.const_u64);
    } else {
        // operand 0 is si
        // si is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_si, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_2
        // cx is an implicit operand, cannot salvage
        AsmReg inst3_op1_tmp = param_2.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst3_op1_tmp);

        ASMD(SHL64rr, scratch_si.cur_reg, scratch_cx.cur_reg);
    }
    // argument si is killed and marked as dead
    // result si is marked as alive


    // renamable $rdi = SHR64ri killed renamable $rdi(tied-def 0), 1, implicit-def dead $eflags
    // operand 0 is di
    // di is mapped to param_0
    // operand 0(param_0) is tied so try to salvage or materialize
    param_0.try_salvage_or_materialize(this, scratch_di, 0, 8);
    // operand 1 is an immediate operand

    ASMD(SHR64ri, scratch_di.cur_reg, 1);
    // argument di is killed and marked as dead
    // result di is marked as alive


    // renamable $cl = NOT8r killed renamable $cl(tied-def 0), implicit killed $rcx, implicit-def $rcx
    // operand 0 is cx
    // cx is mapped to param_2
    // operand 0(param_2) is tied so try to salvage or materialize
    param_2.try_salvage_or_materialize(this, scratch_cx, 0, 1);
    // Handling implicit operand cx
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    // Ignoring implicit def RCX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(NOT8r, scratch_cx.cur_reg);
    // argument cx is killed and marked as dead
    // argument cx is killed and marked as dead
    // result cx is marked as alive
    // result cx is marked as alive


    // $cl = KILL killed renamable $cl, implicit killed $rcx
    // KILL is a no-op


    // renamable $rdi = SHR64rCL killed renamable $rdi(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // operand 0 is di
    // operand 0(di) is the same as its tied destination
    scratch_di.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst7_op1 = scratch_cx.cur_reg;

    ASMD(SHR64rr, scratch_di.cur_reg, inst7_op1);
    // argument di is killed and marked as dead
    // argument cx is killed and marked as dead
    // result di is marked as alive


    // renamable $rdi = OR64rr killed renamable $rdi(tied-def 0), killed renamable $rsi, implicit-def dead $eflags
    // operand 0 is di
    // operand 0(di) is the same as its tied destination
    scratch_di.alloc_from_bank(0);
    // operand 1 is si
    // operand 1(si) is a simple register
    AsmReg inst8_op1 = scratch_si.cur_reg;

    ASMD(OR64rr, scratch_di.cur_reg, inst8_op1);
    // argument di is killed and marked as dead
    // argument si is killed and marked as dead
    // result di is marked as alive


    // $rdx = MOV64rr killed $rdi
    // aliasing dx to di
    // source di is killed, all aliases redirected and marked as dead


    // RET64 killed $rax, killed $rdx
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    // dx is an alias for di
    result_1 = std::move(scratch_di);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_shli128_ge64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function shli128_ge64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx
    //   $rcx = MOV64rr killed $rdx
    //   $rax = MOV64rr killed $rdi
    //   $cl = KILL killed renamable $cl, implicit killed $rcx
    //   renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function shli128_ge64.
    // 

    // Mapping di to param_0
    // Mapping dx to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    if (((!param_1.encodeable_as_imm8_sext()))) {
        scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1}, reg_backup_cx);
    }


    // $rcx = MOV64rr killed $rdx
    // aliasing cx to dx
    // source dx is killed, all aliases redirected and marked as dead


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // $cl = KILL killed renamable $cl, implicit killed $rcx
    // KILL is a no-op


    // renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // SHL64rr has a preferred encoding as SHL64ri if possible
    if (param_1.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SHL64ri, scratch_ax.cur_reg, imm.const_u64);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_1
        // cx is an implicit operand, cannot salvage
        AsmReg inst3_op1_tmp = param_1.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst3_op1_tmp);

        ASMD(SHL64rr, scratch_ax.cur_reg, scratch_cx.cur_reg);
    }
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is dx
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is dx
    // operand is undef, just allocating scratch for it
    AsmReg inst4_op1 = scratch_dx.alloc_from_bank(0);


    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    // Ignoring implicit def RDX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(XOR32rr, scratch_dx.cur_reg, inst4_op1);
    // result dx is marked as alive
    // result dx is marked as alive


    // RET64 killed $rax, killed $rdx
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_shri128_lt64(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function shri128_lt64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx, $rsi
    //   $rcx = MOV64rr killed $rdx
    //   renamable $rax = LEA64r renamable $rsi, 1, renamable $rsi, 0, $noreg
    //   $rdx = MOV64rr killed $rsi
    //   renamable $rdx = SHR64rCL killed renamable $rdx(tied-def 0), implicit-def dead $eflags, implicit $cl
    //   renamable $rdi = SHR64rCL killed renamable $rdi(tied-def 0), implicit-def dead $eflags, implicit $cl
    //   renamable $cl = NOT8r killed renamable $cl(tied-def 0), implicit killed $rcx, implicit-def $rcx
    //   $cl = KILL killed renamable $cl, implicit killed $rcx
    //   renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rdi, implicit-def dead $eflags
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function shri128_lt64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1, &param_2}, reg_backup_cx);


    // $rcx = MOV64rr killed $rdx
    // aliasing cx to dx
    // source dx is killed, all aliases redirected and marked as dead


    // renamable $rax = LEA64r renamable $rsi, 1, renamable $rsi, 0, $noreg
    // operand 1 is a memory operand
    FeMem inst1_op1;
    ScratchReg inst1_op1_scratch{derived()};
    // looking at base si
    // si maps to param_1, so could be an address
    if (param_1.is_addr()) {
        const auto& addr = param_1.legalize_address(this);
        // LLVM memory operand has index, need to materialize the addr
        AsmReg base_tmp = inst1_op1_scratch.alloc_from_bank(0);
        ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
        // gather the LLVM memory operand index si
        // si maps to operand param_1
        AsmReg index_tmp = param_1.as_reg(this);
        inst1_op1 = FE_MEM(base_tmp, 1, index_tmp, 0);
    } else {
        // si maps to operand param_1
        AsmReg base = param_1.as_reg(this);
        // LLVM memory operand has index reg si
        // si maps to operand param_1
        if (param_1.encodeable_as_imm32_sext()) {
            inst1_op1 = FE_MEM(base, 0, FE_NOREG, 1 * (i32)param_1.imm().const_u64 + 0);
        } else {
            AsmReg index_tmp = param_1.as_reg(this);
            inst1_op1 = FE_MEM(base, 1, index_tmp, 0);
        }
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(LEA64rm, scratch_ax.cur_reg, inst1_op1);
    // result ax is marked as alive


    // $rdx = MOV64rr killed $rsi
    // aliasing dx to si
    // source si is killed, all aliases redirected and marked as dead


    // renamable $rdx = SHR64rCL killed renamable $rdx(tied-def 0), implicit-def dead $eflags, implicit $cl
    // SHR64rr has a preferred encoding as SHR64ri if possible
    if (param_2.encodeable_as_imm8_sext()) {
        // operand 0 is dx
        // dx is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_dx, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_2.imm();

        ASMD(SHR64ri, scratch_dx.cur_reg, imm.const_u64);
    } else {
        // operand 0 is dx
        // dx is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_dx, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_2
        // cx is an implicit operand, cannot salvage
        AsmReg inst3_op1_tmp = param_2.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst3_op1_tmp);

        ASMD(SHR64rr, scratch_dx.cur_reg, scratch_cx.cur_reg);
    }
    // argument dx is killed and marked as dead
    // result dx is marked as alive


    // renamable $rdi = SHR64rCL killed renamable $rdi(tied-def 0), implicit-def dead $eflags, implicit $cl
    // SHR64rr has a preferred encoding as SHR64ri if possible
    if (param_2.encodeable_as_imm8_sext()) {
        // operand 0 is di
        // di is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_di, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_2.imm();

        ASMD(SHR64ri, scratch_di.cur_reg, imm.const_u64);
    } else {
        // operand 0 is di
        // di is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_di, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_2
        // cx is an implicit operand, cannot salvage
        AsmReg inst4_op1_tmp = param_2.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst4_op1_tmp);

        ASMD(SHR64rr, scratch_di.cur_reg, scratch_cx.cur_reg);
    }
    // argument di is killed and marked as dead
    // result di is marked as alive


    // renamable $cl = NOT8r killed renamable $cl(tied-def 0), implicit killed $rcx, implicit-def $rcx
    // operand 0 is cx
    // cx is mapped to param_2
    // operand 0(param_2) is tied so try to salvage or materialize
    param_2.try_salvage_or_materialize(this, scratch_cx, 0, 1);
    // Handling implicit operand cx
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    // Ignoring implicit def RCX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(NOT8r, scratch_cx.cur_reg);
    // argument cx is killed and marked as dead
    // argument cx is killed and marked as dead
    // result cx is marked as alive
    // result cx is marked as alive


    // $cl = KILL killed renamable $cl, implicit killed $rcx
    // KILL is a no-op


    // renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst7_op1 = scratch_cx.cur_reg;

    ASMD(SHL64rr, scratch_ax.cur_reg, inst7_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rdi, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is di
    // operand 1(di) is a simple register
    AsmReg inst8_op1 = scratch_di.cur_reg;

    ASMD(OR64rr, scratch_ax.cur_reg, inst8_op1);
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax, killed $rdx
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_shri128_ge64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function shri128_ge64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdx, $rsi
    //   $rcx = MOV64rr killed $rdx
    //   $rax = MOV64rr killed $rsi
    //   $cl = KILL killed renamable $cl, implicit killed $rcx
    //   renamable $rax = SHR64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function shri128_ge64.
    // 

    // Mapping si to param_0
    // Mapping dx to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    if (((!param_1.encodeable_as_imm8_sext()))) {
        scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1}, reg_backup_cx);
    }


    // $rcx = MOV64rr killed $rdx
    // aliasing cx to dx
    // source dx is killed, all aliases redirected and marked as dead


    // $rax = MOV64rr killed $rsi
    // aliasing ax to si
    // source si is killed, all aliases redirected and marked as dead


    // $cl = KILL killed renamable $cl, implicit killed $rcx
    // KILL is a no-op


    // renamable $rax = SHR64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // SHR64rr has a preferred encoding as SHR64ri if possible
    if (param_1.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SHR64ri, scratch_ax.cur_reg, imm.const_u64);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_1
        // cx is an implicit operand, cannot salvage
        AsmReg inst3_op1_tmp = param_1.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst3_op1_tmp);

        ASMD(SHR64rr, scratch_ax.cur_reg, scratch_cx.cur_reg);
    }
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // $edx = XOR32rr undef $edx(tied-def 0), undef $edx, implicit-def dead $eflags, implicit-def $rdx
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is dx
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is dx
    // operand is undef, just allocating scratch for it
    AsmReg inst4_op1 = scratch_dx.alloc_from_bank(0);


    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    // Ignoring implicit def RDX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(XOR32rr, scratch_dx.cur_reg, inst4_op1);
    // result dx is marked as alive
    // result dx is marked as alive


    // RET64 killed $rax, killed $rdx
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_ashri128_lt64(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function ashri128_lt64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx, $rsi
    //   $rcx = MOV64rr killed $rdx
    //   renamable $rax = LEA64r renamable $rsi, 1, renamable $rsi, 0, $noreg
    //   $rdx = MOV64rr killed $rsi
    //   renamable $rdx = SAR64rCL killed renamable $rdx(tied-def 0), implicit-def dead $eflags, implicit $cl
    //   renamable $rdi = SHR64rCL killed renamable $rdi(tied-def 0), implicit-def dead $eflags, implicit $cl
    //   renamable $cl = NOT8r killed renamable $cl(tied-def 0), implicit killed $rcx, implicit-def $rcx
    //   $cl = KILL killed renamable $cl, implicit killed $rcx
    //   renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rdi, implicit-def dead $eflags
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function ashri128_lt64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1, &param_2}, reg_backup_cx);


    // $rcx = MOV64rr killed $rdx
    // aliasing cx to dx
    // source dx is killed, all aliases redirected and marked as dead


    // renamable $rax = LEA64r renamable $rsi, 1, renamable $rsi, 0, $noreg
    // operand 1 is a memory operand
    FeMem inst1_op1;
    ScratchReg inst1_op1_scratch{derived()};
    // looking at base si
    // si maps to param_1, so could be an address
    if (param_1.is_addr()) {
        const auto& addr = param_1.legalize_address(this);
        // LLVM memory operand has index, need to materialize the addr
        AsmReg base_tmp = inst1_op1_scratch.alloc_from_bank(0);
        ASMD(LEA64rm, base_tmp, FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp));
        // gather the LLVM memory operand index si
        // si maps to operand param_1
        AsmReg index_tmp = param_1.as_reg(this);
        inst1_op1 = FE_MEM(base_tmp, 1, index_tmp, 0);
    } else {
        // si maps to operand param_1
        AsmReg base = param_1.as_reg(this);
        // LLVM memory operand has index reg si
        // si maps to operand param_1
        if (param_1.encodeable_as_imm32_sext()) {
            inst1_op1 = FE_MEM(base, 0, FE_NOREG, 1 * (i32)param_1.imm().const_u64 + 0);
        } else {
            AsmReg index_tmp = param_1.as_reg(this);
            inst1_op1 = FE_MEM(base, 1, index_tmp, 0);
        }
    }

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(LEA64rm, scratch_ax.cur_reg, inst1_op1);
    // result ax is marked as alive


    // $rdx = MOV64rr killed $rsi
    // aliasing dx to si
    // source si is killed, all aliases redirected and marked as dead


    // renamable $rdx = SAR64rCL killed renamable $rdx(tied-def 0), implicit-def dead $eflags, implicit $cl
    // SAR64rr has a preferred encoding as SAR64ri if possible
    if (param_2.encodeable_as_imm8_sext()) {
        // operand 0 is dx
        // dx is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_dx, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_2.imm();

        ASMD(SAR64ri, scratch_dx.cur_reg, imm.const_u64);
    } else {
        // operand 0 is dx
        // dx is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_dx, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_2
        // cx is an implicit operand, cannot salvage
        AsmReg inst3_op1_tmp = param_2.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst3_op1_tmp);

        ASMD(SAR64rr, scratch_dx.cur_reg, scratch_cx.cur_reg);
    }
    // argument dx is killed and marked as dead
    // result dx is marked as alive


    // renamable $rdi = SHR64rCL killed renamable $rdi(tied-def 0), implicit-def dead $eflags, implicit $cl
    // SHR64rr has a preferred encoding as SHR64ri if possible
    if (param_2.encodeable_as_imm8_sext()) {
        // operand 0 is di
        // di is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_di, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_2.imm();

        ASMD(SHR64ri, scratch_di.cur_reg, imm.const_u64);
    } else {
        // operand 0 is di
        // di is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_di, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_2
        // cx is an implicit operand, cannot salvage
        AsmReg inst4_op1_tmp = param_2.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst4_op1_tmp);

        ASMD(SHR64rr, scratch_di.cur_reg, scratch_cx.cur_reg);
    }
    // argument di is killed and marked as dead
    // result di is marked as alive


    // renamable $cl = NOT8r killed renamable $cl(tied-def 0), implicit killed $rcx, implicit-def $rcx
    // operand 0 is cx
    // cx is mapped to param_2
    // operand 0(param_2) is tied so try to salvage or materialize
    param_2.try_salvage_or_materialize(this, scratch_cx, 0, 1);
    // Handling implicit operand cx
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    // Ignoring implicit def RCX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(NOT8r, scratch_cx.cur_reg);
    // argument cx is killed and marked as dead
    // argument cx is killed and marked as dead
    // result cx is marked as alive
    // result cx is marked as alive


    // $cl = KILL killed renamable $cl, implicit killed $rcx
    // KILL is a no-op


    // renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst7_op1 = scratch_cx.cur_reg;

    ASMD(SHL64rr, scratch_ax.cur_reg, inst7_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rdi, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is di
    // operand 1(di) is a simple register
    AsmReg inst8_op1 = scratch_di.cur_reg;

    ASMD(OR64rr, scratch_ax.cur_reg, inst8_op1);
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax, killed $rdx
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_ashri128_ge64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function ashri128_ge64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdx, $rsi
    //   $rcx = MOV64rr killed $rdx
    //   $rax = MOV64rr $rsi
    //   $rdx = MOV64rr killed $rsi
    //   renamable $rdx = SAR64ri killed renamable $rdx(tied-def 0), 63, implicit-def dead $eflags
    //   $cl = KILL killed renamable $cl, implicit killed $rcx
    //   renamable $rax = SAR64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function ashri128_ge64.
    // 

    // Mapping si to param_0
    // Mapping dx to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    if (((!param_1.encodeable_as_imm8_sext()))) {
        scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1}, reg_backup_cx);
    }


    // $rcx = MOV64rr killed $rdx
    // aliasing cx to dx
    // source dx is killed, all aliases redirected and marked as dead


    // $rax = MOV64rr $rsi
    // aliasing ax to si


    // $rdx = MOV64rr killed $rsi
    // aliasing dx to si
    // source si is killed, all aliases redirected and marked as dead


    // renamable $rdx = SAR64ri killed renamable $rdx(tied-def 0), 63, implicit-def dead $eflags
    // operand 0 is dx
    // dx is mapped to param_0
    AsmReg inst3_op0 = scratch_dx.alloc_from_bank(0);
    AsmReg inst3_op0_tmp = param_0.as_reg(this);
    ASMD(MOV64rr, inst3_op0, inst3_op0_tmp);
    // operand 1 is an immediate operand

    ASMD(SAR64ri, scratch_dx.cur_reg, 63);
    // argument dx is killed and marked as dead
    // result dx is marked as alive


    // $cl = KILL killed renamable $cl, implicit killed $rcx
    // KILL is a no-op


    // renamable $rax = SAR64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // SAR64rr has a preferred encoding as SAR64ri if possible
    if (param_1.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SAR64ri, scratch_ax.cur_reg, imm.const_u64);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_1
        // cx is an implicit operand, cannot salvage
        AsmReg inst5_op1_tmp = param_1.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst5_op1_tmp);

        ASMD(SAR64rr, scratch_ax.cur_reg, scratch_cx.cur_reg);
    }
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax, killed $rdx
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cttzi32_zero_poison(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function cttzi32_zero_poison: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = BSF32rr killed renamable $edi, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function cttzi32_zero_poison.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $eax = BSF32rr killed renamable $edi, implicit-def dead $eflags
    // BSF32rr has a preferred encoding as BSF32rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(BSF32rm, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(BSF32rr, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cttzi64_zero_poison(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function cttzi64_zero_poison: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $rax = BSF64rr killed renamable $rdi, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function cttzi64_zero_poison.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $rax = BSF64rr killed renamable $rdi, implicit-def dead $eflags
    // BSF64rr has a preferred encoding as BSF64rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(BSF64rm, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(BSF64rr, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cttzi8(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function cttzi8: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $edi = OR32ri killed renamable $edi(tied-def 0), 256, implicit-def dead $eflags
    //   renamable $eax = BSF32rr killed renamable $edi, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function cttzi8.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $edi = OR32ri killed renamable $edi(tied-def 0), 256, implicit-def dead $eflags
    // operand 0 is di
    // di is mapped to param_0
    // operand 0(param_0) is tied so try to salvage or materialize
    param_0.try_salvage_or_materialize(this, scratch_di, 0, 4);
    // operand 1 is an immediate operand

    ASMD(OR32ri, scratch_di.cur_reg, 256);
    // argument di is killed and marked as dead
    // result di is marked as alive


    // renamable $eax = BSF32rr killed renamable $edi, implicit-def dead $eflags
    // operand 1 is di
    // operand 1(di) is a simple register
    AsmReg inst1_op1 = scratch_di.cur_reg;

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(BSF32rr, scratch_ax.cur_reg, inst1_op1);
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cttzi16(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function cttzi16: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $edi = OR32ri killed renamable $edi(tied-def 0), 65536, implicit-def dead $eflags
    //   renamable $eax = BSF32rr killed renamable $edi, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function cttzi16.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $edi = OR32ri killed renamable $edi(tied-def 0), 65536, implicit-def dead $eflags
    // operand 0 is di
    // di is mapped to param_0
    // operand 0(param_0) is tied so try to salvage or materialize
    param_0.try_salvage_or_materialize(this, scratch_di, 0, 4);
    // operand 1 is an immediate operand

    ASMD(OR32ri, scratch_di.cur_reg, 65536);
    // argument di is killed and marked as dead
    // result di is marked as alive


    // renamable $eax = BSF32rr killed renamable $edi, implicit-def dead $eflags
    // operand 1 is di
    // operand 1(di) is a simple register
    AsmReg inst1_op1 = scratch_di.cur_reg;

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(BSF32rr, scratch_ax.cur_reg, inst1_op1);
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cttzi32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function cttzi32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   successors: %bb.2(0x30000000), %bb.1(0x50000000); %bb.2(37.50%), %bb.1(62.50%)
    //   liveins: $edi
    //   TEST32rr renamable $edi, renamable $edi, implicit-def $eflags
    //   JCC_1 %bb.2, 4, implicit killed $eflags
    // 
    // bb.1.cond.false:
    // ; predecessors: %bb.0
    //   liveins: $edi
    //   renamable $eax = BSF32rr killed renamable $edi, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // bb.2.cond.end:
    // ; predecessors: %bb.0
    // 
    //   $eax = MOV32ri 32
    //   RET64 killed $eax
    // 
    // # End machine code for function cttzi32.
    // 

    // Mapping di to param_0

    // Creating label for convergence point at the end of the function
    Label ret_converge_label = derived()->assembler.label_create();
    // Creating labels for blocks that are jump targets
    Label block1_label = derived()->assembler.label_create();
    Label block2_label = derived()->assembler.label_create();

    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // TEST32rr renamable $edi, renamable $edi, implicit-def $eflags
    // Skipping check for TEST32mr since associated register is used as an operand twice
    // Skipping check for TEST32ri since associated register is used as an operand twice
    // operand 0 is di
    // di is mapped to param_0
    AsmReg inst0_op0 = param_0.as_reg(this);
    // operand 1 is di
    // di is mapped to param_0
    AsmReg inst0_op1 = param_0.as_reg(this);

    ASMD(TEST32rr, inst0_op0, inst0_op1);


    // JCC_1 %bb.2, 4, implicit killed $eflags
    // Preparing jump to other block
    // di is live-out
    // ax is used in the function later on
    // Handling register ax
    // ax is not live-out and needs to be allocated
    scratch_ax.alloc_from_bank(0);
    // Handling register di
    // di is mapped to operand param_0, materializing it
    param_0.try_salvage_or_materialize(this, scratch_di, 0, 4);
    derived()->generate_raw_jump(CompilerX64::Jump::je, block2_label);


    // Starting encoding of block 1
    derived()->assembler.label_place(block1_label);
    // Marking di as live


    // renamable $eax = BSF32rr killed renamable $edi, implicit-def dead $eflags
    // operand 1 is di
    // operand 1(di) is a simple register
    AsmReg inst2_op1 = scratch_di.cur_reg;

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(BSF32rr, scratch_ax.cur_reg, inst2_op1);
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // handling return for ax
    // value already in register, nothing to do
    // Jumping to convergence point at the end of the encoding function
    derived()->generate_raw_jump(CompilerX64::Jump::jmp, ret_converge_label);

    // Starting encoding of block 2
    derived()->assembler.label_place(block2_label);


    // $eax = MOV32ri 32
    // operand 1 is an immediate operand

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOV32ri, scratch_ax.cur_reg, 32);
    // result ax is marked as alive


    // RET64 killed $eax
    // handling return for ax
    // value already in register, nothing to do
    // Omitting jump to convergence as this is the last block

    // Placing the convergence point for registers here
    derived()->assembler.label_place(ret_converge_label);
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cttzi64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function cttzi64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   successors: %bb.2(0x30000000), %bb.1(0x50000000); %bb.2(37.50%), %bb.1(62.50%)
    //   liveins: $rdi
    //   TEST64rr renamable $rdi, renamable $rdi, implicit-def $eflags
    //   JCC_1 %bb.2, 4, implicit killed $eflags
    // 
    // bb.1.cond.false:
    // ; predecessors: %bb.0
    //   liveins: $rdi
    //   renamable $rax = BSF64rr killed renamable $rdi, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // bb.2.cond.end:
    // ; predecessors: %bb.0
    // 
    //   $eax = MOV32ri 64, implicit-def $rax
    //   RET64 killed $rax
    // 
    // # End machine code for function cttzi64.
    // 

    // Mapping di to param_0

    // Creating label for convergence point at the end of the function
    Label ret_converge_label = derived()->assembler.label_create();
    // Creating labels for blocks that are jump targets
    Label block1_label = derived()->assembler.label_create();
    Label block2_label = derived()->assembler.label_create();

    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // TEST64rr renamable $rdi, renamable $rdi, implicit-def $eflags
    // Skipping check for TEST64mr since associated register is used as an operand twice
    // Skipping check for TEST64ri since associated register is used as an operand twice
    // operand 0 is di
    // di is mapped to param_0
    AsmReg inst0_op0 = param_0.as_reg(this);
    // operand 1 is di
    // di is mapped to param_0
    AsmReg inst0_op1 = param_0.as_reg(this);

    ASMD(TEST64rr, inst0_op0, inst0_op1);


    // JCC_1 %bb.2, 4, implicit killed $eflags
    // Preparing jump to other block
    // di is live-out
    // ax is used in the function later on
    // Handling register ax
    // ax is not live-out and needs to be allocated
    scratch_ax.alloc_from_bank(0);
    // Handling register di
    // di is mapped to operand param_0, materializing it
    param_0.try_salvage_or_materialize(this, scratch_di, 0, 8);
    derived()->generate_raw_jump(CompilerX64::Jump::je, block2_label);


    // Starting encoding of block 1
    derived()->assembler.label_place(block1_label);
    // Marking di as live


    // renamable $rax = BSF64rr killed renamable $rdi, implicit-def dead $eflags
    // operand 1 is di
    // operand 1(di) is a simple register
    AsmReg inst2_op1 = scratch_di.cur_reg;

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(BSF64rr, scratch_ax.cur_reg, inst2_op1);
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // handling return for ax
    // value already in register, nothing to do
    // Jumping to convergence point at the end of the encoding function
    derived()->generate_raw_jump(CompilerX64::Jump::jmp, ret_converge_label);

    // Starting encoding of block 2
    derived()->assembler.label_place(block2_label);


    // $eax = MOV32ri 64, implicit-def $rax
    // operand 1 is an immediate operand

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(MOV32ri, scratch_ax.cur_reg, 64);
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $rax
    // handling return for ax
    // value already in register, nothing to do
    // Omitting jump to convergence as this is the last block

    // Placing the convergence point for registers here
    derived()->assembler.label_place(ret_converge_label);
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_ctlzi8_zero_poison(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function ctlzi8_zero_poison: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVZX32rr8 killed renamable $dil, implicit killed $edi
    //   renamable $eax = BSR32rr killed renamable $eax, implicit-def dead $eflags
    //   renamable $eax = XOR32ri killed renamable $eax(tied-def 0), 31, implicit-def dead $eflags
    //   renamable $eax = nsw ADD32ri killed renamable $eax(tied-def 0), -24, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function ctlzi8_zero_poison.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $eax = MOVZX32rr8 killed renamable $dil, implicit killed $edi
    // MOVZXr32r8 has a preferred encoding as MOVZXr32m8 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32m8, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32r8, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = BSR32rr killed renamable $eax, implicit-def dead $eflags
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(BSR32rr, scratch_ax.cur_reg, inst1_op1);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = XOR32ri killed renamable $eax(tied-def 0), 31, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(XOR32ri, scratch_ax.cur_reg, 31);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = nsw ADD32ri killed renamable $eax(tied-def 0), -24, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(ADD32ri, scratch_ax.cur_reg, -24);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_ctlzi16_zero_poison(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function ctlzi16_zero_poison: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVZX32rr16 killed renamable $di, implicit killed $edi
    //   renamable $eax = BSR32rr killed renamable $eax, implicit-def dead $eflags
    //   renamable $eax = XOR32ri killed renamable $eax(tied-def 0), 31, implicit-def dead $eflags
    //   renamable $eax = nsw ADD32ri killed renamable $eax(tied-def 0), -16, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function ctlzi16_zero_poison.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $eax = MOVZX32rr16 killed renamable $di, implicit killed $edi
    // MOVZXr32r16 has a preferred encoding as MOVZXr32m16 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32m16, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32r16, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = BSR32rr killed renamable $eax, implicit-def dead $eflags
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(BSR32rr, scratch_ax.cur_reg, inst1_op1);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = XOR32ri killed renamable $eax(tied-def 0), 31, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(XOR32ri, scratch_ax.cur_reg, 31);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = nsw ADD32ri killed renamable $eax(tied-def 0), -16, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(ADD32ri, scratch_ax.cur_reg, -16);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_ctlzi32_zero_poison(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function ctlzi32_zero_poison: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = BSR32rr killed renamable $edi, implicit-def dead $eflags
    //   renamable $eax = XOR32ri killed renamable $eax(tied-def 0), 31, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function ctlzi32_zero_poison.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $eax = BSR32rr killed renamable $edi, implicit-def dead $eflags
    // BSR32rr has a preferred encoding as BSR32rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(BSR32rm, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(BSR32rr, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = XOR32ri killed renamable $eax(tied-def 0), 31, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(XOR32ri, scratch_ax.cur_reg, 31);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_ctlzi64_zero_poison(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function ctlzi64_zero_poison: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $rax = BSR64rr killed renamable $rdi, implicit-def dead $eflags
    //   renamable $rax = XOR64ri32 killed renamable $rax(tied-def 0), 63, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function ctlzi64_zero_poison.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $rax = BSR64rr killed renamable $rdi, implicit-def dead $eflags
    // BSR64rr has a preferred encoding as BSR64rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(BSR64rm, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(BSR64rr, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $rax = XOR64ri32 killed renamable $rax(tied-def 0), 63, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(XOR64ri, scratch_ax.cur_reg, 63);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_ctlzi8(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function ctlzi8: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVZX32rr8 killed renamable $dil, implicit killed $edi
    //   renamable $ecx = BSR32rr renamable $eax, implicit-def dead $eflags
    //   renamable $ecx = XOR32ri killed renamable $ecx(tied-def 0), 31, implicit-def dead $eflags
    //   renamable $ecx = nsw ADD32ri killed renamable $ecx(tied-def 0), -24, implicit-def dead $eflags
    //   TEST8rr killed renamable $al, killed renamable $al, implicit-def $eflags, implicit killed $eax
    //   renamable $eax = MOV32ri 8
    //   renamable $eax = CMOV32rr killed renamable $eax(tied-def 0), killed renamable $ecx, 5, implicit killed $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function ctlzi8.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $eax = MOVZX32rr8 killed renamable $dil, implicit killed $edi
    // MOVZXr32r8 has a preferred encoding as MOVZXr32m8 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32m8, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32r8, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $ecx = BSR32rr renamable $eax, implicit-def dead $eflags
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(BSR32rr, scratch_cx.cur_reg, inst1_op1);
    // result cx is marked as alive


    // renamable $ecx = XOR32ri killed renamable $ecx(tied-def 0), 31, implicit-def dead $eflags
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(XOR32ri, scratch_cx.cur_reg, 31);
    // argument cx is killed and marked as dead
    // result cx is marked as alive


    // renamable $ecx = nsw ADD32ri killed renamable $ecx(tied-def 0), -24, implicit-def dead $eflags
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(ADD32ri, scratch_cx.cur_reg, -24);
    // argument cx is killed and marked as dead
    // result cx is marked as alive


    // TEST8rr killed renamable $al, killed renamable $al, implicit-def $eflags, implicit killed $eax
    // Skipping check for TEST8mr since associated register is used as an operand twice
    // Skipping check for TEST8ri since associated register is used as an operand twice
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst4_op0 = scratch_ax.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst4_op1 = scratch_ax.cur_reg;
    // Handling implicit operand ax
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    ASMD(TEST8rr, inst4_op0, inst4_op1);
    // argument ax is killed and marked as dead
    // argument ax is killed and marked as dead
    // argument ax is killed and marked as dead


    // renamable $eax = MOV32ri 8
    // operand 1 is an immediate operand

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOV32ri, scratch_ax.cur_reg, 8);
    // result ax is marked as alive


    // renamable $eax = CMOV32rr killed renamable $eax(tied-def 0), killed renamable $ecx, 5, implicit killed $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst6_op1 = scratch_cx.cur_reg;

    ASMD(CMOVNZ32rr, scratch_ax.cur_reg, inst6_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_ctlzi16(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function ctlzi16: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVZX32rr16 killed renamable $di, implicit killed $edi
    //   renamable $ecx = BSR32rr renamable $eax, implicit-def dead $eflags
    //   renamable $ecx = XOR32ri killed renamable $ecx(tied-def 0), 31, implicit-def dead $eflags
    //   renamable $ecx = nsw ADD32ri killed renamable $ecx(tied-def 0), -16, implicit-def dead $eflags
    //   TEST16rr killed renamable $ax, killed renamable $ax, implicit-def $eflags, implicit killed $eax
    //   renamable $eax = MOV32ri 16
    //   renamable $eax = CMOV32rr killed renamable $eax(tied-def 0), killed renamable $ecx, 5, implicit killed $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function ctlzi16.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $eax = MOVZX32rr16 killed renamable $di, implicit killed $edi
    // MOVZXr32r16 has a preferred encoding as MOVZXr32m16 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32m16, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32r16, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $ecx = BSR32rr renamable $eax, implicit-def dead $eflags
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(BSR32rr, scratch_cx.cur_reg, inst1_op1);
    // result cx is marked as alive


    // renamable $ecx = XOR32ri killed renamable $ecx(tied-def 0), 31, implicit-def dead $eflags
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(XOR32ri, scratch_cx.cur_reg, 31);
    // argument cx is killed and marked as dead
    // result cx is marked as alive


    // renamable $ecx = nsw ADD32ri killed renamable $ecx(tied-def 0), -16, implicit-def dead $eflags
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(ADD32ri, scratch_cx.cur_reg, -16);
    // argument cx is killed and marked as dead
    // result cx is marked as alive


    // TEST16rr killed renamable $ax, killed renamable $ax, implicit-def $eflags, implicit killed $eax
    // Skipping check for TEST16mr since associated register is used as an operand twice
    // Skipping check for TEST16ri since associated register is used as an operand twice
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst4_op0 = scratch_ax.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst4_op1 = scratch_ax.cur_reg;
    // Handling implicit operand ax
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    ASMD(TEST16rr, inst4_op0, inst4_op1);
    // argument ax is killed and marked as dead
    // argument ax is killed and marked as dead
    // argument ax is killed and marked as dead


    // renamable $eax = MOV32ri 16
    // operand 1 is an immediate operand

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOV32ri, scratch_ax.cur_reg, 16);
    // result ax is marked as alive


    // renamable $eax = CMOV32rr killed renamable $eax(tied-def 0), killed renamable $ecx, 5, implicit killed $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst6_op1 = scratch_cx.cur_reg;

    ASMD(CMOVNZ32rr, scratch_ax.cur_reg, inst6_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_ctlzi32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function ctlzi32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   successors: %bb.2(0x30000000), %bb.1(0x50000000); %bb.2(37.50%), %bb.1(62.50%)
    //   liveins: $edi
    //   TEST32rr renamable $edi, renamable $edi, implicit-def $eflags
    //   JCC_1 %bb.2, 4, implicit killed $eflags
    // 
    // bb.1.cond.false:
    // ; predecessors: %bb.0
    //   liveins: $edi
    //   renamable $eax = BSR32rr killed renamable $edi, implicit-def dead $eflags
    //   renamable $eax = XOR32ri killed renamable $eax(tied-def 0), 31, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // bb.2.cond.end:
    // ; predecessors: %bb.0
    // 
    //   $eax = MOV32ri 32
    //   RET64 killed $eax
    // 
    // # End machine code for function ctlzi32.
    // 

    // Mapping di to param_0

    // Creating label for convergence point at the end of the function
    Label ret_converge_label = derived()->assembler.label_create();
    // Creating labels for blocks that are jump targets
    Label block1_label = derived()->assembler.label_create();
    Label block2_label = derived()->assembler.label_create();

    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // TEST32rr renamable $edi, renamable $edi, implicit-def $eflags
    // Skipping check for TEST32mr since associated register is used as an operand twice
    // Skipping check for TEST32ri since associated register is used as an operand twice
    // operand 0 is di
    // di is mapped to param_0
    AsmReg inst0_op0 = param_0.as_reg(this);
    // operand 1 is di
    // di is mapped to param_0
    AsmReg inst0_op1 = param_0.as_reg(this);

    ASMD(TEST32rr, inst0_op0, inst0_op1);


    // JCC_1 %bb.2, 4, implicit killed $eflags
    // Preparing jump to other block
    // di is live-out
    // ax is used in the function later on
    // Handling register ax
    // ax is not live-out and needs to be allocated
    scratch_ax.alloc_from_bank(0);
    // Handling register di
    // di is mapped to operand param_0, materializing it
    param_0.try_salvage_or_materialize(this, scratch_di, 0, 4);
    derived()->generate_raw_jump(CompilerX64::Jump::je, block2_label);


    // Starting encoding of block 1
    derived()->assembler.label_place(block1_label);
    // Marking di as live


    // renamable $eax = BSR32rr killed renamable $edi, implicit-def dead $eflags
    // operand 1 is di
    // operand 1(di) is a simple register
    AsmReg inst2_op1 = scratch_di.cur_reg;

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(BSR32rr, scratch_ax.cur_reg, inst2_op1);
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = XOR32ri killed renamable $eax(tied-def 0), 31, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(XOR32ri, scratch_ax.cur_reg, 31);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // handling return for ax
    // value already in register, nothing to do
    // Jumping to convergence point at the end of the encoding function
    derived()->generate_raw_jump(CompilerX64::Jump::jmp, ret_converge_label);

    // Starting encoding of block 2
    derived()->assembler.label_place(block2_label);


    // $eax = MOV32ri 32
    // operand 1 is an immediate operand

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOV32ri, scratch_ax.cur_reg, 32);
    // result ax is marked as alive


    // RET64 killed $eax
    // handling return for ax
    // value already in register, nothing to do
    // Omitting jump to convergence as this is the last block

    // Placing the convergence point for registers here
    derived()->assembler.label_place(ret_converge_label);
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_ctlzi64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function ctlzi64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   successors: %bb.2(0x30000000), %bb.1(0x50000000); %bb.2(37.50%), %bb.1(62.50%)
    //   liveins: $rdi
    //   TEST64rr renamable $rdi, renamable $rdi, implicit-def $eflags
    //   JCC_1 %bb.2, 4, implicit killed $eflags
    // 
    // bb.1.cond.false:
    // ; predecessors: %bb.0
    //   liveins: $rdi
    //   renamable $rax = BSR64rr killed renamable $rdi, implicit-def dead $eflags
    //   renamable $rax = XOR64ri32 killed renamable $rax(tied-def 0), 63, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // bb.2.cond.end:
    // ; predecessors: %bb.0
    // 
    //   $eax = MOV32ri 64, implicit-def $rax
    //   RET64 killed $rax
    // 
    // # End machine code for function ctlzi64.
    // 

    // Mapping di to param_0

    // Creating label for convergence point at the end of the function
    Label ret_converge_label = derived()->assembler.label_create();
    // Creating labels for blocks that are jump targets
    Label block1_label = derived()->assembler.label_create();
    Label block2_label = derived()->assembler.label_create();

    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // TEST64rr renamable $rdi, renamable $rdi, implicit-def $eflags
    // Skipping check for TEST64mr since associated register is used as an operand twice
    // Skipping check for TEST64ri since associated register is used as an operand twice
    // operand 0 is di
    // di is mapped to param_0
    AsmReg inst0_op0 = param_0.as_reg(this);
    // operand 1 is di
    // di is mapped to param_0
    AsmReg inst0_op1 = param_0.as_reg(this);

    ASMD(TEST64rr, inst0_op0, inst0_op1);


    // JCC_1 %bb.2, 4, implicit killed $eflags
    // Preparing jump to other block
    // di is live-out
    // ax is used in the function later on
    // Handling register ax
    // ax is not live-out and needs to be allocated
    scratch_ax.alloc_from_bank(0);
    // Handling register di
    // di is mapped to operand param_0, materializing it
    param_0.try_salvage_or_materialize(this, scratch_di, 0, 8);
    derived()->generate_raw_jump(CompilerX64::Jump::je, block2_label);


    // Starting encoding of block 1
    derived()->assembler.label_place(block1_label);
    // Marking di as live


    // renamable $rax = BSR64rr killed renamable $rdi, implicit-def dead $eflags
    // operand 1 is di
    // operand 1(di) is a simple register
    AsmReg inst2_op1 = scratch_di.cur_reg;

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(BSR64rr, scratch_ax.cur_reg, inst2_op1);
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $rax = XOR64ri32 killed renamable $rax(tied-def 0), 63, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(XOR64ri, scratch_ax.cur_reg, 63);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // handling return for ax
    // value already in register, nothing to do
    // Jumping to convergence point at the end of the encoding function
    derived()->generate_raw_jump(CompilerX64::Jump::jmp, ret_converge_label);

    // Starting encoding of block 2
    derived()->assembler.label_place(block2_label);


    // $eax = MOV32ri 64, implicit-def $rax
    // operand 1 is an immediate operand

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(MOV32ri, scratch_ax.cur_reg, 64);
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $rax
    // handling return for ax
    // value already in register, nothing to do
    // Omitting jump to convergence as this is the last block

    // Placing the convergence point for registers here
    derived()->assembler.label_place(ret_converge_label);
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_addf32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function addf32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $xmm0 = nofpexcept ADDSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function addf32.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept ADDSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    // SSE_ADDSSrr has a preferred encoding as SSE_ADDSSrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_ADDSSrm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(SSE_ADDSSrr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_subf32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function subf32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $xmm0 = nofpexcept SUBSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function subf32.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept SUBSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    // SSE_SUBSSrr has a preferred encoding as SSE_SUBSSrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_SUBSSrm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(SSE_SUBSSrr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_mulf32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function mulf32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $xmm0 = nofpexcept MULSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function mulf32.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept MULSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    // SSE_MULSSrr has a preferred encoding as SSE_MULSSrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_MULSSrm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(SSE_MULSSrr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_divf32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function divf32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $xmm0 = nofpexcept DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function divf32.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    // SSE_DIVSSrr has a preferred encoding as SSE_DIVSSrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_DIVSSrm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(SSE_DIVSSrr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_addf64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function addf64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function addf64.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    // SSE_ADDSDrr has a preferred encoding as SSE_ADDSDrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_ADDSDrm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(SSE_ADDSDrr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_subf64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function subf64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $xmm0 = nofpexcept SUBSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function subf64.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept SUBSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    // SSE_SUBSDrr has a preferred encoding as SSE_SUBSDrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_SUBSDrm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(SSE_SUBSDrr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_mulf64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function mulf64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function mulf64.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    // SSE_MULSDrr has a preferred encoding as SSE_MULSDrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_MULSDrm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(SSE_MULSDrr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_divf64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function divf64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $xmm0 = nofpexcept DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function divf64.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept DIVSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    // SSE_DIVSDrr has a preferred encoding as SSE_DIVSDrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_DIVSDrm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(SSE_DIVSDrr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fnegf32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function fnegf32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Constant Pool:
    //   cp#0: <float -0.000000e+00, float -0.000000e+00, float -0.000000e+00, float -0.000000e+00>, align=16
    // Function Live Ins: $xmm0
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $xmm0
    //   renamable $xmm0 = XORPSrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
    //   RET64 killed $xmm0
    // 
    // # End machine code for function fnegf32.
    // 

    // Mapping xmm0 to param_0
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = XORPSrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
    // operand 0 is xmm0
    // xmm0 is mapped to param_0
    // operand 0(param_0) is tied so try to salvage or materialize
    param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // operand is a constant-pool reference
    SymRef inst0_op1_sym = this->sym_fnegf32_cp0;
    if (inst0_op1_sym == Assembler::INVALID_SYM_REF) [[unlikely]] {
        const std::array<u8, 16> data = {0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x80};
        inst0_op1_sym = derived()->assembler.sym_def_data("", data, 16, true, false, true, false);
        this->sym_fnegf32_cp0 = inst0_op1_sym;
    }
    inst0_op1 = FE_MEM(FE_IP, 0, FE_NOREG, 0);

    ASMD(SSE_XORPSrm, scratch_xmm0.cur_reg, inst0_op1);
    derived()->assembler.reloc_text_pc32(inst0_op1_sym, derived()->assembler.text_cur_off() - 4, -4);
    // argument xmm0 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fnegf64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function fnegf64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Constant Pool:
    //   cp#0: <double -0.000000e+00, double -0.000000e+00>, align=16
    // Function Live Ins: $xmm0
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $xmm0
    //   renamable $xmm0 = XORPSrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
    //   RET64 killed $xmm0
    // 
    // # End machine code for function fnegf64.
    // 

    // Mapping xmm0 to param_0
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = XORPSrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
    // operand 0 is xmm0
    // xmm0 is mapped to param_0
    // operand 0(param_0) is tied so try to salvage or materialize
    param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // operand is a constant-pool reference
    SymRef inst0_op1_sym = this->sym_fnegf64_cp0;
    if (inst0_op1_sym == Assembler::INVALID_SYM_REF) [[unlikely]] {
        const std::array<u8, 16> data = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x80};
        inst0_op1_sym = derived()->assembler.sym_def_data("", data, 16, true, false, true, false);
        this->sym_fnegf64_cp0 = inst0_op1_sym;
    }
    inst0_op1 = FE_MEM(FE_IP, 0, FE_NOREG, 0);

    ASMD(SSE_XORPSrm, scratch_xmm0.cur_reg, inst0_op1);
    derived()->assembler.reloc_text_pc32(inst0_op1_sym, derived()->assembler.text_cur_off() - 4, -4);
    // argument xmm0 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fabsf32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function fabsf32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Constant Pool:
    //   cp#0: <float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000, float 0x7FFFFFFFE0000000>, align=16
    // Function Live Ins: $xmm0
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $xmm0
    //   renamable $xmm0 = ANDPSrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
    //   RET64 killed $xmm0
    // 
    // # End machine code for function fabsf32.
    // 

    // Mapping xmm0 to param_0
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = ANDPSrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
    // operand 0 is xmm0
    // xmm0 is mapped to param_0
    // operand 0(param_0) is tied so try to salvage or materialize
    param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // operand is a constant-pool reference
    SymRef inst0_op1_sym = this->sym_fabsf32_cp0;
    if (inst0_op1_sym == Assembler::INVALID_SYM_REF) [[unlikely]] {
        const std::array<u8, 16> data = {0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0x7F};
        inst0_op1_sym = derived()->assembler.sym_def_data("", data, 16, true, false, true, false);
        this->sym_fabsf32_cp0 = inst0_op1_sym;
    }
    inst0_op1 = FE_MEM(FE_IP, 0, FE_NOREG, 0);

    ASMD(SSE_ANDPSrm, scratch_xmm0.cur_reg, inst0_op1);
    derived()->assembler.reloc_text_pc32(inst0_op1_sym, derived()->assembler.text_cur_off() - 4, -4);
    // argument xmm0 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fabsf64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function fabsf64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Constant Pool:
    //   cp#0: <double 0x7FFFFFFFFFFFFFFF, double 0x7FFFFFFFFFFFFFFF>, align=16
    // Function Live Ins: $xmm0
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $xmm0
    //   renamable $xmm0 = ANDPSrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
    //   RET64 killed $xmm0
    // 
    // # End machine code for function fabsf64.
    // 

    // Mapping xmm0 to param_0
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = ANDPSrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
    // operand 0 is xmm0
    // xmm0 is mapped to param_0
    // operand 0(param_0) is tied so try to salvage or materialize
    param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // operand is a constant-pool reference
    SymRef inst0_op1_sym = this->sym_fabsf64_cp0;
    if (inst0_op1_sym == Assembler::INVALID_SYM_REF) [[unlikely]] {
        const std::array<u8, 16> data = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F};
        inst0_op1_sym = derived()->assembler.sym_def_data("", data, 16, true, false, true, false);
        this->sym_fabsf64_cp0 = inst0_op1_sym;
    }
    inst0_op1 = FE_MEM(FE_IP, 0, FE_NOREG, 0);

    ASMD(SSE_ANDPSrm, scratch_xmm0.cur_reg, inst0_op1);
    derived()->assembler.reloc_text_pc32(inst0_op1_sym, derived()->assembler.text_cur_off() - 4, -4);
    // argument xmm0 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fmaf32(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0) {
    // # Machine code for function fmaf32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1, $xmm2
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $xmm0, $xmm1, $xmm2
    //   renamable $xmm0 = nofpexcept MULSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    //   renamable $xmm0 = nofpexcept ADDSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function fmaf32.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    // Mapping xmm2 to param_2
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_xmm2{derived()};


    // renamable $xmm0 = nofpexcept MULSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    // SSE_MULSSrr has a preferred encoding as SSE_MULSSrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_MULSSrm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(SSE_MULSSrr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // renamable $xmm0 = nofpexcept ADDSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
    // SSE_ADDSSrr has a preferred encoding as SSE_ADDSSrm if possible
    if (param_2.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // operand 0(xmm0) is the same as its tied destination
        scratch_xmm0.alloc_from_bank(1);
        // operand 1 is a memory operand
        // xmm2 is base for memory operand to use
        // xmm2 maps to operand param_2 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_2.val_ref_frame_off());

        ASMD(SSE_ADDSSrm, scratch_xmm0.cur_reg, inst1_op1);
    } else {
        // operand 0 is xmm0
        // operand 0(xmm0) is the same as its tied destination
        scratch_xmm0.alloc_from_bank(1);
        // operand 1 is xmm2
        // xmm2 is mapped to param_2
        AsmReg inst1_op1 = param_2.as_reg(this);

        ASMD(SSE_ADDSSrr, scratch_xmm0.cur_reg, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm2 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fmaf64(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0) {
    // # Machine code for function fmaf64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1, $xmm2
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $xmm0, $xmm1, $xmm2
    //   renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    //   renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function fmaf64.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    // Mapping xmm2 to param_2
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_xmm2{derived()};


    // renamable $xmm0 = nofpexcept MULSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    // SSE_MULSDrr has a preferred encoding as SSE_MULSDrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_MULSDrm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);

        ASMD(SSE_MULSDrr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2, implicit $mxcsr
    // SSE_ADDSDrr has a preferred encoding as SSE_ADDSDrm if possible
    if (param_2.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // operand 0(xmm0) is the same as its tied destination
        scratch_xmm0.alloc_from_bank(1);
        // operand 1 is a memory operand
        // xmm2 is base for memory operand to use
        // xmm2 maps to operand param_2 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_2.val_ref_frame_off());

        ASMD(SSE_ADDSDrm, scratch_xmm0.cur_reg, inst1_op1);
    } else {
        // operand 0 is xmm0
        // operand 0(xmm0) is the same as its tied destination
        scratch_xmm0.alloc_from_bank(1);
        // operand 1 is xmm2
        // xmm2 is mapped to param_2
        AsmReg inst1_op1 = param_2.as_reg(this);

        ASMD(SSE_ADDSDrr, scratch_xmm0.cur_reg, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm2 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_f64tof32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function f64tof32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $xmm0
    //   renamable $xmm0 = nofpexcept CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function f64tof32.
    // 

    // Mapping xmm0 to param_0
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept CVTSD2SSrr killed renamable $xmm0, implicit $mxcsr
    // SSE_CVTSD2SSrr has a preferred encoding as SSE_CVTSD2SSrm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def xmm0 has not been allocated yet
        scratch_xmm0.alloc_from_bank(1);
        ASMD(SSE_CVTSD2SSrm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_xmm0, 1)) {
            inst0_op1 = scratch_xmm0.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }

        // def xmm0 has not been allocated yet
        scratch_xmm0.alloc_from_bank(1);
        ASMD(SSE_CVTSD2SSrr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_f32tof64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function f32tof64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $xmm0
    //   renamable $xmm0 = nofpexcept CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function f32tof64.
    // 

    // Mapping xmm0 to param_0
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
    // SSE_CVTSS2SDrr has a preferred encoding as SSE_CVTSS2SDrm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def xmm0 has not been allocated yet
        scratch_xmm0.alloc_from_bank(1);
        ASMD(SSE_CVTSS2SDrm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_xmm0, 1)) {
            inst0_op1 = scratch_xmm0.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }

        // def xmm0 has not been allocated yet
        scratch_xmm0.alloc_from_bank(1);
        ASMD(SSE_CVTSS2SDrr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_f32toi32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function f32toi32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $xmm0
    //   renamable $eax = nofpexcept CVTTSS2SIrr killed renamable $xmm0, implicit $mxcsr
    //   RET64 killed $eax
    // 
    // # End machine code for function f32toi32.
    // 

    // Mapping xmm0 to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = nofpexcept CVTTSS2SIrr killed renamable $xmm0, implicit $mxcsr
    // SSE_CVTTSS2SI32rr has a preferred encoding as SSE_CVTTSS2SI32rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(SSE_CVTTSS2SI32rm, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst0_op1 = param_0.as_reg(this);

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(SSE_CVTTSS2SI32rr, scratch_ax.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_f32tou32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function f32tou32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $xmm0
    //   renamable $rax = nofpexcept CVTTSS2SI64rr killed renamable $xmm0, implicit $mxcsr
    //   $eax = KILL killed renamable $eax, implicit killed $rax
    //   RET64 killed $eax
    // 
    // # End machine code for function f32tou32.
    // 

    // Mapping xmm0 to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $rax = nofpexcept CVTTSS2SI64rr killed renamable $xmm0, implicit $mxcsr
    // SSE_CVTTSS2SI64rr has a preferred encoding as SSE_CVTTSS2SI64rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(SSE_CVTTSS2SI64rm, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst0_op1 = param_0.as_reg(this);

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(SSE_CVTTSS2SI64rr, scratch_ax.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // $eax = KILL killed renamable $eax, implicit killed $rax
    // KILL is a no-op


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_f32toi64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function f32toi64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $xmm0
    //   renamable $rax = nofpexcept CVTTSS2SI64rr killed renamable $xmm0, implicit $mxcsr
    //   RET64 killed $rax
    // 
    // # End machine code for function f32toi64.
    // 

    // Mapping xmm0 to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $rax = nofpexcept CVTTSS2SI64rr killed renamable $xmm0, implicit $mxcsr
    // SSE_CVTTSS2SI64rr has a preferred encoding as SSE_CVTTSS2SI64rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(SSE_CVTTSS2SI64rm, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst0_op1 = param_0.as_reg(this);

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(SSE_CVTTSS2SI64rr, scratch_ax.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_f32tou64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function f32tou64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Constant Pool:
    //   cp#0: 0x43E0000000000000, align=4
    // Function Live Ins: $xmm0
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $xmm0
    //   renamable $rcx = nofpexcept CVTTSS2SI64rr_Int renamable $xmm0, implicit $mxcsr
    //   $rdx = MOV64rr $rcx
    //   renamable $rdx = SAR64ri killed renamable $rdx(tied-def 0), 63, implicit-def dead $eflags
    //   renamable $xmm0 = nofpexcept SUBSSrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load (s32) from constant-pool)
    //   renamable $rax = nofpexcept CVTTSS2SI64rr_Int killed renamable $xmm0, implicit $mxcsr
    //   renamable $rax = AND64rr killed renamable $rax(tied-def 0), killed renamable $rdx, implicit-def dead $eflags
    //   renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function f32tou64.
    // 

    // Mapping xmm0 to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $rcx = nofpexcept CVTTSS2SI64rr_Int renamable $xmm0, implicit $mxcsr
    // SSE_CVTTSS2SI64rr has a preferred encoding as SSE_CVTTSS2SI64rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def cx has not been allocated yet
        scratch_cx.alloc_from_bank(0);
        ASMD(SSE_CVTTSS2SI64rm, scratch_cx.cur_reg, inst0_op1);
    } else {
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst0_op1 = param_0.as_reg(this);

        // def cx has not been allocated yet
        scratch_cx.alloc_from_bank(0);
        ASMD(SSE_CVTTSS2SI64rr, scratch_cx.cur_reg, inst0_op1);
    }
    // result cx is marked as alive


    // $rdx = MOV64rr $rcx
    // aliasing dx to cx


    // renamable $rdx = SAR64ri killed renamable $rdx(tied-def 0), 63, implicit-def dead $eflags
    // operand 0 is dx
    // dx is an alias for cx
    // operand 0(cx) has some references so copy it
    AsmReg inst2_op0 = scratch_dx.alloc_from_bank(0);
    ASMD(MOV64rr, inst2_op0, scratch_cx.cur_reg);
    // operand 1 is an immediate operand

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(SAR64ri, scratch_dx.cur_reg, 63);
    // argument dx is killed and marked as dead
    // removing alias from dx to cx
    // result dx is marked as alive


    // renamable $xmm0 = nofpexcept SUBSSrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load (s32) from constant-pool)
    // operand 0 is xmm0
    // xmm0 is mapped to param_0
    // operand 0(param_0) is tied so try to salvage or materialize
    param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
    // operand 1 is a memory operand
    FeMem inst3_op1;
    // operand is a constant-pool reference
    SymRef inst3_op1_sym = this->sym_f32tou64_cp0;
    if (inst3_op1_sym == Assembler::INVALID_SYM_REF) [[unlikely]] {
        const std::array<u8, 4> data = {0x0, 0x0, 0x0, 0x5F};
        inst3_op1_sym = derived()->assembler.sym_def_data("", data, 4, true, false, true, false);
        this->sym_f32tou64_cp0 = inst3_op1_sym;
    }
    inst3_op1 = FE_MEM(FE_IP, 0, FE_NOREG, 0);

    ASMD(SSE_SUBSSrm, scratch_xmm0.cur_reg, inst3_op1);
    derived()->assembler.reloc_text_pc32(inst3_op1_sym, derived()->assembler.text_cur_off() - 4, -4);
    // argument xmm0 is killed and marked as dead
    // result xmm0 is marked as alive


    // renamable $rax = nofpexcept CVTTSS2SI64rr_Int killed renamable $xmm0, implicit $mxcsr
    // operand 1 is xmm0
    // operand 1(xmm0) is a simple register
    AsmReg inst4_op1 = scratch_xmm0.cur_reg;

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_CVTTSS2SI64rr, scratch_ax.cur_reg, inst4_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $rax = AND64rr killed renamable $rax(tied-def 0), killed renamable $rdx, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is dx
    // operand 1(dx) is a simple register
    AsmReg inst5_op1 = scratch_dx.cur_reg;

    ASMD(AND64rr, scratch_ax.cur_reg, inst5_op1);
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as alive


    // renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst6_op1 = scratch_cx.cur_reg;

    ASMD(OR64rr, scratch_ax.cur_reg, inst6_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_f64toi32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function f64toi32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $xmm0
    //   renamable $eax = nofpexcept CVTTSD2SIrr killed renamable $xmm0, implicit $mxcsr
    //   RET64 killed $eax
    // 
    // # End machine code for function f64toi32.
    // 

    // Mapping xmm0 to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = nofpexcept CVTTSD2SIrr killed renamable $xmm0, implicit $mxcsr
    // SSE_CVTTSD2SI32rr has a preferred encoding as SSE_CVTTSD2SI32rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(SSE_CVTTSD2SI32rm, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst0_op1 = param_0.as_reg(this);

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(SSE_CVTTSD2SI32rr, scratch_ax.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_f64tou32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function f64tou32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $xmm0
    //   renamable $rax = nofpexcept CVTTSD2SI64rr killed renamable $xmm0, implicit $mxcsr
    //   $eax = KILL killed renamable $eax, implicit killed $rax
    //   RET64 killed $eax
    // 
    // # End machine code for function f64tou32.
    // 

    // Mapping xmm0 to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $rax = nofpexcept CVTTSD2SI64rr killed renamable $xmm0, implicit $mxcsr
    // SSE_CVTTSD2SI64rr has a preferred encoding as SSE_CVTTSD2SI64rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(SSE_CVTTSD2SI64rm, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst0_op1 = param_0.as_reg(this);

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(SSE_CVTTSD2SI64rr, scratch_ax.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // $eax = KILL killed renamable $eax, implicit killed $rax
    // KILL is a no-op


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_f64toi64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function f64toi64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $xmm0
    //   renamable $rax = nofpexcept CVTTSD2SI64rr killed renamable $xmm0, implicit $mxcsr
    //   RET64 killed $rax
    // 
    // # End machine code for function f64toi64.
    // 

    // Mapping xmm0 to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $rax = nofpexcept CVTTSD2SI64rr killed renamable $xmm0, implicit $mxcsr
    // SSE_CVTTSD2SI64rr has a preferred encoding as SSE_CVTTSD2SI64rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(SSE_CVTTSD2SI64rm, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst0_op1 = param_0.as_reg(this);

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(SSE_CVTTSD2SI64rr, scratch_ax.cur_reg, inst0_op1);
    }
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_f64tou64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function f64tou64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Constant Pool:
    //   cp#0: 0x43E0000000000000, align=8
    // Function Live Ins: $xmm0
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $xmm0
    //   renamable $rcx = nofpexcept CVTTSD2SI64rr_Int renamable $xmm0, implicit $mxcsr
    //   $rdx = MOV64rr $rcx
    //   renamable $rdx = SAR64ri killed renamable $rdx(tied-def 0), 63, implicit-def dead $eflags
    //   renamable $xmm0 = nofpexcept SUBSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load (s64) from constant-pool)
    //   renamable $rax = nofpexcept CVTTSD2SI64rr_Int killed renamable $xmm0, implicit $mxcsr
    //   renamable $rax = AND64rr killed renamable $rax(tied-def 0), killed renamable $rdx, implicit-def dead $eflags
    //   renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function f64tou64.
    // 

    // Mapping xmm0 to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $rcx = nofpexcept CVTTSD2SI64rr_Int renamable $xmm0, implicit $mxcsr
    // SSE_CVTTSD2SI64rr has a preferred encoding as SSE_CVTTSD2SI64rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def cx has not been allocated yet
        scratch_cx.alloc_from_bank(0);
        ASMD(SSE_CVTTSD2SI64rm, scratch_cx.cur_reg, inst0_op1);
    } else {
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst0_op1 = param_0.as_reg(this);

        // def cx has not been allocated yet
        scratch_cx.alloc_from_bank(0);
        ASMD(SSE_CVTTSD2SI64rr, scratch_cx.cur_reg, inst0_op1);
    }
    // result cx is marked as alive


    // $rdx = MOV64rr $rcx
    // aliasing dx to cx


    // renamable $rdx = SAR64ri killed renamable $rdx(tied-def 0), 63, implicit-def dead $eflags
    // operand 0 is dx
    // dx is an alias for cx
    // operand 0(cx) has some references so copy it
    AsmReg inst2_op0 = scratch_dx.alloc_from_bank(0);
    ASMD(MOV64rr, inst2_op0, scratch_cx.cur_reg);
    // operand 1 is an immediate operand

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(SAR64ri, scratch_dx.cur_reg, 63);
    // argument dx is killed and marked as dead
    // removing alias from dx to cx
    // result dx is marked as alive


    // renamable $xmm0 = nofpexcept SUBSDrm killed renamable $xmm0(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr :: (load (s64) from constant-pool)
    // operand 0 is xmm0
    // xmm0 is mapped to param_0
    // operand 0(param_0) is tied so try to salvage or materialize
    param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
    // operand 1 is a memory operand
    FeMem inst3_op1;
    // operand is a constant-pool reference
    SymRef inst3_op1_sym = this->sym_f64tou64_cp0;
    if (inst3_op1_sym == Assembler::INVALID_SYM_REF) [[unlikely]] {
        const std::array<u8, 8> data = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xE0, 0x43};
        inst3_op1_sym = derived()->assembler.sym_def_data("", data, 8, true, false, true, false);
        this->sym_f64tou64_cp0 = inst3_op1_sym;
    }
    inst3_op1 = FE_MEM(FE_IP, 0, FE_NOREG, 0);

    ASMD(SSE_SUBSDrm, scratch_xmm0.cur_reg, inst3_op1);
    derived()->assembler.reloc_text_pc32(inst3_op1_sym, derived()->assembler.text_cur_off() - 4, -4);
    // argument xmm0 is killed and marked as dead
    // result xmm0 is marked as alive


    // renamable $rax = nofpexcept CVTTSD2SI64rr_Int killed renamable $xmm0, implicit $mxcsr
    // operand 1 is xmm0
    // operand 1(xmm0) is a simple register
    AsmReg inst4_op1 = scratch_xmm0.cur_reg;

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_CVTTSD2SI64rr, scratch_ax.cur_reg, inst4_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $rax = AND64rr killed renamable $rax(tied-def 0), killed renamable $rdx, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is dx
    // operand 1(dx) is a simple register
    AsmReg inst5_op1 = scratch_dx.cur_reg;

    ASMD(AND64rr, scratch_ax.cur_reg, inst5_op1);
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as alive


    // renamable $rax = OR64rr killed renamable $rax(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst6_op1 = scratch_cx.cur_reg;

    ASMD(OR64rr, scratch_ax.cur_reg, inst6_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_i8tof32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function i8tof32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVSX32rr8 killed renamable $dil, implicit killed $edi
    //   renamable $xmm0 = nofpexcept CVTSI2SSrr killed renamable $eax, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function i8tof32.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVSX32rr8 killed renamable $dil, implicit killed $edi
    // MOVSXr32r8 has a preferred encoding as MOVSXr32m8 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr32m8, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr32r8, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $xmm0 = nofpexcept CVTSI2SSrr killed renamable $eax, implicit $mxcsr
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_CVTSI2SS32rr, scratch_xmm0.cur_reg, inst1_op1);
    // argument ax is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_i16tof32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function i16tof32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVSX32rr16 killed renamable $di, implicit killed $edi
    //   renamable $xmm0 = nofpexcept CVTSI2SSrr killed renamable $eax, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function i16tof32.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVSX32rr16 killed renamable $di, implicit killed $edi
    // MOVSXr32r16 has a preferred encoding as MOVSXr32m16 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr32m16, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr32r16, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $xmm0 = nofpexcept CVTSI2SSrr killed renamable $eax, implicit $mxcsr
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_CVTSI2SS32rr, scratch_xmm0.cur_reg, inst1_op1);
    // argument ax is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_i32tof32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function i32tof32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $xmm0 = nofpexcept CVTSI2SSrr killed renamable $edi, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function i32tof32.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept CVTSI2SSrr killed renamable $edi, implicit $mxcsr
    // SSE_CVTSI2SS32rr has a preferred encoding as SSE_CVTSI2SS32rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def xmm0 has not been allocated yet
        scratch_xmm0.alloc_from_bank(1);
        ASMD(SSE_CVTSI2SS32rm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1 = param_0.as_reg(this);

        // def xmm0 has not been allocated yet
        scratch_xmm0.alloc_from_bank(1);
        ASMD(SSE_CVTSI2SS32rr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_i64tof32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function i64tof32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $xmm0 = nofpexcept CVTSI642SSrr killed renamable $rdi, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function i64tof32.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept CVTSI642SSrr killed renamable $rdi, implicit $mxcsr
    // SSE_CVTSI2SS64rr has a preferred encoding as SSE_CVTSI2SS64rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def xmm0 has not been allocated yet
        scratch_xmm0.alloc_from_bank(1);
        ASMD(SSE_CVTSI2SS64rm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1 = param_0.as_reg(this);

        // def xmm0 has not been allocated yet
        scratch_xmm0.alloc_from_bank(1);
        ASMD(SSE_CVTSI2SS64rr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_u8tof32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function u8tof32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVZX32rr8 killed renamable $dil, implicit killed $edi
    //   renamable $xmm0 = nofpexcept CVTSI2SSrr killed renamable $eax, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function u8tof32.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVZX32rr8 killed renamable $dil, implicit killed $edi
    // MOVZXr32r8 has a preferred encoding as MOVZXr32m8 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32m8, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32r8, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $xmm0 = nofpexcept CVTSI2SSrr killed renamable $eax, implicit $mxcsr
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_CVTSI2SS32rr, scratch_xmm0.cur_reg, inst1_op1);
    // argument ax is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_u16tof32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function u16tof32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVZX32rr16 killed renamable $di, implicit killed $edi
    //   renamable $xmm0 = nofpexcept CVTSI2SSrr killed renamable $eax, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function u16tof32.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVZX32rr16 killed renamable $di, implicit killed $edi
    // MOVZXr32r16 has a preferred encoding as MOVZXr32m16 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32m16, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32r16, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $xmm0 = nofpexcept CVTSI2SSrr killed renamable $eax, implicit $mxcsr
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_CVTSI2SS32rr, scratch_xmm0.cur_reg, inst1_op1);
    // argument ax is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_u32tof32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function u32tof32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOV32rr killed renamable $edi, implicit-def $rax
    //   renamable $xmm0 = nofpexcept CVTSI642SSrr killed renamable $rax, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function u32tof32.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOV32rr killed renamable $edi, implicit-def $rax
    // MOV32rr has a preferred encoding as MOV32ri if possible
    if (param_0.encodeable_as_imm32_sext()) {
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
        ASMD(MOV32ri, scratch_ax.cur_reg, imm.const_u64);
    }    // MOV32rr has a preferred encoding as MOV32rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
        ASMD(MOV32rm, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
        ASMD(MOV32rr, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // renamable $xmm0 = nofpexcept CVTSI642SSrr killed renamable $rax, implicit $mxcsr
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_CVTSI2SS64rr, scratch_xmm0.cur_reg, inst1_op1);
    // argument ax is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_u64tof32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function u64tof32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   successors: %bb.2(0x40000000), %bb.1(0x40000000); %bb.2(50.00%), %bb.1(50.00%)
    //   liveins: $rdi
    //   TEST64rr renamable $rdi, renamable $rdi, implicit-def $eflags
    //   JCC_1 %bb.1, 8, implicit killed $eflags
    // 
    // bb.2 (%ir-block.1):
    // ; predecessors: %bb.0
    //   liveins: $rdi
    //   renamable $xmm0 = nofpexcept CVTSI642SSrr killed renamable $rdi, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // bb.1:
    // ; predecessors: %bb.0
    //   liveins: $rdi
    //   $rax = MOV64rr $rdi
    //   renamable $rax = SHR64ri killed renamable $rax(tied-def 0), 1, implicit-def dead $eflags
    //   renamable $edi = AND32ri killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rdi, implicit-def $rdi
    //   renamable $rdi = OR64rr killed renamable $rdi(tied-def 0), killed renamable $rax, implicit-def dead $eflags
    //   renamable $xmm0 = nofpexcept CVTSI642SSrr killed renamable $rdi, implicit $mxcsr
    //   renamable $xmm0 = nofpexcept ADDSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm0, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function u64tof32.
    // 

    // Mapping di to param_0

    // Creating label for convergence point at the end of the function
    Label ret_converge_label = derived()->assembler.label_create();
    // Creating labels for blocks that are jump targets
    Label block2_label = derived()->assembler.label_create();
    Label block1_label = derived()->assembler.label_create();

    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // TEST64rr renamable $rdi, renamable $rdi, implicit-def $eflags
    // Skipping check for TEST64mr since associated register is used as an operand twice
    // Skipping check for TEST64ri since associated register is used as an operand twice
    // operand 0 is di
    // di is mapped to param_0
    AsmReg inst0_op0 = param_0.as_reg(this);
    // operand 1 is di
    // di is mapped to param_0
    AsmReg inst0_op1 = param_0.as_reg(this);

    ASMD(TEST64rr, inst0_op0, inst0_op1);


    // JCC_1 %bb.1, 8, implicit killed $eflags
    // Preparing jump to other block
    // di is live-out
    // xmm0 is used in the function later on
    // ax is used in the function later on
    // Handling register ax
    // ax is not live-out and needs to be allocated
    scratch_ax.alloc_from_bank(0);
    // Handling register xmm0
    // xmm0 is not live-out and needs to be allocated
    scratch_xmm0.alloc_from_bank(1);
    // Handling register di
    // di is mapped to operand param_0, materializing it
    param_0.try_salvage_or_materialize(this, scratch_di, 0, 8);
    derived()->generate_raw_jump(CompilerX64::Jump::js, block1_label);


    // Starting encoding of block 2
    derived()->assembler.label_place(block2_label);
    // Marking di as live


    // renamable $xmm0 = nofpexcept CVTSI642SSrr killed renamable $rdi, implicit $mxcsr
    // operand 1 is di
    // operand 1(di) is a simple register
    AsmReg inst2_op1 = scratch_di.cur_reg;

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_CVTSI2SS64rr, scratch_xmm0.cur_reg, inst2_op1);
    // argument di is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // handling return for xmm0
    // value already in register, nothing to do
    // Jumping to convergence point at the end of the encoding function
    derived()->generate_raw_jump(CompilerX64::Jump::jmp, ret_converge_label);

    // Starting encoding of block 1
    derived()->assembler.label_place(block1_label);
    // Marking di as live


    // $rax = MOV64rr $rdi
    // aliasing ax to di


    // renamable $rax = SHR64ri killed renamable $rax(tied-def 0), 1, implicit-def dead $eflags
    // operand 0 is ax
    // ax is an alias for di
    // operand 0(di) has some references so copy it
    AsmReg inst5_op0 = scratch_ax.alloc_from_bank(0);
    ASMD(MOV64rr, inst5_op0, scratch_di.cur_reg);
    // operand 1 is an immediate operand

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SHR64ri, scratch_ax.cur_reg, 1);
    // argument ax is killed and marked as dead
    // removing alias from ax to di
    // result ax is marked as alive


    // renamable $edi = AND32ri killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rdi, implicit-def $rdi
    // operand 0 is di
    // operand 0(di) is the same as its tied destination
    scratch_di.alloc_from_bank(0);
    // operand 1 is an immediate operand
    // Handling implicit operand di
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    // Ignoring implicit def RDI as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(AND32ri, scratch_di.cur_reg, 1);
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result di is marked as alive
    // result di is marked as alive


    // renamable $rdi = OR64rr killed renamable $rdi(tied-def 0), killed renamable $rax, implicit-def dead $eflags
    // operand 0 is di
    // operand 0(di) is the same as its tied destination
    scratch_di.alloc_from_bank(0);
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst7_op1 = scratch_ax.cur_reg;

    ASMD(OR64rr, scratch_di.cur_reg, inst7_op1);
    // argument di is killed and marked as dead
    // argument ax is killed and marked as dead
    // result di is marked as alive


    // renamable $xmm0 = nofpexcept CVTSI642SSrr killed renamable $rdi, implicit $mxcsr
    // operand 1 is di
    // operand 1(di) is a simple register
    AsmReg inst8_op1 = scratch_di.cur_reg;

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_CVTSI2SS64rr, scratch_xmm0.cur_reg, inst8_op1);
    // argument di is killed and marked as dead
    // result xmm0 is marked as alive


    // renamable $xmm0 = nofpexcept ADDSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm0, implicit $mxcsr
    // Skipping check for SSE_ADDSSrm since associated register is used as an operand twice
    // operand 0 is xmm0
    // operand 0(xmm0) is the same as its tied destination
    scratch_xmm0.alloc_from_bank(1);
    // operand 1 is xmm0
    // operand 1(xmm0) is a simple register
    AsmReg inst9_op1 = scratch_xmm0.cur_reg;

    ASMD(SSE_ADDSSrr, scratch_xmm0.cur_reg, inst9_op1);
    // argument xmm0 is killed and marked as dead
    // argument xmm0 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // handling return for xmm0
    // value already in register, nothing to do
    // Omitting jump to convergence as this is the last block

    // Placing the convergence point for registers here
    derived()->assembler.label_place(ret_converge_label);
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_i8tof64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function i8tof64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVSX32rr8 killed renamable $dil, implicit killed $edi
    //   renamable $xmm0 = CVTSI2SDrr killed renamable $eax
    //   RET64 killed $xmm0
    // 
    // # End machine code for function i8tof64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVSX32rr8 killed renamable $dil, implicit killed $edi
    // MOVSXr32r8 has a preferred encoding as MOVSXr32m8 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr32m8, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr32r8, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $xmm0 = CVTSI2SDrr killed renamable $eax
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_CVTSI2SD32rr, scratch_xmm0.cur_reg, inst1_op1);
    // argument ax is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_i16tof64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function i16tof64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVSX32rr16 killed renamable $di, implicit killed $edi
    //   renamable $xmm0 = CVTSI2SDrr killed renamable $eax
    //   RET64 killed $xmm0
    // 
    // # End machine code for function i16tof64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVSX32rr16 killed renamable $di, implicit killed $edi
    // MOVSXr32r16 has a preferred encoding as MOVSXr32m16 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr32m16, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr32r16, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $xmm0 = CVTSI2SDrr killed renamable $eax
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_CVTSI2SD32rr, scratch_xmm0.cur_reg, inst1_op1);
    // argument ax is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_i32tof64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function i32tof64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $xmm0 = CVTSI2SDrr killed renamable $edi
    //   RET64 killed $xmm0
    // 
    // # End machine code for function i32tof64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = CVTSI2SDrr killed renamable $edi
    // SSE_CVTSI2SD32rr has a preferred encoding as SSE_CVTSI2SD32rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def xmm0 has not been allocated yet
        scratch_xmm0.alloc_from_bank(1);
        ASMD(SSE_CVTSI2SD32rm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1 = param_0.as_reg(this);

        // def xmm0 has not been allocated yet
        scratch_xmm0.alloc_from_bank(1);
        ASMD(SSE_CVTSI2SD32rr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_i64tof64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function i64tof64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rdi, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function i64tof64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rdi, implicit $mxcsr
    // SSE_CVTSI2SD64rr has a preferred encoding as SSE_CVTSI2SD64rm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def xmm0 has not been allocated yet
        scratch_xmm0.alloc_from_bank(1);
        ASMD(SSE_CVTSI2SD64rm, scratch_xmm0.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1 = param_0.as_reg(this);

        // def xmm0 has not been allocated yet
        scratch_xmm0.alloc_from_bank(1);
        ASMD(SSE_CVTSI2SD64rr, scratch_xmm0.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_u8tof64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function u8tof64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVZX32rr8 killed renamable $dil, implicit killed $edi
    //   renamable $xmm0 = CVTSI2SDrr killed renamable $eax
    //   RET64 killed $xmm0
    // 
    // # End machine code for function u8tof64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVZX32rr8 killed renamable $dil, implicit killed $edi
    // MOVZXr32r8 has a preferred encoding as MOVZXr32m8 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32m8, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32r8, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $xmm0 = CVTSI2SDrr killed renamable $eax
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_CVTSI2SD32rr, scratch_xmm0.cur_reg, inst1_op1);
    // argument ax is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_u16tof64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function u16tof64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVZX32rr16 killed renamable $di, implicit killed $edi
    //   renamable $xmm0 = CVTSI2SDrr killed renamable $eax
    //   RET64 killed $xmm0
    // 
    // # End machine code for function u16tof64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVZX32rr16 killed renamable $di, implicit killed $edi
    // MOVZXr32r16 has a preferred encoding as MOVZXr32m16 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32m16, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32r16, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // renamable $xmm0 = CVTSI2SDrr killed renamable $eax
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_CVTSI2SD32rr, scratch_xmm0.cur_reg, inst1_op1);
    // argument ax is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_u32tof64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function u32tof64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOV32rr killed renamable $edi, implicit-def $rax
    //   renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function u32tof64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOV32rr killed renamable $edi, implicit-def $rax
    // MOV32rr has a preferred encoding as MOV32ri if possible
    if (param_0.encodeable_as_imm32_sext()) {
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
        ASMD(MOV32ri, scratch_ax.cur_reg, imm.const_u64);
    }    // MOV32rr has a preferred encoding as MOV32rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
        ASMD(MOV32rm, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
        ASMD(MOV32rr, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_CVTSI2SD64rr, scratch_xmm0.cur_reg, inst1_op1);
    // argument ax is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_u64tof64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function u64tof64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Constant Pool:
    //   cp#0: <i32 1127219200, i32 1160773632, i32 0, i32 0>, align=16
    //   cp#1: <double 0x4330000000000000, double 0x4530000000000000>, align=16
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   renamable $xmm1 = MOV64toPQIrr killed renamable $rdi
    //   renamable $xmm1 = PUNPCKLDQrm killed renamable $xmm1(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
    //   renamable $xmm1 = nofpexcept SUBPDrm killed renamable $xmm1(tied-def 0), $rip, 1, $noreg, %const.1, $noreg, implicit $mxcsr :: (load (s128) from constant-pool)
    //   $xmm0 = MOVAPDrr $xmm1
    //   renamable $xmm0 = UNPCKHPDrr killed renamable $xmm0(tied-def 0), $xmm1
    //   renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    //   RET64 killed $xmm0
    // 
    // # End machine code for function u64tof64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm1 = MOV64toPQIrr killed renamable $rdi
    // SSE_MOVQ_G2Xrr has a preferred encoding as SSE_MOVQ_G2Xrm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def xmm1 has not been allocated yet
        scratch_xmm1.alloc_from_bank(1);
        ASMD(SSE_MOVQ_G2Xrm, scratch_xmm1.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1 = param_0.as_reg(this);

        // def xmm1 has not been allocated yet
        scratch_xmm1.alloc_from_bank(1);
        ASMD(SSE_MOVQ_G2Xrr, scratch_xmm1.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // result xmm1 is marked as alive


    // renamable $xmm1 = PUNPCKLDQrm killed renamable $xmm1(tied-def 0), $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
    // operand 0 is xmm1
    // operand 0(xmm1) is the same as its tied destination
    scratch_xmm1.alloc_from_bank(1);
    // operand 1 is a memory operand
    FeMem inst1_op1;
    // operand is a constant-pool reference
    SymRef inst1_op1_sym = this->sym_u64tof64_cp0;
    if (inst1_op1_sym == Assembler::INVALID_SYM_REF) [[unlikely]] {
        const std::array<u8, 16> data = {0x0, 0x0, 0x30, 0x43, 0x0, 0x0, 0x30, 0x45, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0};
        inst1_op1_sym = derived()->assembler.sym_def_data("", data, 16, true, false, true, false);
        this->sym_u64tof64_cp0 = inst1_op1_sym;
    }
    inst1_op1 = FE_MEM(FE_IP, 0, FE_NOREG, 0);

    ASMD(SSE_PUNPCKLDQrm, scratch_xmm1.cur_reg, inst1_op1);
    derived()->assembler.reloc_text_pc32(inst1_op1_sym, derived()->assembler.text_cur_off() - 4, -4);
    // argument xmm1 is killed and marked as dead
    // result xmm1 is marked as alive


    // renamable $xmm1 = nofpexcept SUBPDrm killed renamable $xmm1(tied-def 0), $rip, 1, $noreg, %const.1, $noreg, implicit $mxcsr :: (load (s128) from constant-pool)
    // operand 0 is xmm1
    // operand 0(xmm1) is the same as its tied destination
    scratch_xmm1.alloc_from_bank(1);
    // operand 1 is a memory operand
    FeMem inst2_op1;
    // operand is a constant-pool reference
    SymRef inst2_op1_sym = this->sym_u64tof64_cp1;
    if (inst2_op1_sym == Assembler::INVALID_SYM_REF) [[unlikely]] {
        const std::array<u8, 16> data = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x43, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x30, 0x45};
        inst2_op1_sym = derived()->assembler.sym_def_data("", data, 16, true, false, true, false);
        this->sym_u64tof64_cp1 = inst2_op1_sym;
    }
    inst2_op1 = FE_MEM(FE_IP, 0, FE_NOREG, 0);

    ASMD(SSE_SUBPDrm, scratch_xmm1.cur_reg, inst2_op1);
    derived()->assembler.reloc_text_pc32(inst2_op1_sym, derived()->assembler.text_cur_off() - 4, -4);
    // argument xmm1 is killed and marked as dead
    // result xmm1 is marked as alive


    // $xmm0 = MOVAPDrr $xmm1
    // aliasing xmm0 to xmm1


    // renamable $xmm0 = UNPCKHPDrr killed renamable $xmm0(tied-def 0), $xmm1
    // operand 0 is xmm0
    // xmm0 is an alias for xmm1
    // operand 0(xmm1) has some references so copy it
    AsmReg inst4_op0 = scratch_xmm0.alloc_from_bank(1);
    if (has_avx()) {
        ASMD(VMOVUPD128rr, inst4_op0, scratch_xmm1.cur_reg);
    } else {
        ASMD(SSE_MOVUPDrr, inst4_op0, scratch_xmm1.cur_reg);
    }
    // operand 1 is xmm1
    // operand 1(xmm1) is a simple register
    AsmReg inst4_op1 = scratch_xmm1.cur_reg;

    // def xmm0 has not been allocated yet
    scratch_xmm0.alloc_from_bank(1);
    ASMD(SSE_UNPCKHPDrr, scratch_xmm0.cur_reg, inst4_op1);
    // argument xmm0 is killed and marked as dead
    // removing alias from xmm0 to xmm1
    // result xmm0 is marked as alive


    // renamable $xmm0 = nofpexcept ADDSDrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
    // operand 0 is xmm0
    // operand 0(xmm0) is the same as its tied destination
    scratch_xmm0.alloc_from_bank(1);
    // operand 1 is xmm1
    // operand 1(xmm1) is a simple register
    AsmReg inst5_op1 = scratch_xmm1.cur_reg;

    ASMD(SSE_ADDSDrr, scratch_xmm0.cur_reg, inst5_op1);
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // RET64 killed $xmm0
    // returning reg xmm0 as result_0
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_sext_8_to_32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function sext_8_to_32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVSX32rr8 killed renamable $dil, implicit killed $edi
    //   RET64 killed $eax
    // 
    // # End machine code for function sext_8_to_32.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $eax = MOVSX32rr8 killed renamable $dil, implicit killed $edi
    // MOVSXr32r8 has a preferred encoding as MOVSXr32m8 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr32m8, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr32r8, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_sext_8_to_64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function sext_8_to_64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $edi = KILL killed $edi, implicit-def $rdi
    //   renamable $rax = MOVSX64rr8 killed renamable $dil, implicit killed $rdi
    //   RET64 killed $rax
    // 
    // # End machine code for function sext_8_to_64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $edi = KILL killed $edi, implicit-def $rdi
    // KILL is a no-op


    // renamable $rax = MOVSX64rr8 killed renamable $dil, implicit killed $rdi
    // MOVSXr64r8 has a preferred encoding as MOVSXr64m8 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr64m8, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst1_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst1_op1 = scratch_ax.cur_reg;
        } else {
            inst1_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr64r8, scratch_ax.cur_reg, inst1_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_sext_16_to_32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function sext_16_to_32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVSX32rr16 killed renamable $di, implicit killed $edi
    //   RET64 killed $eax
    // 
    // # End machine code for function sext_16_to_32.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $eax = MOVSX32rr16 killed renamable $di, implicit killed $edi
    // MOVSXr32r16 has a preferred encoding as MOVSXr32m16 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr32m16, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr32r16, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_sext_16_to_64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function sext_16_to_64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $edi = KILL killed $edi, implicit-def $rdi
    //   renamable $rax = MOVSX64rr16 killed renamable $di, implicit killed $rdi
    //   RET64 killed $rax
    // 
    // # End machine code for function sext_16_to_64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $edi = KILL killed $edi, implicit-def $rdi
    // KILL is a no-op


    // renamable $rax = MOVSX64rr16 killed renamable $di, implicit killed $rdi
    // MOVSXr64r16 has a preferred encoding as MOVSXr64m16 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr64m16, scratch_ax.cur_reg, inst1_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst1_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst1_op1 = scratch_ax.cur_reg;
        } else {
            inst1_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr64r16, scratch_ax.cur_reg, inst1_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_sext_32_to_64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function sext_32_to_64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $rax = MOVSX64rr32 killed renamable $edi
    //   RET64 killed $rax
    // 
    // # End machine code for function sext_32_to_64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $rax = MOVSX64rr32 killed renamable $edi
    // MOVSXr64r32 has a preferred encoding as MOVSXr64m32 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr64m32, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVSXr64r32, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_sext_arbitrary_to_32(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function sext_arbitrary_to_32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $esi
    //   $ecx = MOV32rr killed $esi
    //   $eax = MOV32rr killed $edi
    //   renamable $eax = SHL32rCL killed renamable $eax(tied-def 0), implicit-def dead $eflags, implicit $cl
    //   $cl = KILL killed renamable $cl, implicit killed $ecx
    //   renamable $eax = exact SAR32rCL killed renamable $eax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   RET64 killed $eax
    // 
    // # End machine code for function sext_arbitrary_to_32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    if (((!param_1.encodeable_as_imm8_sext()))) {
        scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1}, reg_backup_cx);
    }


    // $ecx = MOV32rr killed $esi
    // aliasing cx to si
    // source si is killed, all aliases redirected and marked as dead


    // $eax = MOV32rr killed $edi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $eax = SHL32rCL killed renamable $eax(tied-def 0), implicit-def dead $eflags, implicit $cl
    // SHL32rr has a preferred encoding as SHL32ri if possible
    if (param_1.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SHL32ri, scratch_ax.cur_reg, imm.const_u64);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is cx
        // cx is mapped to param_1
        // cx is an implicit operand, cannot salvage
        AsmReg inst2_op1_tmp = param_1.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst2_op1_tmp);

        ASMD(SHL32rr, scratch_ax.cur_reg, scratch_cx.cur_reg);
    }
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // $cl = KILL killed renamable $cl, implicit killed $ecx
    // KILL is a no-op


    // renamable $eax = exact SAR32rCL killed renamable $eax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // SAR32rr has a preferred encoding as SAR32ri if possible
    if (param_1.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SAR32ri, scratch_ax.cur_reg, imm.const_u64);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is cx
        // cx is mapped to param_1
        // cx is an implicit operand, cannot salvage
        AsmReg inst4_op1_tmp = param_1.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst4_op1_tmp);

        ASMD(SAR32rr, scratch_ax.cur_reg, scratch_cx.cur_reg);
    }
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_sext_arbitrary_to_64(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function sext_arbitrary_to_64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $esi
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $esi, $rdi
    //   $ecx = MOV32rr killed $esi
    //   $rax = MOV64rr killed $rdi
    //   renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit $cl
    //   $cl = KILL killed renamable $cl, implicit killed $ecx
    //   renamable $rax = exact SAR64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    //   RET64 killed $rax
    // 
    // # End machine code for function sext_arbitrary_to_64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    FixedRegBackup reg_backup_cx = {.scratch = ScratchReg{derived()}};
    if (((!param_1.encodeable_as_imm8_sext()))) {
        scratch_alloc_specific(AsmReg::CX, scratch_cx, {&param_0, &param_1}, reg_backup_cx);
    }


    // $ecx = MOV32rr killed $esi
    // aliasing cx to si
    // source si is killed, all aliases redirected and marked as dead


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $rax = SHL64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit $cl
    // SHL64rr has a preferred encoding as SHL64ri if possible
    if (param_1.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SHL64ri, scratch_ax.cur_reg, imm.const_u64);
    } else {
        // operand 0 is ax
        // ax is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_1
        // cx is an implicit operand, cannot salvage
        AsmReg inst2_op1_tmp = param_1.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst2_op1_tmp);

        ASMD(SHL64rr, scratch_ax.cur_reg, scratch_cx.cur_reg);
    }
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // $cl = KILL killed renamable $cl, implicit killed $ecx
    // KILL is a no-op


    // renamable $rax = exact SAR64rCL killed renamable $rax(tied-def 0), implicit-def dead $eflags, implicit killed $cl
    // SAR64rr has a preferred encoding as SAR64ri if possible
    if (param_1.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_1.imm();

        ASMD(SAR64ri, scratch_ax.cur_reg, imm.const_u64);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is cx
        // cx is mapped to param_1
        // cx is an implicit operand, cannot salvage
        AsmReg inst4_op1_tmp = param_1.as_reg(this);
        ASMD(MOV32rr, scratch_cx.cur_reg, inst4_op1_tmp);

        ASMD(SAR64rr, scratch_ax.cur_reg, scratch_cx.cur_reg);
    }
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    scratch_check_fixed_backup(scratch_cx, reg_backup_cx, false);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fill_with_sign64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function fill_with_sign64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   $rax = MOV64rr killed $rdi
    //   renamable $rax = SAR64ri killed renamable $rax(tied-def 0), 63, implicit-def dead $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function fill_with_sign64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // $rax = MOV64rr killed $rdi
    // aliasing ax to di
    // source di is killed, all aliases redirected and marked as dead


    // renamable $rax = SAR64ri killed renamable $rax(tied-def 0), 63, implicit-def dead $eflags
    // operand 0 is ax
    // ax is mapped to param_0
    // operand 0(param_0) is tied so try to salvage or materialize
    param_0.try_salvage_or_materialize(this, scratch_ax, 0, 8);
    // operand 1 is an immediate operand

    ASMD(SAR64ri, scratch_ax.cur_reg, 63);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_zext_8_to_32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function zext_8_to_32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVZX32rr8 killed renamable $dil, implicit killed $edi
    //   RET64 killed $eax
    // 
    // # End machine code for function zext_8_to_32.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $eax = MOVZX32rr8 killed renamable $dil, implicit killed $edi
    // MOVZXr32r8 has a preferred encoding as MOVZXr32m8 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32m8, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32r8, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_zext_16_to_32(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function zext_16_to_32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOVZX32rr16 killed renamable $di, implicit killed $edi
    //   RET64 killed $eax
    // 
    // # End machine code for function zext_16_to_32.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $eax = MOVZX32rr16 killed renamable $di, implicit killed $edi
    // MOVZXr32r16 has a preferred encoding as MOVZXr32m16 if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32m16, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        ASMD(MOVZXr32r16, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_zext_32_to_64(AsmOperand param_0, ScratchReg &result_0) {
    // # Machine code for function zext_32_to_64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $edi
    //   renamable $eax = MOV32rr killed renamable $edi, implicit-def $rax
    //   RET64 killed $rax
    // 
    // # End machine code for function zext_32_to_64.
    // 

    // Mapping di to param_0
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};


    // renamable $eax = MOV32rr killed renamable $edi, implicit-def $rax
    // MOV32rr has a preferred encoding as MOV32ri if possible
    if (param_0.encodeable_as_imm32_sext()) {
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
        ASMD(MOV32ri, scratch_ax.cur_reg, imm.const_u64);
    }    // MOV32rr has a preferred encoding as MOV32rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
        ASMD(MOV32rm, scratch_ax.cur_reg, inst0_op1);
    } else {
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst0_op1;
        if (param_0.try_salvage_if_nonalloc(scratch_ax, 0)) {
            inst0_op1 = scratch_ax.cur_reg;
        } else {
            inst0_op1 = param_0.as_reg(this);
        }

        // def ax has not been allocated yet
        scratch_ax.alloc_from_bank(0);
        // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
        ASMD(MOV32rr, scratch_ax.cur_reg, inst0_op1);
    }
    // argument di is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cmpxchg_u64_monotonic_monotonic(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function cmpxchg_u64_monotonic_monotonic: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rsi
    //   LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store monotonic monotonic (s64) on %ir.0)
    //   renamable $dl = SETCCr 4, implicit killed $eflags
    //   RET64 killed $rax, killed $dl
    // 
    // # End machine code for function cmpxchg_u64_monotonic_monotonic.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1, &param_2}, reg_backup_ax);


    // $rax = MOV64rr killed $rsi
    // aliasing ax to si
    // source si is killed, all aliases redirected and marked as dead


    // LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store monotonic monotonic (s64) on %ir.0)
    // operand 0 is a memory operand
    FeMem inst1_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst1_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst1_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is dx
    // dx is mapped to param_2
    AsmReg inst1_op1 = param_2.as_reg(this);
    // Handling implicit operand ax
    // Need to break alias from ax to operand param_1 and copy the value
    AsmReg inst1_op8_tmp = param_1.as_reg(this);
    ASMD(MOV64rr, scratch_ax.cur_reg, inst1_op8_tmp);

    ASMD(LOCK_CMPXCHG64mr, inst1_op0, inst1_op1);
    // argument di is killed and marked as dead
    // argument dx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $dl = SETCCr 4, implicit killed $eflags

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(SETZ8r, scratch_dx.cur_reg);
    // result dx is marked as alive


    // RET64 killed $rax, killed $dl
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cmpxchg_u64_acquire_monotonic(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function cmpxchg_u64_acquire_monotonic: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rsi
    //   LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store acquire monotonic (s64) on %ir.0)
    //   renamable $dl = SETCCr 4, implicit killed $eflags
    //   RET64 killed $rax, killed $dl
    // 
    // # End machine code for function cmpxchg_u64_acquire_monotonic.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1, &param_2}, reg_backup_ax);


    // $rax = MOV64rr killed $rsi
    // aliasing ax to si
    // source si is killed, all aliases redirected and marked as dead


    // LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store acquire monotonic (s64) on %ir.0)
    // operand 0 is a memory operand
    FeMem inst1_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst1_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst1_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is dx
    // dx is mapped to param_2
    AsmReg inst1_op1 = param_2.as_reg(this);
    // Handling implicit operand ax
    // Need to break alias from ax to operand param_1 and copy the value
    AsmReg inst1_op8_tmp = param_1.as_reg(this);
    ASMD(MOV64rr, scratch_ax.cur_reg, inst1_op8_tmp);

    ASMD(LOCK_CMPXCHG64mr, inst1_op0, inst1_op1);
    // argument di is killed and marked as dead
    // argument dx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $dl = SETCCr 4, implicit killed $eflags

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(SETZ8r, scratch_dx.cur_reg);
    // result dx is marked as alive


    // RET64 killed $rax, killed $dl
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cmpxchg_u64_acquire_acquire(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function cmpxchg_u64_acquire_acquire: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rsi
    //   LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store acquire acquire (s64) on %ir.0)
    //   renamable $dl = SETCCr 4, implicit killed $eflags
    //   RET64 killed $rax, killed $dl
    // 
    // # End machine code for function cmpxchg_u64_acquire_acquire.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1, &param_2}, reg_backup_ax);


    // $rax = MOV64rr killed $rsi
    // aliasing ax to si
    // source si is killed, all aliases redirected and marked as dead


    // LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store acquire acquire (s64) on %ir.0)
    // operand 0 is a memory operand
    FeMem inst1_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst1_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst1_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is dx
    // dx is mapped to param_2
    AsmReg inst1_op1 = param_2.as_reg(this);
    // Handling implicit operand ax
    // Need to break alias from ax to operand param_1 and copy the value
    AsmReg inst1_op8_tmp = param_1.as_reg(this);
    ASMD(MOV64rr, scratch_ax.cur_reg, inst1_op8_tmp);

    ASMD(LOCK_CMPXCHG64mr, inst1_op0, inst1_op1);
    // argument di is killed and marked as dead
    // argument dx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $dl = SETCCr 4, implicit killed $eflags

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(SETZ8r, scratch_dx.cur_reg);
    // result dx is marked as alive


    // RET64 killed $rax, killed $dl
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cmpxchg_u64_release_monotonic(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function cmpxchg_u64_release_monotonic: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rsi
    //   LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store release monotonic (s64) on %ir.0)
    //   renamable $dl = SETCCr 4, implicit killed $eflags
    //   RET64 killed $rax, killed $dl
    // 
    // # End machine code for function cmpxchg_u64_release_monotonic.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1, &param_2}, reg_backup_ax);


    // $rax = MOV64rr killed $rsi
    // aliasing ax to si
    // source si is killed, all aliases redirected and marked as dead


    // LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store release monotonic (s64) on %ir.0)
    // operand 0 is a memory operand
    FeMem inst1_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst1_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst1_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is dx
    // dx is mapped to param_2
    AsmReg inst1_op1 = param_2.as_reg(this);
    // Handling implicit operand ax
    // Need to break alias from ax to operand param_1 and copy the value
    AsmReg inst1_op8_tmp = param_1.as_reg(this);
    ASMD(MOV64rr, scratch_ax.cur_reg, inst1_op8_tmp);

    ASMD(LOCK_CMPXCHG64mr, inst1_op0, inst1_op1);
    // argument di is killed and marked as dead
    // argument dx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $dl = SETCCr 4, implicit killed $eflags

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(SETZ8r, scratch_dx.cur_reg);
    // result dx is marked as alive


    // RET64 killed $rax, killed $dl
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cmpxchg_u64_release_acquire(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function cmpxchg_u64_release_acquire: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rsi
    //   LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store release acquire (s64) on %ir.0)
    //   renamable $dl = SETCCr 4, implicit killed $eflags
    //   RET64 killed $rax, killed $dl
    // 
    // # End machine code for function cmpxchg_u64_release_acquire.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1, &param_2}, reg_backup_ax);


    // $rax = MOV64rr killed $rsi
    // aliasing ax to si
    // source si is killed, all aliases redirected and marked as dead


    // LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store release acquire (s64) on %ir.0)
    // operand 0 is a memory operand
    FeMem inst1_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst1_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst1_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is dx
    // dx is mapped to param_2
    AsmReg inst1_op1 = param_2.as_reg(this);
    // Handling implicit operand ax
    // Need to break alias from ax to operand param_1 and copy the value
    AsmReg inst1_op8_tmp = param_1.as_reg(this);
    ASMD(MOV64rr, scratch_ax.cur_reg, inst1_op8_tmp);

    ASMD(LOCK_CMPXCHG64mr, inst1_op0, inst1_op1);
    // argument di is killed and marked as dead
    // argument dx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $dl = SETCCr 4, implicit killed $eflags

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(SETZ8r, scratch_dx.cur_reg);
    // result dx is marked as alive


    // RET64 killed $rax, killed $dl
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cmpxchg_u64_acqrel_monotonic(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function cmpxchg_u64_acqrel_monotonic: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rsi
    //   LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store acq_rel monotonic (s64) on %ir.0)
    //   renamable $dl = SETCCr 4, implicit killed $eflags
    //   RET64 killed $rax, killed $dl
    // 
    // # End machine code for function cmpxchg_u64_acqrel_monotonic.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1, &param_2}, reg_backup_ax);


    // $rax = MOV64rr killed $rsi
    // aliasing ax to si
    // source si is killed, all aliases redirected and marked as dead


    // LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store acq_rel monotonic (s64) on %ir.0)
    // operand 0 is a memory operand
    FeMem inst1_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst1_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst1_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is dx
    // dx is mapped to param_2
    AsmReg inst1_op1 = param_2.as_reg(this);
    // Handling implicit operand ax
    // Need to break alias from ax to operand param_1 and copy the value
    AsmReg inst1_op8_tmp = param_1.as_reg(this);
    ASMD(MOV64rr, scratch_ax.cur_reg, inst1_op8_tmp);

    ASMD(LOCK_CMPXCHG64mr, inst1_op0, inst1_op1);
    // argument di is killed and marked as dead
    // argument dx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $dl = SETCCr 4, implicit killed $eflags

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(SETZ8r, scratch_dx.cur_reg);
    // result dx is marked as alive


    // RET64 killed $rax, killed $dl
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cmpxchg_u64_acqrel_acquire(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function cmpxchg_u64_acqrel_acquire: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rsi
    //   LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store acq_rel acquire (s64) on %ir.0)
    //   renamable $dl = SETCCr 4, implicit killed $eflags
    //   RET64 killed $rax, killed $dl
    // 
    // # End machine code for function cmpxchg_u64_acqrel_acquire.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1, &param_2}, reg_backup_ax);


    // $rax = MOV64rr killed $rsi
    // aliasing ax to si
    // source si is killed, all aliases redirected and marked as dead


    // LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store acq_rel acquire (s64) on %ir.0)
    // operand 0 is a memory operand
    FeMem inst1_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst1_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst1_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is dx
    // dx is mapped to param_2
    AsmReg inst1_op1 = param_2.as_reg(this);
    // Handling implicit operand ax
    // Need to break alias from ax to operand param_1 and copy the value
    AsmReg inst1_op8_tmp = param_1.as_reg(this);
    ASMD(MOV64rr, scratch_ax.cur_reg, inst1_op8_tmp);

    ASMD(LOCK_CMPXCHG64mr, inst1_op0, inst1_op1);
    // argument di is killed and marked as dead
    // argument dx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $dl = SETCCr 4, implicit killed $eflags

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(SETZ8r, scratch_dx.cur_reg);
    // result dx is marked as alive


    // RET64 killed $rax, killed $dl
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cmpxchg_u64_seqcst_monotonic(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function cmpxchg_u64_seqcst_monotonic: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rsi
    //   LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store seq_cst monotonic (s64) on %ir.0)
    //   renamable $dl = SETCCr 4, implicit killed $eflags
    //   RET64 killed $rax, killed $dl
    // 
    // # End machine code for function cmpxchg_u64_seqcst_monotonic.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1, &param_2}, reg_backup_ax);


    // $rax = MOV64rr killed $rsi
    // aliasing ax to si
    // source si is killed, all aliases redirected and marked as dead


    // LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store seq_cst monotonic (s64) on %ir.0)
    // operand 0 is a memory operand
    FeMem inst1_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst1_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst1_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is dx
    // dx is mapped to param_2
    AsmReg inst1_op1 = param_2.as_reg(this);
    // Handling implicit operand ax
    // Need to break alias from ax to operand param_1 and copy the value
    AsmReg inst1_op8_tmp = param_1.as_reg(this);
    ASMD(MOV64rr, scratch_ax.cur_reg, inst1_op8_tmp);

    ASMD(LOCK_CMPXCHG64mr, inst1_op0, inst1_op1);
    // argument di is killed and marked as dead
    // argument dx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $dl = SETCCr 4, implicit killed $eflags

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(SETZ8r, scratch_dx.cur_reg);
    // result dx is marked as alive


    // RET64 killed $rax, killed $dl
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cmpxchg_u64_seqcst_acquire(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function cmpxchg_u64_seqcst_acquire: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rsi
    //   LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store seq_cst acquire (s64) on %ir.0)
    //   renamable $dl = SETCCr 4, implicit killed $eflags
    //   RET64 killed $rax, killed $dl
    // 
    // # End machine code for function cmpxchg_u64_seqcst_acquire.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1, &param_2}, reg_backup_ax);


    // $rax = MOV64rr killed $rsi
    // aliasing ax to si
    // source si is killed, all aliases redirected and marked as dead


    // LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store seq_cst acquire (s64) on %ir.0)
    // operand 0 is a memory operand
    FeMem inst1_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst1_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst1_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is dx
    // dx is mapped to param_2
    AsmReg inst1_op1 = param_2.as_reg(this);
    // Handling implicit operand ax
    // Need to break alias from ax to operand param_1 and copy the value
    AsmReg inst1_op8_tmp = param_1.as_reg(this);
    ASMD(MOV64rr, scratch_ax.cur_reg, inst1_op8_tmp);

    ASMD(LOCK_CMPXCHG64mr, inst1_op0, inst1_op1);
    // argument di is killed and marked as dead
    // argument dx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $dl = SETCCr 4, implicit killed $eflags

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(SETZ8r, scratch_dx.cur_reg);
    // result dx is marked as alive


    // RET64 killed $rax, killed $dl
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_cmpxchg_u64_seqcst_seqcst(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function cmpxchg_u64_seqcst_seqcst: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $rdi, $rdx, $rsi
    //   $rax = MOV64rr killed $rsi
    //   LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store seq_cst seq_cst (s64) on %ir.0)
    //   renamable $dl = SETCCr 4, implicit killed $eflags
    //   RET64 killed $rax, killed $dl
    // 
    // # End machine code for function cmpxchg_u64_seqcst_seqcst.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    FixedRegBackup reg_backup_ax = {.scratch = ScratchReg{derived()}};
    scratch_alloc_specific(AsmReg::AX, scratch_ax, {&param_0, &param_1, &param_2}, reg_backup_ax);


    // $rax = MOV64rr killed $rsi
    // aliasing ax to si
    // source si is killed, all aliases redirected and marked as dead


    // LCMPXCHG64 killed renamable $rdi, 1, $noreg, 0, $noreg, killed renamable $rdx, implicit-def $rax, implicit-def $eflags, implicit killed $rax :: (load store seq_cst seq_cst (s64) on %ir.0)
    // operand 0 is a memory operand
    FeMem inst1_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst1_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst1_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }
    // operand 1 is dx
    // dx is mapped to param_2
    AsmReg inst1_op1 = param_2.as_reg(this);
    // Handling implicit operand ax
    // Need to break alias from ax to operand param_1 and copy the value
    AsmReg inst1_op8_tmp = param_1.as_reg(this);
    ASMD(MOV64rr, scratch_ax.cur_reg, inst1_op8_tmp);

    ASMD(LOCK_CMPXCHG64mr, inst1_op0, inst1_op1);
    // argument di is killed and marked as dead
    // argument dx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $dl = SETCCr 4, implicit killed $eflags

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(SETZ8r, scratch_dx.cur_reg);
    // result dx is marked as alive


    // RET64 killed $rax, killed $dl
    scratch_check_fixed_backup(scratch_ax, reg_backup_ax, true);
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_select_i32(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0) {
    // # Machine code for function select_i32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $esi, $edx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $edi, $edx, $esi
    //   $eax = MOV32rr killed $esi
    //   TEST8ri killed renamable $dil, 1, implicit-def $eflags, implicit killed $edi
    //   renamable $eax = CMOV32rr killed renamable $eax(tied-def 0), killed renamable $edx, 4, implicit killed $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function select_i32.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};


    // $eax = MOV32rr killed $esi
    // aliasing ax to si
    // source si is killed, all aliases redirected and marked as dead


    // TEST8ri killed renamable $dil, 1, implicit-def $eflags, implicit killed $edi
    // TEST8ri has a preferred encoding as TEST8mi if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst1_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // operand 1 is an immediate operand
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8mi, inst1_op0, 1);
    } else {
        // operand 0 is di
        // di is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is an immediate operand
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8ri, inst1_op0, 1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead


    // renamable $eax = CMOV32rr killed renamable $eax(tied-def 0), killed renamable $edx, 4, implicit killed $eflags
    // CMOVZ32rr has a preferred encoding as CMOVZ32rm if possible
    if (param_2.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is a memory operand
        // dx is base for memory operand to use
        // dx maps to operand param_2 which is known to be a ValuePartRef
        FeMem inst2_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_2.val_ref_frame_off());

        ASMD(CMOVZ32rm, scratch_ax.cur_reg, inst2_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_ax, 0, 4);
        // operand 1 is dx
        // dx is mapped to param_2
        AsmReg inst2_op1 = param_2.as_reg(this);

        ASMD(CMOVZ32rr, scratch_ax.cur_reg, inst2_op1);
    }
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_select_i64(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0) {
    // # Machine code for function select_i64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $rsi, $rdx
    // 
    // bb.0 (%ir-block.3):
    //   liveins: $edi, $rdx, $rsi
    //   $rax = MOV64rr killed $rsi
    //   TEST8ri killed renamable $dil, 1, implicit-def $eflags, implicit killed $edi
    //   renamable $rax = CMOV64rr killed renamable $rax(tied-def 0), killed renamable $rdx, 4, implicit killed $eflags
    //   RET64 killed $rax
    // 
    // # End machine code for function select_i64.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};


    // $rax = MOV64rr killed $rsi
    // aliasing ax to si
    // source si is killed, all aliases redirected and marked as dead


    // TEST8ri killed renamable $dil, 1, implicit-def $eflags, implicit killed $edi
    // TEST8ri has a preferred encoding as TEST8mi if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst1_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // operand 1 is an immediate operand
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8mi, inst1_op0, 1);
    } else {
        // operand 0 is di
        // di is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is an immediate operand
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8ri, inst1_op0, 1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead


    // renamable $rax = CMOV64rr killed renamable $rax(tied-def 0), killed renamable $rdx, 4, implicit killed $eflags
    // CMOVZ64rr has a preferred encoding as CMOVZ64rm if possible
    if (param_2.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is a memory operand
        // dx is base for memory operand to use
        // dx maps to operand param_2 which is known to be a ValuePartRef
        FeMem inst2_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_2.val_ref_frame_off());

        ASMD(CMOVZ64rm, scratch_ax.cur_reg, inst2_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is dx
        // dx is mapped to param_2
        AsmReg inst2_op1 = param_2.as_reg(this);

        ASMD(CMOVZ64rr, scratch_ax.cur_reg, inst2_op1);
    }
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $rax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_select_i128(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, AsmOperand param_3, AsmOperand param_4, ScratchReg &result_0, ScratchReg &result_1) {
    // # Machine code for function select_i128: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $rsi, $rdx, $rcx, $r8
    // 
    // bb.0 (%ir-block.5):
    //   liveins: $edi, $rcx, $rdx, $rsi, $r8
    //   $rax = MOV64rr killed $rsi
    //   TEST8ri killed renamable $dil, 1, implicit-def $eflags, implicit killed $edi
    //   renamable $rax = CMOV64rr killed renamable $rax(tied-def 0), killed renamable $rcx, 4, implicit $eflags
    //   renamable $rdx = CMOV64rr killed renamable $rdx(tied-def 0), killed renamable $r8, 4, implicit killed $eflags
    //   RET64 killed $rax, killed $rdx
    // 
    // # End machine code for function select_i128.
    // 

    // Mapping di to param_0
    // Mapping si to param_1
    // Mapping dx to param_2
    // Mapping cx to param_3
    // Mapping r8 to param_4
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_si{derived()};
    ScratchReg scratch_cx{derived()};
    ScratchReg scratch_r8{derived()};


    // $rax = MOV64rr killed $rsi
    // aliasing ax to si
    // source si is killed, all aliases redirected and marked as dead


    // TEST8ri killed renamable $dil, 1, implicit-def $eflags, implicit killed $edi
    // TEST8ri has a preferred encoding as TEST8mi if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst1_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // operand 1 is an immediate operand
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8mi, inst1_op0, 1);
    } else {
        // operand 0 is di
        // di is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is an immediate operand
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8ri, inst1_op0, 1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead


    // renamable $rax = CMOV64rr killed renamable $rax(tied-def 0), killed renamable $rcx, 4, implicit $eflags
    // CMOVZ64rr has a preferred encoding as CMOVZ64rm if possible
    if (param_3.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // ax is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is a memory operand
        // cx is base for memory operand to use
        // cx maps to operand param_3 which is known to be a ValuePartRef
        FeMem inst2_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_3.val_ref_frame_off());

        ASMD(CMOVZ64rm, scratch_ax.cur_reg, inst2_op1);
    } else {
        // operand 0 is ax
        // ax is mapped to param_1
        // operand 0(param_1) is tied so try to salvage or materialize
        param_1.try_salvage_or_materialize(this, scratch_ax, 0, 8);
        // operand 1 is cx
        // cx is mapped to param_3
        AsmReg inst2_op1 = param_3.as_reg(this);

        ASMD(CMOVZ64rr, scratch_ax.cur_reg, inst2_op1);
    }
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // renamable $rdx = CMOV64rr killed renamable $rdx(tied-def 0), killed renamable $r8, 4, implicit killed $eflags
    // CMOVZ64rr has a preferred encoding as CMOVZ64rm if possible
    if (param_4.val_ref_prefers_mem_enc()) {
        // operand 0 is dx
        // dx is mapped to param_2
        // operand 0(param_2) is tied so try to salvage or materialize
        param_2.try_salvage_or_materialize(this, scratch_dx, 0, 8);
        // operand 1 is a memory operand
        // r8 is base for memory operand to use
        // r8 maps to operand param_4 which is known to be a ValuePartRef
        FeMem inst3_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_4.val_ref_frame_off());

        ASMD(CMOVZ64rm, scratch_dx.cur_reg, inst3_op1);
    } else {
        // operand 0 is dx
        // dx is mapped to param_2
        // operand 0(param_2) is tied so try to salvage or materialize
        param_2.try_salvage_or_materialize(this, scratch_dx, 0, 8);
        // operand 1 is r8
        // r8 is mapped to param_4
        AsmReg inst3_op1 = param_4.as_reg(this);

        ASMD(CMOVZ64rr, scratch_dx.cur_reg, inst3_op1);
    }
    // argument dx is killed and marked as dead
    // argument r8 is killed and marked as dead
    // result dx is marked as alive


    // RET64 killed $rax, killed $rdx
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    // returning reg dx as result_1
    result_1 = std::move(scratch_dx);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_select_f32(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0) {
    // # Machine code for function select_f32: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.3):
    //   successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)
    //   liveins: $edi, $xmm0, $xmm1
    //   TEST8ri killed renamable $dil, 1, implicit-def $eflags, implicit killed $edi
    //   JCC_1 %bb.2, 4, implicit killed $eflags
    // 
    // bb.1 (%ir-block.3):
    // ; predecessors: %bb.0
    //   successors: %bb.2(0x80000000); %bb.2(100.00%)
    //   liveins: $xmm0
    //   $xmm1 = MOVAPSrr killed $xmm0
    // 
    // bb.2 (%ir-block.3):
    // ; predecessors: %bb.0, %bb.1
    //   liveins: $xmm1
    //   $xmm0 = MOVAPSrr killed $xmm1
    //   RET64 killed $xmm0
    // 
    // # End machine code for function select_f32.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    // Mapping xmm1 to param_2

    // Creating label for convergence point at the end of the function
    Label ret_converge_label = derived()->assembler.label_create();
    // Creating labels for blocks that are jump targets
    Label block1_label = derived()->assembler.label_create();
    Label block2_label = derived()->assembler.label_create();

    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // TEST8ri killed renamable $dil, 1, implicit-def $eflags, implicit killed $edi
    // TEST8ri has a preferred encoding as TEST8mi if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // operand 1 is an immediate operand
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8mi, inst0_op0, 1);
    } else {
        // operand 0 is di
        // di is mapped to param_0
        AsmReg inst0_op0 = param_0.as_reg(this);
        // operand 1 is an immediate operand
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8ri, inst0_op0, 1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead


    // JCC_1 %bb.2, 4, implicit killed $eflags
    // Preparing jump to other block
    // xmm0 is live-out
    // xmm1 is live-out
    // Handling register xmm1
    // xmm1 is mapped to operand param_2, materializing it
    param_2.try_salvage_or_materialize(this, scratch_xmm1, 1, 16);
    // Handling register xmm0
    // xmm0 is mapped to operand param_1, materializing it
    param_1.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
    // Resetting the state of di as it is unused for the rest of the function
    derived()->generate_raw_jump(CompilerX64::Jump::je, block2_label);


    // Starting encoding of block 1
    derived()->assembler.label_place(block1_label);
    // Marking xmm0 as live


    // $xmm1 = MOVAPSrr killed $xmm0
    // aliasing xmm1 to xmm0
    // source xmm0 is killed, all aliases redirected and marked as dead
    // xmm1 is live-out
    // xmm1 is live-out and an alias, need to resolve
    // xmm1 is an alias for xmm0
    // removing alias from xmm1 to xmm0
    if (has_avx()) {
        ASMD(VMOVUPD128rr, scratch_xmm1.cur_reg, scratch_xmm0.cur_reg);
    } else {
        ASMD(SSE_MOVUPDrr, scratch_xmm1.cur_reg, scratch_xmm0.cur_reg);
    }
    // Starting encoding of block 2
    derived()->assembler.label_place(block2_label);
    // Marking xmm1 as live


    // $xmm0 = MOVAPSrr killed $xmm1
    // aliasing xmm0 to xmm1
    // source xmm1 is killed, all aliases redirected and marked as dead


    // RET64 killed $xmm0
    // handling return for xmm0
    // xmm0 is an alias for xmm1
    if (has_avx()) {
        ASMD(VMOVUPD128rr, scratch_xmm0.cur_reg, scratch_xmm1.cur_reg);
    } else {
        ASMD(SSE_MOVUPDrr, scratch_xmm0.cur_reg, scratch_xmm1.cur_reg);
    }
    // Omitting jump to convergence as this is the last block
    // Resetting alias status for xmm0

    // Placing the convergence point for registers here
    derived()->assembler.label_place(ret_converge_label);
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_select_f64(AsmOperand param_0, AsmOperand param_1, AsmOperand param_2, ScratchReg &result_0) {
    // # Machine code for function select_f64: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.3):
    //   successors: %bb.1(0x40000000), %bb.2(0x40000000); %bb.1(50.00%), %bb.2(50.00%)
    //   liveins: $edi, $xmm0, $xmm1
    //   TEST8ri killed renamable $dil, 1, implicit-def $eflags, implicit killed $edi
    //   JCC_1 %bb.2, 4, implicit killed $eflags
    // 
    // bb.1 (%ir-block.3):
    // ; predecessors: %bb.0
    //   successors: %bb.2(0x80000000); %bb.2(100.00%)
    //   liveins: $xmm0
    //   $xmm1 = MOVAPSrr killed $xmm0
    // 
    // bb.2 (%ir-block.3):
    // ; predecessors: %bb.0, %bb.1
    //   liveins: $xmm1
    //   $xmm0 = MOVAPSrr killed $xmm1
    //   RET64 killed $xmm0
    // 
    // # End machine code for function select_f64.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    // Mapping xmm1 to param_2

    // Creating label for convergence point at the end of the function
    Label ret_converge_label = derived()->assembler.label_create();
    // Creating labels for blocks that are jump targets
    Label block1_label = derived()->assembler.label_create();
    Label block2_label = derived()->assembler.label_create();

    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // TEST8ri killed renamable $dil, 1, implicit-def $eflags, implicit killed $edi
    // TEST8ri has a preferred encoding as TEST8mi if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst0_op0 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // operand 1 is an immediate operand
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8mi, inst0_op0, 1);
    } else {
        // operand 0 is di
        // di is mapped to param_0
        AsmReg inst0_op0 = param_0.as_reg(this);
        // operand 1 is an immediate operand
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(TEST8ri, inst0_op0, 1);
    }
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead


    // JCC_1 %bb.2, 4, implicit killed $eflags
    // Preparing jump to other block
    // xmm0 is live-out
    // xmm1 is live-out
    // Handling register xmm1
    // xmm1 is mapped to operand param_2, materializing it
    param_2.try_salvage_or_materialize(this, scratch_xmm1, 1, 16);
    // Handling register xmm0
    // xmm0 is mapped to operand param_1, materializing it
    param_1.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
    // Resetting the state of di as it is unused for the rest of the function
    derived()->generate_raw_jump(CompilerX64::Jump::je, block2_label);


    // Starting encoding of block 1
    derived()->assembler.label_place(block1_label);
    // Marking xmm0 as live


    // $xmm1 = MOVAPSrr killed $xmm0
    // aliasing xmm1 to xmm0
    // source xmm0 is killed, all aliases redirected and marked as dead
    // xmm1 is live-out
    // xmm1 is live-out and an alias, need to resolve
    // xmm1 is an alias for xmm0
    // removing alias from xmm1 to xmm0
    if (has_avx()) {
        ASMD(VMOVUPD128rr, scratch_xmm1.cur_reg, scratch_xmm0.cur_reg);
    } else {
        ASMD(SSE_MOVUPDrr, scratch_xmm1.cur_reg, scratch_xmm0.cur_reg);
    }
    // Starting encoding of block 2
    derived()->assembler.label_place(block2_label);
    // Marking xmm1 as live


    // $xmm0 = MOVAPSrr killed $xmm1
    // aliasing xmm0 to xmm1
    // source xmm1 is killed, all aliases redirected and marked as dead


    // RET64 killed $xmm0
    // handling return for xmm0
    // xmm0 is an alias for xmm1
    if (has_avx()) {
        ASMD(VMOVUPD128rr, scratch_xmm0.cur_reg, scratch_xmm1.cur_reg);
    } else {
        ASMD(SSE_MOVUPDrr, scratch_xmm0.cur_reg, scratch_xmm1.cur_reg);
    }
    // Omitting jump to convergence as this is the last block
    // Resetting alias status for xmm0

    // Placing the convergence point for registers here
    derived()->assembler.label_place(ret_converge_label);
    result_0 = std::move(scratch_xmm0);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_oeq_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_oeq_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $xmm0 = nofpexcept CMPSSrri killed renamable $xmm0(tied-def 0), killed renamable $xmm1, 0, implicit $mxcsr
    //   renamable $eax = MOVSS2DIrr killed renamable $xmm0
    //   renamable $eax = AND32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_oeq_float.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept CMPSSrri killed renamable $xmm0(tied-def 0), killed renamable $xmm1, 0, implicit $mxcsr
    // SSE_CMPSSrri has a preferred encoding as SSE_CMPSSrmi if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());
        // operand 2 is an immediate operand

        ASMD(SSE_CMPSSrmi, scratch_xmm0.cur_reg, inst0_op1, 0);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);
        // operand 2 is an immediate operand

        ASMD(SSE_CMPSSrri, scratch_xmm0.cur_reg, inst0_op1, 0);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // renamable $eax = MOVSS2DIrr killed renamable $xmm0
    // operand 1 is xmm0
    // operand 1(xmm0) is a simple register
    AsmReg inst1_op1 = scratch_xmm0.cur_reg;

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVD_X2Grr, scratch_ax.cur_reg, inst1_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = AND32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(AND32ri, scratch_ax.cur_reg, 1);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_ogt_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_ogt_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 7, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_ogt_float.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISSrr has a preferred encoding as SSE_UCOMISSrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISSrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISSrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 7, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETA8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_oge_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_oge_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 3, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_oge_float.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISSrr has a preferred encoding as SSE_UCOMISSrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISSrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISSrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 3, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETNC8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_olt_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_olt_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISSrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 7, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_olt_float.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISSrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISSrr has a preferred encoding as SSE_UCOMISSrm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        ASMD(SSE_UCOMISSrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op1 = param_0.as_reg(this);

        ASMD(SSE_UCOMISSrr, inst1_op0, inst1_op1);
    }
    // argument xmm1 is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // renamable $al = SETCCr 7, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETA8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_ole_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_ole_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISSrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 3, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_ole_float.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISSrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISSrr has a preferred encoding as SSE_UCOMISSrm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        ASMD(SSE_UCOMISSrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op1 = param_0.as_reg(this);

        ASMD(SSE_UCOMISSrr, inst1_op0, inst1_op1);
    }
    // argument xmm1 is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // renamable $al = SETCCr 3, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETNC8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_one_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_one_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 5, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_one_float.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISSrr has a preferred encoding as SSE_UCOMISSrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISSrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISSrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 5, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETNZ8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_ord_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_ord_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 11, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_ord_float.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISSrr has a preferred encoding as SSE_UCOMISSrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISSrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISSrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 11, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETNP8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_ueq_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_ueq_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 4, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_ueq_float.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISSrr has a preferred encoding as SSE_UCOMISSrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISSrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISSrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 4, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETZ8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_ugt_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_ugt_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISSrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 2, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_ugt_float.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISSrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISSrr has a preferred encoding as SSE_UCOMISSrm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        ASMD(SSE_UCOMISSrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op1 = param_0.as_reg(this);

        ASMD(SSE_UCOMISSrr, inst1_op0, inst1_op1);
    }
    // argument xmm1 is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // renamable $al = SETCCr 2, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETC8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_uge_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_uge_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISSrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 6, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_uge_float.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISSrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISSrr has a preferred encoding as SSE_UCOMISSrm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        ASMD(SSE_UCOMISSrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op1 = param_0.as_reg(this);

        ASMD(SSE_UCOMISSrr, inst1_op0, inst1_op1);
    }
    // argument xmm1 is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // renamable $al = SETCCr 6, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETBE8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_ult_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_ult_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 2, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_ult_float.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISSrr has a preferred encoding as SSE_UCOMISSrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISSrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISSrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 2, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETC8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_ule_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_ule_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 6, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_ule_float.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISSrr has a preferred encoding as SSE_UCOMISSrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISSrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISSrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 6, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETBE8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_une_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_une_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $xmm0 = nofpexcept CMPSSrri killed renamable $xmm0(tied-def 0), killed renamable $xmm1, 4, implicit $mxcsr
    //   renamable $eax = MOVSS2DIrr killed renamable $xmm0
    //   renamable $eax = AND32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_une_float.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept CMPSSrri killed renamable $xmm0(tied-def 0), killed renamable $xmm1, 4, implicit $mxcsr
    // SSE_CMPSSrri has a preferred encoding as SSE_CMPSSrmi if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());
        // operand 2 is an immediate operand

        ASMD(SSE_CMPSSrmi, scratch_xmm0.cur_reg, inst0_op1, 4);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);
        // operand 2 is an immediate operand

        ASMD(SSE_CMPSSrri, scratch_xmm0.cur_reg, inst0_op1, 4);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // renamable $eax = MOVSS2DIrr killed renamable $xmm0
    // operand 1 is xmm0
    // operand 1(xmm0) is a simple register
    AsmReg inst1_op1 = scratch_xmm0.cur_reg;

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVD_X2Grr, scratch_ax.cur_reg, inst1_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = AND32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(AND32ri, scratch_ax.cur_reg, 1);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_uno_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_uno_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 10, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_uno_float.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISSrr has a preferred encoding as SSE_UCOMISSrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISSrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISSrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 10, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETP8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_oeq_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_oeq_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $xmm0 = nofpexcept CMPSDrri killed renamable $xmm0(tied-def 0), killed renamable $xmm1, 0, implicit $mxcsr
    //   renamable $rax = MOVSDto64rr killed renamable $xmm0
    //   renamable $eax = AND32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax
    //   $eax = KILL killed renamable $eax, implicit killed $rax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_oeq_double.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept CMPSDrri killed renamable $xmm0(tied-def 0), killed renamable $xmm1, 0, implicit $mxcsr
    // SSE_CMPSDrri has a preferred encoding as SSE_CMPSDrmi if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());
        // operand 2 is an immediate operand

        ASMD(SSE_CMPSDrmi, scratch_xmm0.cur_reg, inst0_op1, 0);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);
        // operand 2 is an immediate operand

        ASMD(SSE_CMPSDrri, scratch_xmm0.cur_reg, inst0_op1, 0);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // renamable $rax = MOVSDto64rr killed renamable $xmm0
    // operand 1 is xmm0
    // operand 1(xmm0) is a simple register
    AsmReg inst1_op1 = scratch_xmm0.cur_reg;

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVQ_X2Grr, scratch_ax.cur_reg, inst1_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = AND32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand
    // Handling implicit operand ax
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(AND32ri, scratch_ax.cur_reg, 1);
    // argument ax is killed and marked as dead
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // $eax = KILL killed renamable $eax, implicit killed $rax
    // KILL is a no-op


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_ogt_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_ogt_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 7, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_ogt_double.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISDrr has a preferred encoding as SSE_UCOMISDrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISDrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISDrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 7, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETA8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_oge_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_oge_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 3, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_oge_double.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISDrr has a preferred encoding as SSE_UCOMISDrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISDrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISDrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 3, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETNC8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_olt_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_olt_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISDrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 7, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_olt_double.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISDrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISDrr has a preferred encoding as SSE_UCOMISDrm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        ASMD(SSE_UCOMISDrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op1 = param_0.as_reg(this);

        ASMD(SSE_UCOMISDrr, inst1_op0, inst1_op1);
    }
    // argument xmm1 is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // renamable $al = SETCCr 7, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETA8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_ole_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_ole_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISDrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 3, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_ole_double.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISDrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISDrr has a preferred encoding as SSE_UCOMISDrm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        ASMD(SSE_UCOMISDrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op1 = param_0.as_reg(this);

        ASMD(SSE_UCOMISDrr, inst1_op0, inst1_op1);
    }
    // argument xmm1 is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // renamable $al = SETCCr 3, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETNC8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_one_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_one_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 5, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_one_double.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISDrr has a preferred encoding as SSE_UCOMISDrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISDrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISDrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 5, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETNZ8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_ord_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_ord_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 11, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_ord_double.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISDrr has a preferred encoding as SSE_UCOMISDrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISDrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISDrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 11, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETNP8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_ueq_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_ueq_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 4, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_ueq_double.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISDrr has a preferred encoding as SSE_UCOMISDrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISDrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISDrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 4, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETZ8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_ugt_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_ugt_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISDrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 2, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_ugt_double.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISDrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISDrr has a preferred encoding as SSE_UCOMISDrm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        ASMD(SSE_UCOMISDrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op1 = param_0.as_reg(this);

        ASMD(SSE_UCOMISDrr, inst1_op0, inst1_op1);
    }
    // argument xmm1 is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // renamable $al = SETCCr 2, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETC8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_uge_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_uge_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISDrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 6, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_uge_double.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISDrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISDrr has a preferred encoding as SSE_UCOMISDrm if possible
    if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());

        ASMD(SSE_UCOMISDrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op0 = param_1.as_reg(this);
        // operand 1 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op1 = param_0.as_reg(this);

        ASMD(SSE_UCOMISDrr, inst1_op0, inst1_op1);
    }
    // argument xmm1 is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // renamable $al = SETCCr 6, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETBE8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_ult_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_ult_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 2, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_ult_double.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISDrr has a preferred encoding as SSE_UCOMISDrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISDrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISDrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 2, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETC8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_ule_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_ule_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 6, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_ule_double.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISDrr has a preferred encoding as SSE_UCOMISDrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISDrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISDrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 6, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETBE8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_une_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_une_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $xmm0 = nofpexcept CMPSDrri killed renamable $xmm0(tied-def 0), killed renamable $xmm1, 4, implicit $mxcsr
    //   renamable $rax = MOVSDto64rr killed renamable $xmm0
    //   renamable $eax = AND32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax
    //   $eax = KILL killed renamable $eax, implicit killed $rax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_une_double.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm0 = nofpexcept CMPSDrri killed renamable $xmm0(tied-def 0), killed renamable $xmm1, 4, implicit $mxcsr
    // SSE_CMPSDrri has a preferred encoding as SSE_CMPSDrmi if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst0_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());
        // operand 2 is an immediate operand

        ASMD(SSE_CMPSDrmi, scratch_xmm0.cur_reg, inst0_op1, 4);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        // operand 0(param_0) is tied so try to salvage or materialize
        param_0.try_salvage_or_materialize(this, scratch_xmm0, 1, 16);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst0_op1 = param_1.as_reg(this);
        // operand 2 is an immediate operand

        ASMD(SSE_CMPSDrri, scratch_xmm0.cur_reg, inst0_op1, 4);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead
    // result xmm0 is marked as alive


    // renamable $rax = MOVSDto64rr killed renamable $xmm0
    // operand 1 is xmm0
    // operand 1(xmm0) is a simple register
    AsmReg inst1_op1 = scratch_xmm0.cur_reg;

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVQ_X2Grr, scratch_ax.cur_reg, inst1_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = AND32ri killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand
    // Handling implicit operand ax
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    // Ignoring implicit def RAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(AND32ri, scratch_ax.cur_reg, 1);
    // argument ax is killed and marked as dead
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // $eax = KILL killed renamable $eax, implicit killed $rax
    // KILL is a no-op


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_fcmp_uno_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function fcmp_uno_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $xmm0, $xmm1
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $xmm0, $xmm1
    //   renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    //   nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 10, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    //   RET64 killed $eax
    // 
    // # End machine code for function fcmp_uno_double.
    // 

    // Mapping xmm0 to param_0
    // Mapping xmm1 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
    // Skipping check for XOR32ri since associated use is undefined
    // Skipping check for XOR32rm since associated use is undefined
    // operand 0 is ax
    // operand is undef, just allocating scratch for it
    // operand is tied so no work needs to be done
    // operand 1 is ax
    // operand is undef, just allocating scratch for it
    AsmReg inst0_op1 = scratch_ax.alloc_from_bank(0);


    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(XOR32rr, scratch_ax.cur_reg, inst0_op1);
    // result ax is marked as alive


    // nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISDrr has a preferred encoding as SSE_UCOMISDrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is a memory operand
        // xmm1 is base for memory operand to use
        // xmm1 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISDrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm0
        // xmm0 is mapped to param_0
        AsmReg inst1_op0 = param_0.as_reg(this);
        // operand 1 is xmm1
        // xmm1 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISDrr, inst1_op0, inst1_op1);
    }
    // argument xmm0 is killed and marked as dead
    // argument xmm1 is killed and marked as dead


    // renamable $al = SETCCr 10, implicit killed $eflags, implicit killed $eax, implicit-def $eax
    // Handling implicit operand ax
    // Value is already in register, no need to copy

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    // Ignoring implicit def EAX as it exceeds the number of implicit defs in the MCInstrDesc
    ASMD(SETP8r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive
    // result ax is marked as alive


    // RET64 killed $eax
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_snan_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_snan_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $eax = MOVSS2DIrr killed renamable $xmm0
    //   renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    //   CMP32ri renamable $eax, 2143289344, implicit-def $eflags
    //   renamable $cl = SETCCr 12, implicit killed $eflags
    //   CMP32ri killed renamable $eax, 2139095041, implicit-def $eflags
    //   renamable $al = SETCCr 13, implicit killed $eflags
    //   renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $cl, implicit-def dead $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_snan_float.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $eax = MOVSS2DIrr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVD_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(AND32ri, scratch_ax.cur_reg, 2147483647);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // CMP32ri renamable $eax, 2143289344, implicit-def $eflags
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst2_op0 = scratch_ax.cur_reg;
    // operand 1 is an immediate operand

    ASMD(CMP32ri, inst2_op0, 2143289344);


    // renamable $cl = SETCCr 12, implicit killed $eflags

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(SETL8r, scratch_cx.cur_reg);
    // result cx is marked as alive


    // CMP32ri killed renamable $eax, 2139095041, implicit-def $eflags
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst4_op0 = scratch_ax.cur_reg;
    // operand 1 is an immediate operand

    ASMD(CMP32ri, inst4_op0, 2139095041);
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 13, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETGE8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $cl, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst6_op1 = scratch_cx.cur_reg;

    ASMD(AND8rr, scratch_ax.cur_reg, inst6_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst7_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst7_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst7_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst7_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_qnan_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_qnan_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $eax = MOVSS2DIrr killed renamable $xmm0
    //   renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    //   CMP32ri killed renamable $eax, 2143289344, implicit-def $eflags
    //   renamable $al = SETCCr 13, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_qnan_float.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVSS2DIrr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVD_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(AND32ri, scratch_ax.cur_reg, 2147483647);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // CMP32ri killed renamable $eax, 2143289344, implicit-def $eflags
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst2_op0 = scratch_ax.cur_reg;
    // operand 1 is an immediate operand

    ASMD(CMP32ri, inst2_op0, 2143289344);
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 13, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETGE8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst4_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst4_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst4_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst4_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_ninf_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_ninf_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Constant Pool:
    //   cp#0: 0xFFF0000000000000, align=4
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load (s32) from constant-pool)
    //   nofpexcept UCOMISSrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 3, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_ninf_float.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load (s32) from constant-pool)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // operand is a constant-pool reference
    SymRef inst0_op1_sym = this->sym_is_fpclass_ninf_float_cp0;
    if (inst0_op1_sym == Assembler::INVALID_SYM_REF) [[unlikely]] {
        const std::array<u8, 4> data = {0x0, 0x0, 0x80, 0xFF};
        inst0_op1_sym = derived()->assembler.sym_def_data("", data, 4, true, false, true, false);
        this->sym_is_fpclass_ninf_float_cp0 = inst0_op1_sym;
    }
    inst0_op1 = FE_MEM(FE_IP, 0, FE_NOREG, 0);

    // def xmm1 has not been allocated yet
    scratch_xmm1.alloc_from_bank(1);
    ASMD(SSE_MOVSSrm, scratch_xmm1.cur_reg, inst0_op1);
    derived()->assembler.reloc_text_pc32(inst0_op1_sym, derived()->assembler.text_cur_off() - 4, -4);
    // result xmm1 is marked as alive


    // nofpexcept UCOMISSrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISSrr has a preferred encoding as SSE_UCOMISSrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm1
        // operand 0(xmm1) is a simple register
        AsmReg inst1_op0 = scratch_xmm1.cur_reg;
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISSrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm1
        // operand 0(xmm1) is a simple register
        AsmReg inst1_op0 = scratch_xmm1.cur_reg;
        // operand 1 is xmm0
        // xmm0 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISSrr, inst1_op0, inst1_op1);
    }
    // argument xmm1 is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // renamable $al = SETCCr 3, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETNC8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst3_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst3_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst3_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst3_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_nnorm_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_nnorm_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $eax = MOVSS2DIrr killed renamable $xmm0
    //   TEST32rr renamable $eax, renamable $eax, implicit-def $eflags
    //   renamable $cl = SETCCr 8, implicit killed $eflags
    //   renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    //   renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -8388608, implicit-def dead $eflags
    //   CMP32ri killed renamable $eax, 2130706432, implicit-def $eflags
    //   renamable $al = SETCCr 2, implicit killed $eflags
    //   renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $cl, implicit-def dead $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_nnorm_float.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $eax = MOVSS2DIrr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVD_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // TEST32rr renamable $eax, renamable $eax, implicit-def $eflags
    // Skipping check for TEST32mr since associated register is used as an operand twice
    // Skipping check for TEST32ri since associated register is used as an operand twice
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst1_op0 = scratch_ax.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    ASMD(TEST32rr, inst1_op0, inst1_op1);


    // renamable $cl = SETCCr 8, implicit killed $eflags

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(SETS8r, scratch_cx.cur_reg);
    // result cx is marked as alive


    // renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(AND32ri, scratch_ax.cur_reg, 2147483647);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -8388608, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(ADD32ri, scratch_ax.cur_reg, -8388608);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // CMP32ri killed renamable $eax, 2130706432, implicit-def $eflags
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst5_op0 = scratch_ax.cur_reg;
    // operand 1 is an immediate operand

    ASMD(CMP32ri, inst5_op0, 2130706432);
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 2, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETC8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $cl, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst7_op1 = scratch_cx.cur_reg;

    ASMD(AND8rr, scratch_ax.cur_reg, inst7_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst8_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst8_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst8_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst8_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_nsnorm_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_nsnorm_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $eax = MOVSS2DIrr killed renamable $xmm0
    //   TEST32rr renamable $eax, renamable $eax, implicit-def $eflags
    //   renamable $cl = SETCCr 8, implicit killed $eflags
    //   renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    //   renamable $eax = DEC32r killed renamable $eax(tied-def 0), implicit-def dead $eflags
    //   CMP32ri killed renamable $eax, 8388607, implicit-def $eflags
    //   renamable $al = SETCCr 2, implicit killed $eflags
    //   renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $cl, implicit-def dead $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_nsnorm_float.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $eax = MOVSS2DIrr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVD_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // TEST32rr renamable $eax, renamable $eax, implicit-def $eflags
    // Skipping check for TEST32mr since associated register is used as an operand twice
    // Skipping check for TEST32ri since associated register is used as an operand twice
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst1_op0 = scratch_ax.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    ASMD(TEST32rr, inst1_op0, inst1_op1);


    // renamable $cl = SETCCr 8, implicit killed $eflags

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(SETS8r, scratch_cx.cur_reg);
    // result cx is marked as alive


    // renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(AND32ri, scratch_ax.cur_reg, 2147483647);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = DEC32r killed renamable $eax(tied-def 0), implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);

    ASMD(DEC32r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // CMP32ri killed renamable $eax, 8388607, implicit-def $eflags
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst5_op0 = scratch_ax.cur_reg;
    // operand 1 is an immediate operand

    ASMD(CMP32ri, inst5_op0, 8388607);
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 2, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETC8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $cl, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst7_op1 = scratch_cx.cur_reg;

    ASMD(AND8rr, scratch_ax.cur_reg, inst7_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst8_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst8_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst8_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst8_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_nzero_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_nzero_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $eax = MOVSS2DIrr killed renamable $xmm0
    //   dead renamable $eax = NEG32r killed renamable $eax(tied-def 0), implicit-def $eflags
    //   renamable $al = SETCCr 0, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_nzero_float.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVSS2DIrr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVD_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // dead renamable $eax = NEG32r killed renamable $eax(tied-def 0), implicit-def $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);

    ASMD(NEG32r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as dead


    // renamable $al = SETCCr 0, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETO8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst3_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst3_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst3_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst3_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_pzero_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_pzero_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $eax = MOVSS2DIrr killed renamable $xmm0
    //   TEST32rr killed renamable $eax, killed renamable $eax, implicit-def $eflags
    //   renamable $al = SETCCr 4, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_pzero_float.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVSS2DIrr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVD_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // TEST32rr killed renamable $eax, killed renamable $eax, implicit-def $eflags
    // Skipping check for TEST32mr since associated register is used as an operand twice
    // Skipping check for TEST32ri since associated register is used as an operand twice
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst1_op0 = scratch_ax.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    ASMD(TEST32rr, inst1_op0, inst1_op1);
    // argument ax is killed and marked as dead
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 4, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETZ8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst3_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst3_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst3_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst3_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_psnorm_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_psnorm_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $eax = MOVSS2DIrr killed renamable $xmm0
    //   renamable $eax = DEC32r killed renamable $eax(tied-def 0), implicit-def dead $eflags
    //   CMP32ri killed renamable $eax, 8388607, implicit-def $eflags
    //   renamable $al = SETCCr 2, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_psnorm_float.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVSS2DIrr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVD_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = DEC32r killed renamable $eax(tied-def 0), implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);

    ASMD(DEC32r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // CMP32ri killed renamable $eax, 8388607, implicit-def $eflags
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst2_op0 = scratch_ax.cur_reg;
    // operand 1 is an immediate operand

    ASMD(CMP32ri, inst2_op0, 8388607);
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 2, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETC8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst4_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst4_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst4_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst4_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_pnorm_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_pnorm_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $eax = MOVSS2DIrr killed renamable $xmm0
    //   TEST32rr renamable $eax, renamable $eax, implicit-def $eflags
    //   renamable $cl = SETCCr 9, implicit killed $eflags
    //   renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    //   renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -8388608, implicit-def dead $eflags
    //   CMP32ri killed renamable $eax, 2130706432, implicit-def $eflags
    //   renamable $al = SETCCr 2, implicit killed $eflags
    //   renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $cl, implicit-def dead $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_pnorm_float.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $eax = MOVSS2DIrr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVD_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // TEST32rr renamable $eax, renamable $eax, implicit-def $eflags
    // Skipping check for TEST32mr since associated register is used as an operand twice
    // Skipping check for TEST32ri since associated register is used as an operand twice
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst1_op0 = scratch_ax.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    ASMD(TEST32rr, inst1_op0, inst1_op1);


    // renamable $cl = SETCCr 9, implicit killed $eflags

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(SETNS8r, scratch_cx.cur_reg);
    // result cx is marked as alive


    // renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(AND32ri, scratch_ax.cur_reg, 2147483647);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -8388608, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(ADD32ri, scratch_ax.cur_reg, -8388608);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // CMP32ri killed renamable $eax, 2130706432, implicit-def $eflags
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst5_op0 = scratch_ax.cur_reg;
    // operand 1 is an immediate operand

    ASMD(CMP32ri, inst5_op0, 2130706432);
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 2, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETC8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $cl, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst7_op1 = scratch_cx.cur_reg;

    ASMD(AND8rr, scratch_ax.cur_reg, inst7_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst8_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst8_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst8_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst8_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_pinf_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_pinf_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Constant Pool:
    //   cp#0: 0x7FF0000000000000, align=4
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   nofpexcept UCOMISSrm killed renamable $xmm0, $rip, 1, $noreg, %const.0, $noreg, implicit-def $eflags, implicit $mxcsr :: (load (s32) from constant-pool)
    //   renamable $al = SETCCr 3, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_pinf_float.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // nofpexcept UCOMISSrm killed renamable $xmm0, $rip, 1, $noreg, %const.0, $noreg, implicit-def $eflags, implicit $mxcsr :: (load (s32) from constant-pool)
    // operand 0 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op0 = param_1.as_reg(this);
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // operand is a constant-pool reference
    SymRef inst0_op1_sym = this->sym_is_fpclass_pinf_float_cp0;
    if (inst0_op1_sym == Assembler::INVALID_SYM_REF) [[unlikely]] {
        const std::array<u8, 4> data = {0x0, 0x0, 0x80, 0x7F};
        inst0_op1_sym = derived()->assembler.sym_def_data("", data, 4, true, false, true, false);
        this->sym_is_fpclass_pinf_float_cp0 = inst0_op1_sym;
    }
    inst0_op1 = FE_MEM(FE_IP, 0, FE_NOREG, 0);

    ASMD(SSE_UCOMISSrm, inst0_op0, inst0_op1);
    derived()->assembler.reloc_text_pc32(inst0_op1_sym, derived()->assembler.text_cur_off() - 4, -4);
    // argument xmm0 is killed and marked as dead


    // renamable $al = SETCCr 3, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETNC8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst2_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst2_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst2_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst2_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_nan_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_nan_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 10, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_nan_float.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // nofpexcept UCOMISSrr killed renamable $xmm0, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    // Skipping check for SSE_UCOMISSrm since associated register is used as an operand twice
    // operand 0 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op0 = param_1.as_reg(this);
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    ASMD(SSE_UCOMISSrr, inst0_op0, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // renamable $al = SETCCr 10, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETP8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst2_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst2_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst2_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst2_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_inf_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_inf_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $eax = MOVSS2DIrr killed renamable $xmm0
    //   renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    //   CMP32ri killed renamable $eax, 2139095040, implicit-def $eflags
    //   renamable $al = SETCCr 4, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_inf_float.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVSS2DIrr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVD_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(AND32ri, scratch_ax.cur_reg, 2147483647);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // CMP32ri killed renamable $eax, 2139095040, implicit-def $eflags
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst2_op0 = scratch_ax.cur_reg;
    // operand 1 is an immediate operand

    ASMD(CMP32ri, inst2_op0, 2139095040);
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 4, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETZ8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst4_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst4_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst4_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst4_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_norm_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_norm_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $eax = MOVSS2DIrr killed renamable $xmm0
    //   renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    //   renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -8388608, implicit-def dead $eflags
    //   CMP32ri killed renamable $eax, 2130706432, implicit-def $eflags
    //   renamable $al = SETCCr 2, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_norm_float.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVSS2DIrr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVD_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(AND32ri, scratch_ax.cur_reg, 2147483647);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = ADD32ri killed renamable $eax(tied-def 0), -8388608, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(ADD32ri, scratch_ax.cur_reg, -8388608);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // CMP32ri killed renamable $eax, 2130706432, implicit-def $eflags
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst3_op0 = scratch_ax.cur_reg;
    // operand 1 is an immediate operand

    ASMD(CMP32ri, inst3_op0, 2130706432);
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 2, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETC8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst5_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst5_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst5_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst5_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_finite_float(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_finite_float: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $eax = MOVSS2DIrr killed renamable $xmm0
    //   renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    //   CMP32ri killed renamable $eax, 2139095040, implicit-def $eflags
    //   renamable $al = SETCCr 12, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_finite_float.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $eax = MOVSS2DIrr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVD_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $eax = AND32ri killed renamable $eax(tied-def 0), 2147483647, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(AND32ri, scratch_ax.cur_reg, 2147483647);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // CMP32ri killed renamable $eax, 2139095040, implicit-def $eflags
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst2_op0 = scratch_ax.cur_reg;
    // operand 1 is an immediate operand

    ASMD(CMP32ri, inst2_op0, 2139095040);
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 12, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETL8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst4_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst4_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst4_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst4_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_snan_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_snan_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $rax = MOVSDto64rr killed renamable $xmm0
    //   renamable $rcx = MOV64ri 9223372036854775807
    //   renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), killed renamable $rax, implicit-def dead $eflags
    //   renamable $rax = MOV64ri 9221120237041090560
    //   CMP64rr renamable $rcx, killed renamable $rax, implicit-def $eflags
    //   renamable $dl = SETCCr 12, implicit killed $eflags
    //   renamable $rax = MOV64ri 9218868437227405312
    //   CMP64rr killed renamable $rcx, killed renamable $rax, implicit-def $eflags
    //   renamable $al = SETCCr 15, implicit killed $eflags
    //   renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $dl, implicit-def dead $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_snan_double.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $rax = MOVSDto64rr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVQ_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $rcx = MOV64ri 9223372036854775807
    // operand 1 is an immediate operand

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_cx.cur_reg, 9223372036854775807);
    // result cx is marked as alive


    // renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), killed renamable $rax, implicit-def dead $eflags
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst2_op1 = scratch_ax.cur_reg;

    ASMD(AND64rr, scratch_cx.cur_reg, inst2_op1);
    // argument cx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result cx is marked as alive


    // renamable $rax = MOV64ri 9221120237041090560
    // operand 1 is an immediate operand

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_ax.cur_reg, 9221120237041090560);
    // result ax is marked as alive


    // CMP64rr renamable $rcx, killed renamable $rax, implicit-def $eflags
    // operand 0 is cx
    // operand 0(cx) is a simple register
    AsmReg inst4_op0 = scratch_cx.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst4_op1 = scratch_ax.cur_reg;

    ASMD(CMP64rr, inst4_op0, inst4_op1);
    // argument ax is killed and marked as dead


    // renamable $dl = SETCCr 12, implicit killed $eflags

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(SETL8r, scratch_dx.cur_reg);
    // result dx is marked as alive


    // renamable $rax = MOV64ri 9218868437227405312
    // operand 1 is an immediate operand

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_ax.cur_reg, 9218868437227405312);
    // result ax is marked as alive


    // CMP64rr killed renamable $rcx, killed renamable $rax, implicit-def $eflags
    // operand 0 is cx
    // operand 0(cx) is a simple register
    AsmReg inst7_op0 = scratch_cx.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst7_op1 = scratch_ax.cur_reg;

    ASMD(CMP64rr, inst7_op0, inst7_op1);
    // argument cx is killed and marked as dead
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 15, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETG8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $dl, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is dx
    // operand 1(dx) is a simple register
    AsmReg inst9_op1 = scratch_dx.cur_reg;

    ASMD(AND8rr, scratch_ax.cur_reg, inst9_op1);
    // argument ax is killed and marked as dead
    // argument dx is killed and marked as dead
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst10_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst10_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst10_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst10_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_qnan_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_qnan_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $rax = MOVSDto64rr killed renamable $xmm0
    //   renamable $rcx = MOV64ri 9223372036854775807
    //   renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), killed renamable $rax, implicit-def dead $eflags
    //   renamable $rax = MOV64ri 9221120237041090559
    //   CMP64rr killed renamable $rcx, killed renamable $rax, implicit-def $eflags
    //   renamable $al = SETCCr 15, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_qnan_double.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $rax = MOVSDto64rr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVQ_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $rcx = MOV64ri 9223372036854775807
    // operand 1 is an immediate operand

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_cx.cur_reg, 9223372036854775807);
    // result cx is marked as alive


    // renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), killed renamable $rax, implicit-def dead $eflags
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst2_op1 = scratch_ax.cur_reg;

    ASMD(AND64rr, scratch_cx.cur_reg, inst2_op1);
    // argument cx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result cx is marked as alive


    // renamable $rax = MOV64ri 9221120237041090559
    // operand 1 is an immediate operand

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_ax.cur_reg, 9221120237041090559);
    // result ax is marked as alive


    // CMP64rr killed renamable $rcx, killed renamable $rax, implicit-def $eflags
    // operand 0 is cx
    // operand 0(cx) is a simple register
    AsmReg inst4_op0 = scratch_cx.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst4_op1 = scratch_ax.cur_reg;

    ASMD(CMP64rr, inst4_op0, inst4_op1);
    // argument cx is killed and marked as dead
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 15, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETG8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst6_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst6_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst6_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst6_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_ninf_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_ninf_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Constant Pool:
    //   cp#0: 0xFFF0000000000000, align=8
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load (s64) from constant-pool)
    //   nofpexcept UCOMISDrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 3, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_ninf_double.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm1{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $xmm1 = MOVSDrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load (s64) from constant-pool)
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // operand is a constant-pool reference
    SymRef inst0_op1_sym = this->sym_is_fpclass_ninf_double_cp0;
    if (inst0_op1_sym == Assembler::INVALID_SYM_REF) [[unlikely]] {
        const std::array<u8, 8> data = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF0, 0xFF};
        inst0_op1_sym = derived()->assembler.sym_def_data("", data, 8, true, false, true, false);
        this->sym_is_fpclass_ninf_double_cp0 = inst0_op1_sym;
    }
    inst0_op1 = FE_MEM(FE_IP, 0, FE_NOREG, 0);

    // def xmm1 has not been allocated yet
    scratch_xmm1.alloc_from_bank(1);
    ASMD(SSE_MOVSDrm, scratch_xmm1.cur_reg, inst0_op1);
    derived()->assembler.reloc_text_pc32(inst0_op1_sym, derived()->assembler.text_cur_off() - 4, -4);
    // result xmm1 is marked as alive


    // nofpexcept UCOMISDrr killed renamable $xmm1, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    // SSE_UCOMISDrr has a preferred encoding as SSE_UCOMISDrm if possible
    if (param_1.val_ref_prefers_mem_enc()) {
        // operand 0 is xmm1
        // operand 0(xmm1) is a simple register
        AsmReg inst1_op0 = scratch_xmm1.cur_reg;
        // operand 1 is a memory operand
        // xmm0 is base for memory operand to use
        // xmm0 maps to operand param_1 which is known to be a ValuePartRef
        FeMem inst1_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_1.val_ref_frame_off());

        ASMD(SSE_UCOMISDrm, inst1_op0, inst1_op1);
    } else {
        // operand 0 is xmm1
        // operand 0(xmm1) is a simple register
        AsmReg inst1_op0 = scratch_xmm1.cur_reg;
        // operand 1 is xmm0
        // xmm0 is mapped to param_1
        AsmReg inst1_op1 = param_1.as_reg(this);

        ASMD(SSE_UCOMISDrr, inst1_op0, inst1_op1);
    }
    // argument xmm1 is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // renamable $al = SETCCr 3, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETNC8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst3_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst3_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst3_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst3_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_nnorm_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_nnorm_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $rax = MOVSDto64rr killed renamable $xmm0
    //   renamable $rcx = MOV64ri 9223372036854775807
    //   renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), renamable $rax, implicit-def dead $eflags
    //   renamable $rdx = MOV64ri -4503599627370496
    //   renamable $rdx = ADD64rr killed renamable $rdx(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    //   renamable $rdx = SHR64ri killed renamable $rdx(tied-def 0), 53, implicit-def dead $eflags
    //   CMP32ri killed renamable $edx, 1023, implicit-def $eflags, implicit killed $rdx
    //   renamable $cl = SETCCr 2, implicit killed $eflags
    //   TEST64rr killed renamable $rax, killed renamable $rax, implicit-def $eflags
    //   renamable $al = SETCCr 8, implicit killed $eflags
    //   renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $cl, implicit-def dead $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_nnorm_double.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $rax = MOVSDto64rr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVQ_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $rcx = MOV64ri 9223372036854775807
    // operand 1 is an immediate operand

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_cx.cur_reg, 9223372036854775807);
    // result cx is marked as alive


    // renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), renamable $rax, implicit-def dead $eflags
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst2_op1 = scratch_ax.cur_reg;

    ASMD(AND64rr, scratch_cx.cur_reg, inst2_op1);
    // argument cx is killed and marked as dead
    // result cx is marked as alive


    // renamable $rdx = MOV64ri -4503599627370496
    // operand 1 is an immediate operand

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_dx.cur_reg, -4503599627370496);
    // result dx is marked as alive


    // renamable $rdx = ADD64rr killed renamable $rdx(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    // operand 0 is dx
    // operand 0(dx) is the same as its tied destination
    scratch_dx.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst4_op1 = scratch_cx.cur_reg;

    ASMD(ADD64rr, scratch_dx.cur_reg, inst4_op1);
    // argument dx is killed and marked as dead
    // argument cx is killed and marked as dead
    // result dx is marked as alive


    // renamable $rdx = SHR64ri killed renamable $rdx(tied-def 0), 53, implicit-def dead $eflags
    // operand 0 is dx
    // operand 0(dx) is the same as its tied destination
    scratch_dx.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(SHR64ri, scratch_dx.cur_reg, 53);
    // argument dx is killed and marked as dead
    // result dx is marked as alive


    // CMP32ri killed renamable $edx, 1023, implicit-def $eflags, implicit killed $rdx
    // operand 0 is dx
    // operand 0(dx) is a simple register
    AsmReg inst6_op0 = scratch_dx.cur_reg;
    // operand 1 is an immediate operand
    // Handling implicit operand dx
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    ASMD(CMP32ri, inst6_op0, 1023);
    // argument dx is killed and marked as dead
    // argument dx is killed and marked as dead


    // renamable $cl = SETCCr 2, implicit killed $eflags

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(SETC8r, scratch_cx.cur_reg);
    // result cx is marked as alive


    // TEST64rr killed renamable $rax, killed renamable $rax, implicit-def $eflags
    // Skipping check for TEST64mr since associated register is used as an operand twice
    // Skipping check for TEST64ri since associated register is used as an operand twice
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst8_op0 = scratch_ax.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst8_op1 = scratch_ax.cur_reg;

    ASMD(TEST64rr, inst8_op0, inst8_op1);
    // argument ax is killed and marked as dead
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 8, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETS8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $cl, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst10_op1 = scratch_cx.cur_reg;

    ASMD(AND8rr, scratch_ax.cur_reg, inst10_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst11_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst11_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst11_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst11_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_nsnorm_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_nsnorm_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $rax = MOVSDto64rr killed renamable $xmm0
    //   renamable $rcx = MOV64ri 9223372036854775807
    //   renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), renamable $rax, implicit-def dead $eflags
    //   renamable $rcx = DEC64r killed renamable $rcx(tied-def 0), implicit-def dead $eflags
    //   renamable $rdx = MOV64ri 4503599627370495
    //   CMP64rr killed renamable $rcx, killed renamable $rdx, implicit-def $eflags
    //   renamable $cl = SETCCr 2, implicit killed $eflags
    //   TEST64rr killed renamable $rax, killed renamable $rax, implicit-def $eflags
    //   renamable $al = SETCCr 8, implicit killed $eflags
    //   renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $cl, implicit-def dead $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_nsnorm_double.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $rax = MOVSDto64rr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVQ_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $rcx = MOV64ri 9223372036854775807
    // operand 1 is an immediate operand

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_cx.cur_reg, 9223372036854775807);
    // result cx is marked as alive


    // renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), renamable $rax, implicit-def dead $eflags
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst2_op1 = scratch_ax.cur_reg;

    ASMD(AND64rr, scratch_cx.cur_reg, inst2_op1);
    // argument cx is killed and marked as dead
    // result cx is marked as alive


    // renamable $rcx = DEC64r killed renamable $rcx(tied-def 0), implicit-def dead $eflags
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);

    ASMD(DEC64r, scratch_cx.cur_reg);
    // argument cx is killed and marked as dead
    // result cx is marked as alive


    // renamable $rdx = MOV64ri 4503599627370495
    // operand 1 is an immediate operand

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_dx.cur_reg, 4503599627370495);
    // result dx is marked as alive


    // CMP64rr killed renamable $rcx, killed renamable $rdx, implicit-def $eflags
    // operand 0 is cx
    // operand 0(cx) is a simple register
    AsmReg inst5_op0 = scratch_cx.cur_reg;
    // operand 1 is dx
    // operand 1(dx) is a simple register
    AsmReg inst5_op1 = scratch_dx.cur_reg;

    ASMD(CMP64rr, inst5_op0, inst5_op1);
    // argument cx is killed and marked as dead
    // argument dx is killed and marked as dead


    // renamable $cl = SETCCr 2, implicit killed $eflags

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(SETC8r, scratch_cx.cur_reg);
    // result cx is marked as alive


    // TEST64rr killed renamable $rax, killed renamable $rax, implicit-def $eflags
    // Skipping check for TEST64mr since associated register is used as an operand twice
    // Skipping check for TEST64ri since associated register is used as an operand twice
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst7_op0 = scratch_ax.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst7_op1 = scratch_ax.cur_reg;

    ASMD(TEST64rr, inst7_op0, inst7_op1);
    // argument ax is killed and marked as dead
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 8, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETS8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $cl, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst9_op1 = scratch_cx.cur_reg;

    ASMD(AND8rr, scratch_ax.cur_reg, inst9_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst10_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst10_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst10_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst10_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_nzero_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_nzero_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $rax = MOVSDto64rr killed renamable $xmm0
    //   dead renamable $rax = NEG64r killed renamable $rax(tied-def 0), implicit-def $eflags
    //   renamable $al = SETCCr 0, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_nzero_double.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $rax = MOVSDto64rr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVQ_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // dead renamable $rax = NEG64r killed renamable $rax(tied-def 0), implicit-def $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);

    ASMD(NEG64r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as dead


    // renamable $al = SETCCr 0, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETO8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst3_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst3_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst3_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst3_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_pzero_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_pzero_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $rax = MOVSDto64rr killed renamable $xmm0
    //   TEST64rr killed renamable $rax, killed renamable $rax, implicit-def $eflags
    //   renamable $al = SETCCr 4, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_pzero_double.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // renamable $rax = MOVSDto64rr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVQ_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // TEST64rr killed renamable $rax, killed renamable $rax, implicit-def $eflags
    // Skipping check for TEST64mr since associated register is used as an operand twice
    // Skipping check for TEST64ri since associated register is used as an operand twice
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst1_op0 = scratch_ax.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst1_op1 = scratch_ax.cur_reg;

    ASMD(TEST64rr, inst1_op0, inst1_op1);
    // argument ax is killed and marked as dead
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 4, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETZ8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst3_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst3_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst3_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst3_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_psnorm_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_psnorm_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $rax = MOVSDto64rr killed renamable $xmm0
    //   renamable $rax = DEC64r killed renamable $rax(tied-def 0), implicit-def dead $eflags
    //   renamable $rcx = MOV64ri 4503599627370495
    //   CMP64rr killed renamable $rax, killed renamable $rcx, implicit-def $eflags
    //   renamable $al = SETCCr 2, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_psnorm_double.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $rax = MOVSDto64rr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVQ_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $rax = DEC64r killed renamable $rax(tied-def 0), implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);

    ASMD(DEC64r, scratch_ax.cur_reg);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // renamable $rcx = MOV64ri 4503599627370495
    // operand 1 is an immediate operand

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_cx.cur_reg, 4503599627370495);
    // result cx is marked as alive


    // CMP64rr killed renamable $rax, killed renamable $rcx, implicit-def $eflags
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst3_op0 = scratch_ax.cur_reg;
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst3_op1 = scratch_cx.cur_reg;

    ASMD(CMP64rr, inst3_op0, inst3_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead


    // renamable $al = SETCCr 2, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETC8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst5_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst5_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst5_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst5_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_pnorm_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_pnorm_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $rax = MOVSDto64rr killed renamable $xmm0
    //   renamable $rcx = MOV64ri 9223372036854775807
    //   renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), renamable $rax, implicit-def dead $eflags
    //   renamable $rdx = MOV64ri -4503599627370496
    //   renamable $rdx = ADD64rr killed renamable $rdx(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    //   renamable $rdx = SHR64ri killed renamable $rdx(tied-def 0), 53, implicit-def dead $eflags
    //   CMP32ri killed renamable $edx, 1023, implicit-def $eflags, implicit killed $rdx
    //   renamable $cl = SETCCr 2, implicit killed $eflags
    //   TEST64rr killed renamable $rax, killed renamable $rax, implicit-def $eflags
    //   renamable $al = SETCCr 9, implicit killed $eflags
    //   renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $cl, implicit-def dead $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_pnorm_double.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_dx{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $rax = MOVSDto64rr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVQ_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $rcx = MOV64ri 9223372036854775807
    // operand 1 is an immediate operand

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_cx.cur_reg, 9223372036854775807);
    // result cx is marked as alive


    // renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), renamable $rax, implicit-def dead $eflags
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst2_op1 = scratch_ax.cur_reg;

    ASMD(AND64rr, scratch_cx.cur_reg, inst2_op1);
    // argument cx is killed and marked as dead
    // result cx is marked as alive


    // renamable $rdx = MOV64ri -4503599627370496
    // operand 1 is an immediate operand

    // def dx has not been allocated yet
    scratch_dx.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_dx.cur_reg, -4503599627370496);
    // result dx is marked as alive


    // renamable $rdx = ADD64rr killed renamable $rdx(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    // operand 0 is dx
    // operand 0(dx) is the same as its tied destination
    scratch_dx.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst4_op1 = scratch_cx.cur_reg;

    ASMD(ADD64rr, scratch_dx.cur_reg, inst4_op1);
    // argument dx is killed and marked as dead
    // argument cx is killed and marked as dead
    // result dx is marked as alive


    // renamable $rdx = SHR64ri killed renamable $rdx(tied-def 0), 53, implicit-def dead $eflags
    // operand 0 is dx
    // operand 0(dx) is the same as its tied destination
    scratch_dx.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(SHR64ri, scratch_dx.cur_reg, 53);
    // argument dx is killed and marked as dead
    // result dx is marked as alive


    // CMP32ri killed renamable $edx, 1023, implicit-def $eflags, implicit killed $rdx
    // operand 0 is dx
    // operand 0(dx) is a simple register
    AsmReg inst6_op0 = scratch_dx.cur_reg;
    // operand 1 is an immediate operand
    // Handling implicit operand dx
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    ASMD(CMP32ri, inst6_op0, 1023);
    // argument dx is killed and marked as dead
    // argument dx is killed and marked as dead


    // renamable $cl = SETCCr 2, implicit killed $eflags

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(SETC8r, scratch_cx.cur_reg);
    // result cx is marked as alive


    // TEST64rr killed renamable $rax, killed renamable $rax, implicit-def $eflags
    // Skipping check for TEST64mr since associated register is used as an operand twice
    // Skipping check for TEST64ri since associated register is used as an operand twice
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst8_op0 = scratch_ax.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst8_op1 = scratch_ax.cur_reg;

    ASMD(TEST64rr, inst8_op0, inst8_op1);
    // argument ax is killed and marked as dead
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 9, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETNS8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = AND8rr killed renamable $al(tied-def 0), killed renamable $cl, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst10_op1 = scratch_cx.cur_reg;

    ASMD(AND8rr, scratch_ax.cur_reg, inst10_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst11_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst11_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst11_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst11_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_pinf_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_pinf_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Constant Pool:
    //   cp#0: 0x7FF0000000000000, align=8
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   nofpexcept UCOMISDrm killed renamable $xmm0, $rip, 1, $noreg, %const.0, $noreg, implicit-def $eflags, implicit $mxcsr :: (load (s64) from constant-pool)
    //   renamable $al = SETCCr 3, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_pinf_double.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // nofpexcept UCOMISDrm killed renamable $xmm0, $rip, 1, $noreg, %const.0, $noreg, implicit-def $eflags, implicit $mxcsr :: (load (s64) from constant-pool)
    // operand 0 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op0 = param_1.as_reg(this);
    // operand 1 is a memory operand
    FeMem inst0_op1;
    // operand is a constant-pool reference
    SymRef inst0_op1_sym = this->sym_is_fpclass_pinf_double_cp0;
    if (inst0_op1_sym == Assembler::INVALID_SYM_REF) [[unlikely]] {
        const std::array<u8, 8> data = {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF0, 0x7F};
        inst0_op1_sym = derived()->assembler.sym_def_data("", data, 8, true, false, true, false);
        this->sym_is_fpclass_pinf_double_cp0 = inst0_op1_sym;
    }
    inst0_op1 = FE_MEM(FE_IP, 0, FE_NOREG, 0);

    ASMD(SSE_UCOMISDrm, inst0_op0, inst0_op1);
    derived()->assembler.reloc_text_pc32(inst0_op1_sym, derived()->assembler.text_cur_off() - 4, -4);
    // argument xmm0 is killed and marked as dead


    // renamable $al = SETCCr 3, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETNC8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst2_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst2_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst2_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst2_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_nan_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_nan_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    //   renamable $al = SETCCr 10, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_nan_double.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};


    // nofpexcept UCOMISDrr killed renamable $xmm0, killed renamable $xmm0, implicit-def $eflags, implicit $mxcsr
    // Skipping check for SSE_UCOMISDrm since associated register is used as an operand twice
    // operand 0 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op0 = param_1.as_reg(this);
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    ASMD(SSE_UCOMISDrr, inst0_op0, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // argument xmm0 is killed and marked as dead


    // renamable $al = SETCCr 10, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETP8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst2_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst2_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst2_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst2_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_inf_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_inf_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $rax = MOVSDto64rr killed renamable $xmm0
    //   renamable $rcx = MOV64ri 9223372036854775807
    //   renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), killed renamable $rax, implicit-def dead $eflags
    //   renamable $rax = MOV64ri 9218868437227405312
    //   CMP64rr killed renamable $rcx, killed renamable $rax, implicit-def $eflags
    //   renamable $al = SETCCr 4, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_inf_double.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $rax = MOVSDto64rr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVQ_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $rcx = MOV64ri 9223372036854775807
    // operand 1 is an immediate operand

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_cx.cur_reg, 9223372036854775807);
    // result cx is marked as alive


    // renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), killed renamable $rax, implicit-def dead $eflags
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst2_op1 = scratch_ax.cur_reg;

    ASMD(AND64rr, scratch_cx.cur_reg, inst2_op1);
    // argument cx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result cx is marked as alive


    // renamable $rax = MOV64ri 9218868437227405312
    // operand 1 is an immediate operand

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_ax.cur_reg, 9218868437227405312);
    // result ax is marked as alive


    // CMP64rr killed renamable $rcx, killed renamable $rax, implicit-def $eflags
    // operand 0 is cx
    // operand 0(cx) is a simple register
    AsmReg inst4_op0 = scratch_cx.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst4_op1 = scratch_ax.cur_reg;

    ASMD(CMP64rr, inst4_op0, inst4_op1);
    // argument cx is killed and marked as dead
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 4, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETZ8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst6_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst6_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst6_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst6_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_norm_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_norm_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $rax = MOVSDto64rr killed renamable $xmm0
    //   renamable $rcx = MOV64ri 9223372036854775807
    //   renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), killed renamable $rax, implicit-def dead $eflags
    //   renamable $rax = MOV64ri -4503599627370496
    //   renamable $rax = ADD64rr killed renamable $rax(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    //   renamable $rax = SHR64ri killed renamable $rax(tied-def 0), 53, implicit-def dead $eflags
    //   CMP32ri killed renamable $eax, 1023, implicit-def $eflags, implicit killed $rax
    //   renamable $al = SETCCr 2, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_norm_double.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $rax = MOVSDto64rr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVQ_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $rcx = MOV64ri 9223372036854775807
    // operand 1 is an immediate operand

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_cx.cur_reg, 9223372036854775807);
    // result cx is marked as alive


    // renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), killed renamable $rax, implicit-def dead $eflags
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst2_op1 = scratch_ax.cur_reg;

    ASMD(AND64rr, scratch_cx.cur_reg, inst2_op1);
    // argument cx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result cx is marked as alive


    // renamable $rax = MOV64ri -4503599627370496
    // operand 1 is an immediate operand

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_ax.cur_reg, -4503599627370496);
    // result ax is marked as alive


    // renamable $rax = ADD64rr killed renamable $rax(tied-def 0), killed renamable $rcx, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is cx
    // operand 1(cx) is a simple register
    AsmReg inst4_op1 = scratch_cx.cur_reg;

    ASMD(ADD64rr, scratch_ax.cur_reg, inst4_op1);
    // argument ax is killed and marked as dead
    // argument cx is killed and marked as dead
    // result ax is marked as alive


    // renamable $rax = SHR64ri killed renamable $rax(tied-def 0), 53, implicit-def dead $eflags
    // operand 0 is ax
    // operand 0(ax) is the same as its tied destination
    scratch_ax.alloc_from_bank(0);
    // operand 1 is an immediate operand

    ASMD(SHR64ri, scratch_ax.cur_reg, 53);
    // argument ax is killed and marked as dead
    // result ax is marked as alive


    // CMP32ri killed renamable $eax, 1023, implicit-def $eflags, implicit killed $rax
    // operand 0 is ax
    // operand 0(ax) is a simple register
    AsmReg inst6_op0 = scratch_ax.cur_reg;
    // operand 1 is an immediate operand
    // Handling implicit operand ax
    // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

    ASMD(CMP32ri, inst6_op0, 1023);
    // argument ax is killed and marked as dead
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 2, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETC8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst8_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst8_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst8_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst8_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_is_fpclass_finite_double(AsmOperand param_0, AsmOperand param_1, ScratchReg &result_0) {
    // # Machine code for function is_fpclass_finite_double: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $edi, $xmm0
    // 
    // bb.0 (%ir-block.2):
    //   liveins: $edi, $xmm0
    //   renamable $rax = MOVSDto64rr killed renamable $xmm0
    //   renamable $rcx = MOV64ri 9223372036854775807
    //   renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), killed renamable $rax, implicit-def dead $eflags
    //   renamable $rax = MOV64ri 9218868437227405312
    //   CMP64rr killed renamable $rcx, killed renamable $rax, implicit-def $eflags
    //   renamable $al = SETCCr 12, implicit killed $eflags
    //   renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    //   RET64 killed $al
    // 
    // # End machine code for function is_fpclass_finite_double.
    // 

    // Mapping di to param_0
    // Mapping xmm0 to param_1
    ScratchReg scratch_ax{derived()};
    ScratchReg scratch_di{derived()};
    ScratchReg scratch_xmm0{derived()};
    ScratchReg scratch_cx{derived()};


    // renamable $rax = MOVSDto64rr killed renamable $xmm0
    // operand 1 is xmm0
    // xmm0 is mapped to param_1
    AsmReg inst0_op1 = param_1.as_reg(this);

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SSE_MOVQ_X2Grr, scratch_ax.cur_reg, inst0_op1);
    // argument xmm0 is killed and marked as dead
    // result ax is marked as alive


    // renamable $rcx = MOV64ri 9223372036854775807
    // operand 1 is an immediate operand

    // def cx has not been allocated yet
    scratch_cx.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_cx.cur_reg, 9223372036854775807);
    // result cx is marked as alive


    // renamable $rcx = AND64rr killed renamable $rcx(tied-def 0), killed renamable $rax, implicit-def dead $eflags
    // operand 0 is cx
    // operand 0(cx) is the same as its tied destination
    scratch_cx.alloc_from_bank(0);
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst2_op1 = scratch_ax.cur_reg;

    ASMD(AND64rr, scratch_cx.cur_reg, inst2_op1);
    // argument cx is killed and marked as dead
    // argument ax is killed and marked as dead
    // result cx is marked as alive


    // renamable $rax = MOV64ri 9218868437227405312
    // operand 1 is an immediate operand

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(MOV64ri, scratch_ax.cur_reg, 9218868437227405312);
    // result ax is marked as alive


    // CMP64rr killed renamable $rcx, killed renamable $rax, implicit-def $eflags
    // operand 0 is cx
    // operand 0(cx) is a simple register
    AsmReg inst4_op0 = scratch_cx.cur_reg;
    // operand 1 is ax
    // operand 1(ax) is a simple register
    AsmReg inst4_op1 = scratch_ax.cur_reg;

    ASMD(CMP64rr, inst4_op0, inst4_op1);
    // argument cx is killed and marked as dead
    // argument ax is killed and marked as dead


    // renamable $al = SETCCr 12, implicit killed $eflags

    // def ax has not been allocated yet
    scratch_ax.alloc_from_bank(0);
    ASMD(SETL8r, scratch_ax.cur_reg);
    // result ax is marked as alive


    // renamable $al = OR8rr killed renamable $al(tied-def 0), killed renamable $dil, implicit-def dead $eflags, implicit killed $edi
    // OR8rr has a preferred encoding as OR8ri if possible
    if (param_0.encodeable_as_imm8_sext()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is an immediate operand
        const auto& imm = param_0.imm();
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8ri, scratch_ax.cur_reg, imm.const_u64);
    }    // OR8rr has a preferred encoding as OR8rm if possible
    else if (param_0.val_ref_prefers_mem_enc()) {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is a memory operand
        // di is base for memory operand to use
        // di maps to operand param_0 which is known to be a ValuePartRef
        FeMem inst6_op1 = FE_MEM(FE_BP, 0, FE_NOREG, -(i32)param_0.val_ref_frame_off());
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rm, scratch_ax.cur_reg, inst6_op1);
    } else {
        // operand 0 is ax
        // operand 0(ax) is the same as its tied destination
        scratch_ax.alloc_from_bank(0);
        // operand 1 is di
        // di is mapped to param_0
        AsmReg inst6_op1 = param_0.as_reg(this);
        // Handling implicit operand di
        // Ignoring since the number of implicit operands on the LLVM inst exceeds the number in the MCInstrDesc

        ASMD(OR8rr, scratch_ax.cur_reg, inst6_op1);
    }
    // argument ax is killed and marked as dead
    // argument di is killed and marked as dead
    // argument di is killed and marked as dead
    // result ax is marked as alive


    // RET64 killed $al
    // returning reg ax as result_0
    result_0 = std::move(scratch_ax);
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_prefetch_rl0(AsmOperand param_0) {
    // # Machine code for function prefetch_rl0: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   PREFETCHNTA killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s8) from %ir.0)
    //   RET64
    // 
    // # End machine code for function prefetch_rl0.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};


    // PREFETCHNTA killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s8) from %ir.0)
    // operand 0 is a memory operand
    FeMem inst0_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    ASMD(PREFETCHNTAm, inst0_op0);
    // argument di is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_prefetch_rl1(AsmOperand param_0) {
    // # Machine code for function prefetch_rl1: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   PREFETCHT2 killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s8) from %ir.0)
    //   RET64
    // 
    // # End machine code for function prefetch_rl1.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};


    // PREFETCHT2 killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s8) from %ir.0)
    // operand 0 is a memory operand
    FeMem inst0_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    ASMD(PREFETCHT2m, inst0_op0);
    // argument di is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_prefetch_rl2(AsmOperand param_0) {
    // # Machine code for function prefetch_rl2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   PREFETCHT1 killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s8) from %ir.0)
    //   RET64
    // 
    // # End machine code for function prefetch_rl2.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};


    // PREFETCHT1 killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s8) from %ir.0)
    // operand 0 is a memory operand
    FeMem inst0_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    ASMD(PREFETCHT1m, inst0_op0);
    // argument di is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_prefetch_rl3(AsmOperand param_0) {
    // # Machine code for function prefetch_rl3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   PREFETCHT0 killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s8) from %ir.0)
    //   RET64
    // 
    // # End machine code for function prefetch_rl3.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};


    // PREFETCHT0 killed renamable $rdi, 1, $noreg, 0, $noreg :: (load (s8) from %ir.0)
    // operand 0 is a memory operand
    FeMem inst0_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    ASMD(PREFETCHT0m, inst0_op0);
    // argument di is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_prefetch_wl0(AsmOperand param_0) {
    // # Machine code for function prefetch_wl0: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   PREFETCHNTA killed renamable $rdi, 1, $noreg, 0, $noreg :: (store (s8) into %ir.0)
    //   RET64
    // 
    // # End machine code for function prefetch_wl0.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};


    // PREFETCHNTA killed renamable $rdi, 1, $noreg, 0, $noreg :: (store (s8) into %ir.0)
    // operand 0 is a memory operand
    FeMem inst0_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    ASMD(PREFETCHNTAm, inst0_op0);
    // argument di is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_prefetch_wl1(AsmOperand param_0) {
    // # Machine code for function prefetch_wl1: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   PREFETCHT2 killed renamable $rdi, 1, $noreg, 0, $noreg :: (store (s8) into %ir.0)
    //   RET64
    // 
    // # End machine code for function prefetch_wl1.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};


    // PREFETCHT2 killed renamable $rdi, 1, $noreg, 0, $noreg :: (store (s8) into %ir.0)
    // operand 0 is a memory operand
    FeMem inst0_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    ASMD(PREFETCHT2m, inst0_op0);
    // argument di is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_prefetch_wl2(AsmOperand param_0) {
    // # Machine code for function prefetch_wl2: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   PREFETCHT1 killed renamable $rdi, 1, $noreg, 0, $noreg :: (store (s8) into %ir.0)
    //   RET64
    // 
    // # End machine code for function prefetch_wl2.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};


    // PREFETCHT1 killed renamable $rdi, 1, $noreg, 0, $noreg :: (store (s8) into %ir.0)
    // operand 0 is a memory operand
    FeMem inst0_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    ASMD(PREFETCHT1m, inst0_op0);
    // argument di is killed and marked as dead


    // RET64
    return true;

}

template <typename Adaptor,
          typename Derived,
          template <typename, typename, typename>
          class BaseTy,
          typename Config>bool EncodeCompiler<Adaptor, Derived, BaseTy, Config>::encode_prefetch_wl3(AsmOperand param_0) {
    // # Machine code for function prefetch_wl3: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
    // Function Live Ins: $rdi
    // 
    // bb.0 (%ir-block.1):
    //   liveins: $rdi
    //   PREFETCHT0 killed renamable $rdi, 1, $noreg, 0, $noreg :: (store (s8) into %ir.0)
    //   RET64
    // 
    // # End machine code for function prefetch_wl3.
    // 

    // Mapping di to param_0
    ScratchReg scratch_di{derived()};


    // PREFETCHT0 killed renamable $rdi, 1, $noreg, 0, $noreg :: (store (s8) into %ir.0)
    // operand 0 is a memory operand
    FeMem inst0_op0;
    // looking at base di
    // di maps to param_0, so could be an address
    if (param_0.is_addr()) {
        const auto& addr = param_0.legalize_address(this);
        // no index/disp in LLVM, can simply use the operand address
        inst0_op0 = FE_MEM(addr.base_reg(), addr.scale, addr.scale ? addr.index_reg() : FE_NOREG, addr.disp);
    } else {
        // di maps to operand param_0
        AsmReg base = param_0.as_reg(this);
        inst0_op0 = FE_MEM(base, 0, FE_NOREG, 0);
    }

    ASMD(PREFETCHT0m, inst0_op0);
    // argument di is killed and marked as dead


    // RET64
    return true;

}



} // namespace tpde_encodegen

#undef ASMD
// SPDX-SnippetEnd
