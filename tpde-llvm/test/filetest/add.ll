; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always


define void @add_i8_1(i8 %0) {
; X64-LABEL: add_i8_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    lea edi, [rdi + 0x1]
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = add nsw i8 %0, 1
    ret void
}

define void @add_i8_1_invert(i8 %0) {
; X64-LABEL: add_i8_1_invert>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    lea edi, [rdi + 0xff]
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = add nsw i8 %0, -1
    ret void
}

define void @add_i8_i8(i8 %0, i8 %1) {
; X64-LABEL: add_i8_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    lea edi, [rdi + rsi]
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = add nsw i8 %0, %1
    ret void
}

define void @add_i16_1(i16 %0) {
; X64-LABEL: add_i16_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    lea edi, [rdi + 0x1]
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = add nsw i16 %0, 1
    ret void
}

define void @add_i16_invert(i16 %0) {
; X64-LABEL: add_i16_invert>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    lea edi, [rdi + 0xffff]
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = add nsw i16 %0, -1
    ret void
}

define void @add_i16_1000(i16 %0) {
; X64-LABEL: add_i16_1000>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    lea edi, [rdi + 0x1000]
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = add nsw i16 %0, u0x1000
    ret void
}

define void @add_i16_1001(i16 %0) {
; X64-LABEL: add_i16_1001>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    lea edi, [rdi + 0x1001]
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = add nsw i16 %0, u0x1001
    ret void
}

define void @add_i16_FFFF(i16 %0) {
; X64-LABEL: add_i16_FFFF>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    lea edi, [rdi + 0xffff]
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = add nsw i16 %0, u0xFFFF
    ret void
}

define void @add_i16_i16(i16 %0, i16 %1) {
; X64-LABEL: add_i16_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    lea edi, [rdi + rsi]
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:

    %2 = add nsw i16 %0, %1
    ret void
}

define void @add_i32_1(i32 %0) {
; X64-LABEL: add_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    lea edi, [rdi + 0x1]
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = add nsw i32 %0, 1
    ret void
}

define void @add_i32_invert(i32 %0) {
; X64-LABEL: add_i32_invert>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    lea edi, [rdi - 0x1]
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = add nsw i32 %0, -1
    ret void
}

define void @add_i32_1000(i32 %0) {
; X64-LABEL: add_i32_1000>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    lea edi, [rdi + 0x1000]
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = add nsw i32 %0, u0x1000
    ret void
}

define void @add_i32_1001(i32 %0) {
; X64-LABEL: add_i32_1001>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    lea edi, [rdi + 0x1001]
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = add nsw i32 %0, u0x1001
    ret void
}

define void @add_i32_FFFFFFFF(i32 %0) {
; X64-LABEL: add_i32_FFFFFFFF>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    lea edi, [rdi - 0x1]
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = add nsw i32 %0, u0xFFFFFFFF
    ret void
}

define void @add_i32_i32(i32 %0, i32 %1) {
; X64-LABEL: add_i32_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea edi, [rdi + rsi]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = add nsw i32 %0, %1
    ret void
}

define void @add_i64_1(i64 %0) {
; X64-LABEL: add_i64_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rdi, [rdi + 0x1]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = add nsw i64 %0, 1
    ret void
}

define void @add_i64_invert(i64 %0) {
; X64-LABEL: add_i64_invert>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rdi, [rdi - 0x1]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = add nsw i64 %0, -1
    ret void
}

define void @add_i64_1000(i64 %0) {
; X64-LABEL: add_i64_1000>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rdi, [rdi + 0x1000]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = add nsw i64 %0, u0x1000
    ret void
}

define void @add_i64_1001(i64 %0) {
; X64-LABEL: add_i64_1001>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rdi, [rdi + 0x1001]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = add nsw i64 %0, u0x1001
    ret void
}

define void @add_i64_FFFFFFFFFFFFFFFF(i64 %0) {
; X64-LABEL: add_i64_FFFFFFFFFFFFFFFF>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rdi, [rdi - 0x1]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = add nsw i64 %0, u0xFFFFFFFFFFFFFFFF
    ret void
}

define void @add_i64_i64(i64 %0, i64 %1) {
; X64-LABEL: add_i64_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rdi, [rdi + rsi]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %2 = add nsw i64 %0, %1
    ret void
}

define void @add_i37_1(i37 %0) {
; X64-LABEL: add_i37_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rdi, [rdi + 0x1]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = add nsw i37 %0, 1
    ret void
}

define void @add_i37_invert(i37 %0) {
; X64-LABEL: add_i37_invert>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    lea rdi, [rdi + rax]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %1 = add nsw i37 %0, -1
    ret void
}

define void @add_i37_i37(i37 %0, i37 %1) {
; X64-LABEL: add_i37_i37>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rdi, [rdi + rsi]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %2 = add nsw i37 %0, %1
    ret void
}

define void @add_i64_1_reorder(i64 %0) {
; X64-LABEL: add_i64_1_reorder>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rdi, [rdi + 0x1]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = add nsw i64 1, %0
    ret void
}

define void @add_i64_1001_reorder(i64 %0) {
; X64-LABEL: add_i64_1001_reorder>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rdi, [rdi + 0x1001]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = add nsw i64 u0x1001, %0
    ret void
}

define void @add_i128_1(i128 %0) {
; X64-LABEL: add_i128_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov rax, rdi
; X64:    add rax, 0x1
; X64:    mov rcx, rsi
; X64:    adc rcx, 0x0
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %1 = add nsw i128 %0, 1
    ret void
}

define void @add_i128_invert(i128 %0) {
; X64-LABEL: add_i128_invert>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov rax, rdi
; X64:    add rax, -0x1
; X64:    mov rcx, rsi
; X64:    adc rcx, -0x1
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %1 = add nsw i128 %0, -1
    ret void
}

define void @add_i128_1_reorder(i128 %0) {
; X64-LABEL: add_i128_1_reorder>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov rax, rdi
; X64:    add rax, 0x1
; X64:    mov rcx, rsi
; X64:    adc rcx, 0x0
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %1 = add nsw i128 1, %0
    ret void
}

define void @add_i128_1001_1001(i128 %0) {
; X64-LABEL: add_i128_1001_1001>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov rax, rdi
; X64:    add rax, 0x1001
; X64:    mov rcx, rsi
; X64:    adc rcx, 0x1001
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = add nsw i128 %0, u0x10010000000000001001
    ret void
}

define void @add_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: add_i128_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x58
; X64:    mov rax, rdi
; X64:    add rax, rdx
; X64:    mov rbx, rsi
; X64:    adc rbx, rcx
; X64:    add rsp, 0x58
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %2 = add nsw i128 %0, %1
    ret void
}

define void @add_i64_salvage_imm(i64 %0) {
; X64-LABEL: add_i64_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rdi, [rdi + 0x1]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
  %1 = add nsw i64 %0, 1
  ret void
}

define void @add_i64_salvage_reg(i64 %0, i64 %1) {
; X64-LABEL: add_i64_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rdi, [rdi + rsi]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
  %2 = add nsw i64 %0, %1
  ret void
}

define void @add_i37_no_salvage_imm(i37 %0) {
; X64-LABEL: add_i37_no_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rax, [rdi + 0x3]
; X64:    lea rdi, [rdi + rax]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
    %1 = add i37 %0, 3
    %2 = add i37 %0, %1
    ret void
}

define void @add_i37_no_salvage_reg(i37 %0, i37 %1) {
; X64-LABEL: add_i37_no_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rax, [rdi + rsi]
; X64:    lea rdi, [rdi + rax]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
    %2 = add i37 %0, %1
    %3 = add i37 %0, %2
    ret void
}

define void @add_i128_salvage_imm(i128 %0) {
; X64-LABEL: add_i128_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov rax, rdi
; X64:    add rax, 0x1
; X64:    mov rcx, rsi
; X64:    adc rcx, 0x0
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
  %1 = add nsw i128 %0, 1
  ret void
}

define void @add_i128_salvage_reg(i128 %0, i128 %1) {
; X64-LABEL: add_i128_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x58
; X64:    mov rax, rdi
; X64:    add rax, rdx
; X64:    mov rbx, rsi
; X64:    adc rbx, rcx
; X64:    add rsp, 0x58
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
  %2 = add nsw i128 %0, %1
  ret void
}

define void @add_i64_no_salvage_imm(i64 %0) {
; X64-LABEL: add_i64_no_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rax, [rdi + 0x1]
; X64:    lea rdi, [rdi + rax]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
  %1 = add nsw i64 %0, 1
  %2 = add nsw i64 %0, %1
  ret void
}

define void @add_i64_no_salvage_reg(i64 %0, i64 %1) {
; X64-LABEL: add_i64_no_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    lea rax, [rdi + rsi]
; X64:    lea rdi, [rdi + rax]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
  %2 = add nsw i64 %0, %1
  %3 = add nsw i64 %0, %2
  ret void
}


define void @add_i128_no_salvage_imm(i128 %0) {
; X64-LABEL: add_i128_no_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x58
; X64:    mov rax, rdi
; X64:    add rax, 0x1
; X64:    mov rcx, rsi
; X64:    adc rcx, 0x0
; X64:    mov rdx, rdi
; X64:    add rdx, rax
; X64:    mov rbx, rsi
; X64:    adc rbx, rcx
; X64:    add rsp, 0x58
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
  entry:
  %1 = add nsw i128 %0, 1
  %2 = add nsw i128 %0, %1
  ret void
}

define void @add_i128_no_salvage_reg(i128 %0, i128 %1) {
; X64-LABEL: add_i128_no_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x58
; X64:    mov rax, rdi
; X64:    add rax, rdx
; X64:    mov rbx, rsi
; X64:    adc rbx, rcx
; X64:    mov rcx, rdi
; X64:    add rcx, rax
; X64:    mov rdx, rsi
; X64:    adc rdx, rbx
; X64:    add rsp, 0x58
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
  %2 = add nsw i128 %0, %1
  %3 = add nsw i128 %0, %2
  ret void
}

define void @add_i128_no_salvage_reg2(i128 %0, i128 %1) {
; X64-LABEL: add_i128_no_salvage_reg2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x58
; X64:    mov rax, rdi
; X64:    add rax, rdx
; X64:    mov rbx, rsi
; X64:    adc rbx, rcx
; X64:    mov rcx, rdi
; X64:    add rcx, rax
; X64:    mov rdx, rsi
; X64:    adc rdx, rbx
; X64:    mov rax, rdi
; X64:    add rax, rcx
; X64:    mov rbx, rsi
; X64:    adc rbx, rdx
; X64:    add rsp, 0x58
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
  %2 = add nsw i128 %0, %1
  %3 = add nsw i128 %0, %2
  %4 = add nsw i128 %0, %3
  ret void
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
