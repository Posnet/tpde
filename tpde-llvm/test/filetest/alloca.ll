; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm --target=x86_64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel --section=.text --section=.rodata - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always


define ptr @alloca_empty() {
; X64-LABEL: alloca_empty>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rbp - 0x1]
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: alloca_empty>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x29, #0x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
    %a = alloca {}
    ret ptr %a
}

define ptr @dynalloca_empty() {
; X64-LABEL: dynalloca_empty>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: dynalloca_empty>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
    br label %bb1
bb1:
    %a = alloca {}
    ret ptr %a
}

define ptr @dynalloca_empty_array(i64 %0) {
; X64-LABEL: dynalloca_empty_array>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    xor edi, edi
; X64-NEXT:    sub rsp, rdi
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rdi, rsp
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: dynalloca_empty_array>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
    %a = alloca {}, i64 %0
    ret ptr %a
}

define void @dyn_alloca_const() {
; X64-LABEL: dyn_alloca_const>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rsp, 0x10
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov qword ptr [rax], rax
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_const>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub sp, sp, #0x10
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    str x0, [x0]
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %0 = alloca ptr
    store ptr %0, ptr %0
    ret void
}

define void @dyn_alloca_const_align_32() {
; X64-LABEL: dyn_alloca_const_align_32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rsp, 0x10
; X64-NEXT:    and rsp, -0x20
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: dyn_alloca_const_align_32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub sp, sp, #0x10
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    and sp, x0, #0xffffffffffffffe0
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %0 = alloca i32, align 32
    ret void
}

define void @dyn_alloca_const_align_32_ptr() {
; X64-LABEL: dyn_alloca_const_align_32_ptr>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rsp, 0x10
; X64-NEXT:    and rsp, -0x20
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov qword ptr [rax], rax
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_const_align_32_ptr>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub sp, sp, #0x10
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    and sp, x0, #0xffffffffffffffe0
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    str x0, [x0]
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %0 = alloca ptr, align 32
    store ptr %0, ptr %0
    ret void
}

define void @dyn_alloca_dyn_i8_cnt_i64(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_i8_cnt_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_dyn_i8_cnt_i64>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca i8, i64 %0
    ret void
}

define void @dyn_alloca_dyn_i8_cnt_i32(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_i8_cnt_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_dyn_i8_cnt_i32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca i8, i32 %0
    ret void
}


define void @dyn_alloca_dyn_i32_cnt_i64(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_i32_cnt_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    shl rbx, 0x2
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: dyn_alloca_dyn_i32_cnt_i64>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    sub x19, sp, x19, lsl #2
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca i32, i64 %0
    ret void
}

define void @dyn_alloca_dyn_i32_cnt_i32(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_i32_cnt_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    shl rbx, 0x2
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_dyn_i32_cnt_i32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    sub x19, sp, x19, lsl #2
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca i32, i32 %0
    ret void
}


%struct.i32_3 = type { i32, i32, i32 }

define void @dyn_alloca_dyn_si3_cnt_i64(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    imul rbx, rbx, 0xc
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: dyn_alloca_dyn_si3_cnt_i64>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov x0, #0xc // =12
; ARM64-NEXT:    mul x19, x19, x0
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i64 %0
    ret void
}

define void @dyn_alloca_dyn_si3_cnt_i32(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    imul rbx, rbx, 0xc
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_dyn_si3_cnt_i32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov x0, #0xc // =12
; ARM64-NEXT:    mul x19, x19, x0
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1

bb1:
    %1 = alloca %struct.i32_3, i32 %0
    ret void
}

; TODO: this should zero-extend
define void @dyn_alloca_dyn_si3_cnt_i16(i16 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    imul rbx, rbx, 0xc
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_dyn_si3_cnt_i16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov x0, #0xc // =12
; ARM64-NEXT:    mul x19, x19, x0
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i16 %0
    ret void
}



define i64 @dyn_alloca_dyn_i8_cnt_i64_no_salvage(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_i8_cnt_i64_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: dyn_alloca_dyn_i8_cnt_i64_no_salvage>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca i8, i64 %0
    ret i64 %0
}

define i32 @dyn_alloca_dyn_i32_cnt_i32_no_salvage(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_i32_cnt_i32_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    shl rax, 0x2
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: dyn_alloca_dyn_i32_cnt_i32_no_salvage>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    sub x0, sp, x0, lsl #2
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca i32, i32 %0
    ret i32 %0
}

define i64 @dyn_alloca_dyn_si3_cnt_i64_no_salvage(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i64_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    imul rax, rax, 0xc
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_dyn_si3_cnt_i64_no_salvage>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    mov x1, #0xc // =12
; ARM64-NEXT:    mul x0, x0, x1
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i64 %0
    ret i64 %0
}

define i32 @dyn_alloca_dyn_si3_cnt_i32_no_salvage(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i32_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    imul rax, rax, 0xc
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: dyn_alloca_dyn_si3_cnt_i32_no_salvage>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov x1, #0xc // =12
; ARM64-NEXT:    mul x0, x0, x1
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i32 %0
    ret i32 %0
}

define i16 @dyn_alloca_dyn_si3_cnt_i16_no_salvage(i16 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i16_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    imul rax, rax, 0xc
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: dyn_alloca_dyn_si3_cnt_i16_no_salvage>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov x1, #0xc // =12
; ARM64-NEXT:    mul x0, x0, x1
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i16 %0
    ret i16 %0
}

; COM: TODO
;declare void @func_9args(ptr, i64, i64, i64, i64, i64, i64, i64, i64)

;define void @dyn_alloca_correct_sp_ptr(i64 %0) {
;entry:
;    %1 = alloca i64
;    %2 = alloca i64, i64 %0
;    call void @func_9args(ptr %1, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0)
;    ret void
;}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
