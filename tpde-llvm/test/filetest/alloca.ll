; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm --target=x86_64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel --section=.text --section=.rodata - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always


define ptr @alloca_empty() {
; X64-LABEL: alloca_empty>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rbp - 0x1]
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: alloca_empty>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x29, #0x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
    %a = alloca {}
    ret ptr %a
}

define ptr @dynalloca_empty() {
; X64-LABEL: dynalloca_empty>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: dynalloca_empty>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
    br label %bb1
bb1:
    %a = alloca {}
    ret ptr %a
}

define ptr @dynalloca_empty_array(i64 %0) {
; X64-LABEL: dynalloca_empty_array>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    xor edi, edi
; X64-NEXT:    sub rsp, rdi
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rdi, rsp
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: dynalloca_empty_array>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
    %a = alloca {}, i64 %0
    ret ptr %a
}

define void @dyn_alloca_const() {
; X64-LABEL: dyn_alloca_const>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rsp, 0x10
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov qword ptr [rax], rax
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_const>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub sp, sp, #0x10
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    str x0, [x0]
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %0 = alloca ptr
    store ptr %0, ptr %0
    ret void
}

define void @dyn_alloca_const_align_32() {
; X64-LABEL: dyn_alloca_const_align_32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rsp, 0x10
; X64-NEXT:    and rsp, -0x20
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: dyn_alloca_const_align_32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub sp, sp, #0x10
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    and sp, x0, #0xffffffffffffffe0
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %0 = alloca i32, align 32
    ret void
}

define void @dyn_alloca_const_align_32_ptr() {
; X64-LABEL: dyn_alloca_const_align_32_ptr>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rsp, 0x10
; X64-NEXT:    and rsp, -0x20
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov qword ptr [rax], rax
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_const_align_32_ptr>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub sp, sp, #0x10
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    and sp, x0, #0xffffffffffffffe0
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    str x0, [x0]
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %0 = alloca ptr, align 32
    store ptr %0, ptr %0
    ret void
}

define void @dyn_alloca_dyn_i8_cnt_i64(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_i8_cnt_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_dyn_i8_cnt_i64>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca i8, i64 %0
    ret void
}

define void @dyn_alloca_dyn_i8_cnt_i32(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_i8_cnt_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_dyn_i8_cnt_i32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca i8, i32 %0
    ret void
}


define void @dyn_alloca_dyn_i32_cnt_i64(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_i32_cnt_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    shl rbx, 0x2
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: dyn_alloca_dyn_i32_cnt_i64>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    sub x19, sp, x19, lsl #2
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca i32, i64 %0
    ret void
}

define void @dyn_alloca_dyn_i32_cnt_i32(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_i32_cnt_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    shl rbx, 0x2
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_dyn_i32_cnt_i32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    sub x19, sp, x19, lsl #2
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca i32, i32 %0
    ret void
}


%struct.i32_3 = type { i32, i32, i32 }

define void @dyn_alloca_dyn_si3_cnt_i64(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    imul rbx, rbx, 0xc
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: dyn_alloca_dyn_si3_cnt_i64>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov x0, #0xc // =12
; ARM64-NEXT:    mul x19, x19, x0
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i64 %0
    ret void
}

define void @dyn_alloca_dyn_si3_cnt_i32(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    imul rbx, rbx, 0xc
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_dyn_si3_cnt_i32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov x0, #0xc // =12
; ARM64-NEXT:    mul x19, x19, x0
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1

bb1:
    %1 = alloca %struct.i32_3, i32 %0
    ret void
}

; TODO: this should zero-extend
define void @dyn_alloca_dyn_si3_cnt_i16(i16 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    imul rbx, rbx, 0xc
; X64-NEXT:    sub rsp, rbx
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rbx, rsp
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_dyn_si3_cnt_i16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov x0, #0xc // =12
; ARM64-NEXT:    mul x19, x19, x0
; ARM64-NEXT:    sub x19, sp, x19
; ARM64-NEXT:    and x19, x19, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i16 %0
    ret void
}



define i64 @dyn_alloca_dyn_i8_cnt_i64_no_salvage(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_i8_cnt_i64_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: dyn_alloca_dyn_i8_cnt_i64_no_salvage>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca i8, i64 %0
    ret i64 %0
}

define i32 @dyn_alloca_dyn_i32_cnt_i32_no_salvage(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_i32_cnt_i32_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    shl rax, 0x2
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: dyn_alloca_dyn_i32_cnt_i32_no_salvage>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    sub x0, sp, x0, lsl #2
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca i32, i32 %0
    ret i32 %0
}

define i64 @dyn_alloca_dyn_si3_cnt_i64_no_salvage(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i64_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov rbx, rdi
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    imul rax, rax, 0xc
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: dyn_alloca_dyn_si3_cnt_i64_no_salvage>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov x19, x0
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    mov x1, #0xc // =12
; ARM64-NEXT:    mul x0, x0, x1
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov x0, x19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i64 %0
    ret i64 %0
}

define i32 @dyn_alloca_dyn_si3_cnt_i32_no_salvage(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i32_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    imul rax, rax, 0xc
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: dyn_alloca_dyn_si3_cnt_i32_no_salvage>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov x1, #0xc // =12
; ARM64-NEXT:    mul x0, x0, x1
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i32 %0
    ret i32 %0
}

define i16 @dyn_alloca_dyn_si3_cnt_i16_no_salvage(i16 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i16_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x38
; X64-NEXT:    mov ebx, edi
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    imul rax, rax, 0xc
; X64-NEXT:    sub rsp, rax
; X64-NEXT:    and rsp, -0x10
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    lea rsp, [rbp - 0x8]
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: dyn_alloca_dyn_si3_cnt_i16_no_salvage>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str x19, [x29, #0x10]
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov x1, #0xc // =12
; ARM64-NEXT:    mul x0, x0, x1
; ARM64-NEXT:    sub x0, sp, x0
; ARM64-NEXT:    and x0, x0, #0xfffffffffffffff0
; ARM64-NEXT:    mov sp, x0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldr x19, [x29, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i16 %0
    ret i16 %0
}

define ptr @alloca_align_4k() {
; X64-LABEL: alloca_align_4k>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rsp, 0x10
; X64-NEXT:    and rsp, -0x1000
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: alloca_align_4k>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub sp, sp, #0x10
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    and sp, x0, #0xfffffffffffff000
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
    %a = alloca i32, align 4096
    ret ptr %a
}

define ptr @dynalloca_align_4k() {
; X64-LABEL: dynalloca_align_4k>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sub rsp, 0x10
; X64-NEXT:    and rsp, -0x1000
; X64-NEXT:    mov rax, rsp
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: dynalloca_align_4k>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub sp, sp, #0x10
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    and sp, x0, #0xfffffffffffff000
; ARM64-NEXT:    mov x0, sp
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
    br label %bb1
bb1:
    %a = alloca i32, align 4096
    ret ptr %a
}

; Reduced test case causing register exhaustion during spilling.
declare void @f1(i32, ...);
define void @f2(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4, ptr %5, ptr %6, ptr %7, ptr %8, ptr %9, ptr %10, ptr %11, ptr %12, ptr %13, ptr %14, ptr %15, ptr %16, ptr %17, ptr %18, ptr %19, ptr %20, ptr %21, ptr %22, ptr %23) {
; X64-LABEL: f2>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    push r13
; X64-NEXT:    push r14
; X64-NEXT:    push r15
; X64-NEXT:    sub rsp, 0x9d28
; X64-NEXT:    mov rax, qword ptr [rbp + 0x10]
; X64-NEXT:    mov qword ptr [rbp - 0x9ca0], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x18]
; X64-NEXT:    mov qword ptr [rbp - 0x9ca8], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x20]
; X64-NEXT:    mov qword ptr [rbp - 0x9cb0], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x28]
; X64-NEXT:    mov qword ptr [rbp - 0x9cb8], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x30]
; X64-NEXT:    mov qword ptr [rbp - 0x9cc0], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x38]
; X64-NEXT:    mov qword ptr [rbp - 0x9cc8], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x40]
; X64-NEXT:    mov qword ptr [rbp - 0x9cd0], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x48]
; X64-NEXT:    mov qword ptr [rbp - 0x9cd8], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x50]
; X64-NEXT:    mov qword ptr [rbp - 0x9ce0], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x58]
; X64-NEXT:    mov qword ptr [rbp - 0x9ce8], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x60]
; X64-NEXT:    mov qword ptr [rbp - 0x9cf0], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x68]
; X64-NEXT:    mov qword ptr [rbp - 0x9cf8], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x70]
; X64-NEXT:    mov qword ptr [rbp - 0x9d00], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x78]
; X64-NEXT:    mov qword ptr [rbp - 0x9d08], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x80]
; X64-NEXT:    mov qword ptr [rbp - 0x9d10], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x88]
; X64-NEXT:    mov qword ptr [rbp - 0x9d18], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x90]
; X64-NEXT:    mov qword ptr [rbp - 0x9d20], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x98]
; X64-NEXT:    mov qword ptr [rbp - 0x9d28], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9cb0]
; X64-NEXT:    mov rbx, qword ptr [rbp - 0x9cb8]
; X64-NEXT:    mov r10, qword ptr [rbp - 0x9cc0]
; X64-NEXT:    mov r11, qword ptr [rbp - 0x9cc8]
; X64-NEXT:    mov r12, qword ptr [rbp - 0x9cd0]
; X64-NEXT:    mov r13, qword ptr [rbp - 0x9cd8]
; X64-NEXT:    mov r14, qword ptr [rbp - 0x9ce0]
; X64-NEXT:    mov r15, qword ptr [rbp - 0x9ce8]
; X64-NEXT:    mov qword ptr [rbp - 0x9d30], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9cf0]
; X64-NEXT:    mov qword ptr [rbp - 0x9c88], rcx
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x9cf8]
; X64-NEXT:    mov qword ptr [rbp - 0x9c80], rdx
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x9d00]
; X64-NEXT:    mov qword ptr [rbp - 0x9cb0], rbx
; X64-NEXT:    mov rbx, qword ptr [rbp - 0x9d08]
; X64-NEXT:    mov qword ptr [rbp - 0x9c78], rsi
; X64-NEXT:    mov rsi, qword ptr [rbp - 0x9d10]
; X64-NEXT:    mov qword ptr [rbp - 0x30], rdi
; X64-NEXT:    mov rdi, qword ptr [rbp - 0x9d18]
; X64-NEXT:    mov qword ptr [rbp - 0x9c90], r8
; X64-NEXT:    mov r8, qword ptr [rbp - 0x9d20]
; X64-NEXT:    mov qword ptr [rbp - 0x9c98], r9
; X64-NEXT:    mov r9, qword ptr [rbp - 0x9d28]
; X64-NEXT:    mov qword ptr [rbp - 0x9cb8], r10
; X64-NEXT:    mov r10, qword ptr [rbp - 0x30]
; X64-NEXT:    mov qword ptr [rbp - 0x9ce8], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x30], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9d38], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9d40], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    sub rsp, 0x130
; X64-NEXT:    mov qword ptr [rbp - 0x9d10], rdi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9d08], rsi
; X64-NEXT:    mov esi, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9cf8], rdx
; X64-NEXT:    mov edx, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9cf0], rcx
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9d18], r8
; X64-NEXT:    mov r8d, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9d20], r9
; X64-NEXT:    mov r9d, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x9d48], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x8], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x10], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x18], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x20], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x28], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x30], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x38], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rsp + 0x40], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9c78]
; X64-NEXT:    mov qword ptr [rsp + 0x48], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9d30]
; X64-NEXT:    mov qword ptr [rsp + 0x50], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9cb0]
; X64-NEXT:    mov qword ptr [rsp + 0x58], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9cb8]
; X64-NEXT:    mov qword ptr [rsp + 0x60], rax
; X64-NEXT:    mov rax, r11
; X64-NEXT:    mov qword ptr [rsp + 0x68], rax
; X64-NEXT:    mov rax, r12
; X64-NEXT:    mov qword ptr [rsp + 0x70], rax
; X64-NEXT:    mov rax, r13
; X64-NEXT:    mov qword ptr [rsp + 0x78], rax
; X64-NEXT:    mov rax, r14
; X64-NEXT:    mov qword ptr [rsp + 0x80], rax
; X64-NEXT:    mov rax, r15
; X64-NEXT:    mov qword ptr [rsp + 0x88], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9ce8]
; X64-NEXT:    mov qword ptr [rsp + 0x90], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9cf0]
; X64-NEXT:    mov qword ptr [rsp + 0x98], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9cf8]
; X64-NEXT:    mov qword ptr [rsp + 0xa0], rax
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    mov qword ptr [rsp + 0xa8], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9d08]
; X64-NEXT:    mov qword ptr [rsp + 0xb0], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9d10]
; X64-NEXT:    mov qword ptr [rsp + 0xb8], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9d18]
; X64-NEXT:    mov qword ptr [rsp + 0xc0], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9d20]
; X64-NEXT:    mov qword ptr [rsp + 0xc8], rax
; X64-NEXT:    mov rax, r10
; X64-NEXT:    mov qword ptr [rsp + 0xd0], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x30]
; X64-NEXT:    mov qword ptr [rsp + 0xd8], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9d38]
; X64-NEXT:    mov qword ptr [rsp + 0xe0], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9c80]
; X64-NEXT:    mov qword ptr [rsp + 0xe8], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9c88]
; X64-NEXT:    mov qword ptr [rsp + 0xf0], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9c90]
; X64-NEXT:    mov qword ptr [rsp + 0xf8], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9c98]
; X64-NEXT:    mov qword ptr [rsp + 0x100], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9ca0]
; X64-NEXT:    mov qword ptr [rsp + 0x108], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9ca8]
; X64-NEXT:    mov qword ptr [rsp + 0x110], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9d40]
; X64-NEXT:    mov qword ptr [rsp + 0x118], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x9d48]
; X64-NEXT:    mov qword ptr [rsp + 0x120], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 f1-0x4
; X64-NEXT:    add rsp, 0x130
; X64-NEXT:    add rsp, 0x9d28
; X64-NEXT:    pop r15
; X64-NEXT:    pop r14
; X64-NEXT:    pop r13
; X64-NEXT:    pop r12
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: f2>:
; ARM64:         sub sp, sp, #0xa, lsl #12 // =0xa000
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    stp x21, x22, [sp, #0x20]
; ARM64-NEXT:    stp x23, x24, [sp, #0x30]
; ARM64-NEXT:    stp x25, x26, [sp, #0x40]
; ARM64-NEXT:    stp x27, x28, [sp, #0x50]
; ARM64-NEXT:    add x8, sp, #0xa, lsl #12 // =0xa000
; ARM64-NEXT:    ldr x9, [x8]
; ARM64-NEXT:    mov x10, #0x9d20 // =40224
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x8]
; ARM64-NEXT:    mov x10, #0x9d28 // =40232
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x10]
; ARM64-NEXT:    mov x10, #0x9d30 // =40240
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x18]
; ARM64-NEXT:    mov x10, #0x9d38 // =40248
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x20]
; ARM64-NEXT:    mov x10, #0x9d40 // =40256
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x28]
; ARM64-NEXT:    mov x10, #0x9d48 // =40264
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x30]
; ARM64-NEXT:    mov x10, #0x9d50 // =40272
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x38]
; ARM64-NEXT:    mov x10, #0x9d58 // =40280
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x40]
; ARM64-NEXT:    mov x10, #0x9d60 // =40288
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x48]
; ARM64-NEXT:    mov x10, #0x9d68 // =40296
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x50]
; ARM64-NEXT:    mov x10, #0x9d70 // =40304
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x58]
; ARM64-NEXT:    mov x10, #0x9d78 // =40312
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x60]
; ARM64-NEXT:    mov x10, #0x9d80 // =40320
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x68]
; ARM64-NEXT:    mov x10, #0x9d88 // =40328
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x70]
; ARM64-NEXT:    mov x10, #0x9d90 // =40336
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x78]
; ARM64-NEXT:    mov x10, #0x9d98 // =40344
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    mov x9, #0x9d20 // =40224
; ARM64-NEXT:    add x9, x29, w9, uxtw
; ARM64-NEXT:    ldr x8, [x9]
; ARM64-NEXT:    mov x10, #0x9d28 // =40232
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    ldr x9, [x10]
; ARM64-NEXT:    mov x11, #0x9d30 // =40240
; ARM64-NEXT:    add x11, x29, w11, uxtw
; ARM64-NEXT:    ldr x10, [x11]
; ARM64-NEXT:    mov x12, #0x9d38 // =40248
; ARM64-NEXT:    add x12, x29, w12, uxtw
; ARM64-NEXT:    ldr x11, [x12]
; ARM64-NEXT:    mov x13, #0x9d40 // =40256
; ARM64-NEXT:    add x13, x29, w13, uxtw
; ARM64-NEXT:    ldr x12, [x13]
; ARM64-NEXT:    mov x14, #0x9d48 // =40264
; ARM64-NEXT:    add x14, x29, w14, uxtw
; ARM64-NEXT:    ldr x13, [x14]
; ARM64-NEXT:    mov x15, #0x9d50 // =40272
; ARM64-NEXT:    add x15, x29, w15, uxtw
; ARM64-NEXT:    ldr x14, [x15]
; ARM64-NEXT:    mov x18, #0x9d58 // =40280
; ARM64-NEXT:    add x18, x29, w18, uxtw
; ARM64-NEXT:    ldr x15, [x18]
; ARM64-NEXT:    mov x19, #0x9d60 // =40288
; ARM64-NEXT:    add x19, x29, w19, uxtw
; ARM64-NEXT:    ldr x18, [x19]
; ARM64-NEXT:    mov x20, #0x9d68 // =40296
; ARM64-NEXT:    add x20, x29, w20, uxtw
; ARM64-NEXT:    ldr x19, [x20]
; ARM64-NEXT:    mov x21, #0x9d70 // =40304
; ARM64-NEXT:    add x21, x29, w21, uxtw
; ARM64-NEXT:    ldr x20, [x21]
; ARM64-NEXT:    mov x22, #0x9d78 // =40312
; ARM64-NEXT:    add x22, x29, w22, uxtw
; ARM64-NEXT:    ldr x21, [x22]
; ARM64-NEXT:    mov x23, #0x9d80 // =40320
; ARM64-NEXT:    add x23, x29, w23, uxtw
; ARM64-NEXT:    ldr x22, [x23]
; ARM64-NEXT:    mov x24, #0x9d88 // =40328
; ARM64-NEXT:    add x24, x29, w24, uxtw
; ARM64-NEXT:    ldr x23, [x24]
; ARM64-NEXT:    mov x25, #0x9d90 // =40336
; ARM64-NEXT:    add x25, x29, w25, uxtw
; ARM64-NEXT:    ldr x24, [x25]
; ARM64-NEXT:    mov x26, #0x9d98 // =40344
; ARM64-NEXT:    add x26, x29, w26, uxtw
; ARM64-NEXT:    ldr x25, [x26]
; ARM64-NEXT:    mov w26, #0x0 // =0
; ARM64-NEXT:    mov w27, #0x0 // =0
; ARM64-NEXT:    mov w28, #0x0 // =0
; ARM64-NEXT:    mov w30, #0x0 // =0
; ARM64-NEXT:    sub sp, sp, #0x120
; ARM64-NEXT:    add x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x0, [x29, #0xd98]
; ARM64-NEXT:    sub x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x1, [x29, #0xce8]
; ARM64-NEXT:    sub x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    add x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x2, [x29, #0xcf0]
; ARM64-NEXT:    sub x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    mov w2, #0x0 // =0
; ARM64-NEXT:    add x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x3, [x29, #0xcf8]
; ARM64-NEXT:    sub x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    mov w3, #0x0 // =0
; ARM64-NEXT:    add x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x4, [x29, #0xd00]
; ARM64-NEXT:    sub x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    mov w4, #0x0 // =0
; ARM64-NEXT:    add x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x5, [x29, #0xd08]
; ARM64-NEXT:    sub x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    mov w5, #0x0 // =0
; ARM64-NEXT:    add x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x6, [x29, #0xd10]
; ARM64-NEXT:    sub x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    mov w6, #0x0 // =0
; ARM64-NEXT:    add x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x7, [x29, #0xd18]
; ARM64-NEXT:    sub x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    mov w7, #0x0 // =0
; ARM64-NEXT:    add x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x8, [x29, #0xda0]
; ARM64-NEXT:    sub x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    str x8, [sp]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    str x8, [sp, #0x8]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    str x8, [sp, #0x10]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    str x8, [sp, #0x18]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    str x8, [sp, #0x20]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    str x8, [sp, #0x28]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    str x8, [sp, #0x30]
; ARM64-NEXT:    add x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    str x9, [x29, #0xd20]
; ARM64-NEXT:    sub x29, x29, #0x9, lsl #12 // =0x9000
; ARM64-NEXT:    mov x9, #0x9ce8 // =40168
; ARM64-NEXT:    add x9, x29, w9, uxtw
; ARM64-NEXT:    ldr x8, [x9]
; ARM64-NEXT:    str x8, [sp, #0x38]
; ARM64-NEXT:    mov x9, #0x9da0 // =40352
; ARM64-NEXT:    add x9, x29, w9, uxtw
; ARM64-NEXT:    ldr x8, [x9]
; ARM64-NEXT:    str x8, [sp, #0x40]
; ARM64-NEXT:    mov x9, #0x9d20 // =40224
; ARM64-NEXT:    add x9, x29, w9, uxtw
; ARM64-NEXT:    ldr x8, [x9]
; ARM64-NEXT:    str x8, [sp, #0x48]
; ARM64-NEXT:    mov x8, x10
; ARM64-NEXT:    str x8, [sp, #0x50]
; ARM64-NEXT:    mov x8, x11
; ARM64-NEXT:    str x8, [sp, #0x58]
; ARM64-NEXT:    mov x8, x12
; ARM64-NEXT:    str x8, [sp, #0x60]
; ARM64-NEXT:    mov x8, x13
; ARM64-NEXT:    str x8, [sp, #0x68]
; ARM64-NEXT:    mov x8, x14
; ARM64-NEXT:    str x8, [sp, #0x70]
; ARM64-NEXT:    mov x8, x15
; ARM64-NEXT:    str x8, [sp, #0x78]
; ARM64-NEXT:    mov x8, x18
; ARM64-NEXT:    str x8, [sp, #0x80]
; ARM64-NEXT:    mov x8, x19
; ARM64-NEXT:    str x8, [sp, #0x88]
; ARM64-NEXT:    mov x8, x20
; ARM64-NEXT:    str x8, [sp, #0x90]
; ARM64-NEXT:    mov x8, x21
; ARM64-NEXT:    str x8, [sp, #0x98]
; ARM64-NEXT:    mov x8, x22
; ARM64-NEXT:    str x8, [sp, #0xa0]
; ARM64-NEXT:    mov x8, x23
; ARM64-NEXT:    str x8, [sp, #0xa8]
; ARM64-NEXT:    mov x8, x24
; ARM64-NEXT:    str x8, [sp, #0xb0]
; ARM64-NEXT:    mov x8, x25
; ARM64-NEXT:    str x8, [sp, #0xb8]
; ARM64-NEXT:    mov x9, #0x9d98 // =40344
; ARM64-NEXT:    add x9, x29, w9, uxtw
; ARM64-NEXT:    ldr x8, [x9]
; ARM64-NEXT:    str x8, [sp, #0xc0]
; ARM64-NEXT:    mov x8, x26
; ARM64-NEXT:    str x8, [sp, #0xc8]
; ARM64-NEXT:    mov x8, x27
; ARM64-NEXT:    str x8, [sp, #0xd0]
; ARM64-NEXT:    mov x9, #0x9cf0 // =40176
; ARM64-NEXT:    add x9, x29, w9, uxtw
; ARM64-NEXT:    ldr x8, [x9]
; ARM64-NEXT:    str x8, [sp, #0xd8]
; ARM64-NEXT:    mov x9, #0x9cf8 // =40184
; ARM64-NEXT:    add x9, x29, w9, uxtw
; ARM64-NEXT:    ldr x8, [x9]
; ARM64-NEXT:    str x8, [sp, #0xe0]
; ARM64-NEXT:    mov x9, #0x9d00 // =40192
; ARM64-NEXT:    add x9, x29, w9, uxtw
; ARM64-NEXT:    ldr x8, [x9]
; ARM64-NEXT:    str x8, [sp, #0xe8]
; ARM64-NEXT:    mov x9, #0x9d08 // =40200
; ARM64-NEXT:    add x9, x29, w9, uxtw
; ARM64-NEXT:    ldr x8, [x9]
; ARM64-NEXT:    str x8, [sp, #0xf0]
; ARM64-NEXT:    mov x9, #0x9d10 // =40208
; ARM64-NEXT:    add x9, x29, w9, uxtw
; ARM64-NEXT:    ldr x8, [x9]
; ARM64-NEXT:    str x8, [sp, #0xf8]
; ARM64-NEXT:    mov x9, #0x9d18 // =40216
; ARM64-NEXT:    add x9, x29, w9, uxtw
; ARM64-NEXT:    ldr x8, [x9]
; ARM64-NEXT:    str x8, [sp, #0x100]
; ARM64-NEXT:    mov x8, x28
; ARM64-NEXT:    str x8, [sp, #0x108]
; ARM64-NEXT:    mov x8, x30
; ARM64-NEXT:    str x8, [sp, #0x110]
; ARM64-NEXT:    bl 0xdf8 <f2+0x3f8>
; ARM64-NEXT:     R_AARCH64_CALL26 f1
; ARM64-NEXT:    add sp, sp, #0x120
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldp x19, x20, [sp, #0x10]
; ARM64-NEXT:    ldp x21, x22, [sp, #0x20]
; ARM64-NEXT:    ldp x23, x24, [sp, #0x30]
; ARM64-NEXT:    ldp x25, x26, [sp, #0x40]
; ARM64-NEXT:    ldp x27, x28, [sp, #0x50]
; ARM64-NEXT:    add sp, sp, #0xa, lsl #12 // =0xa000
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %25 = alloca [10000 x i32], align 4
  %26 = getelementptr i8, ptr %8, i64 0
  %27 = getelementptr i8, ptr %9, i64 0
  %28 = getelementptr i8, ptr %10, i64 0
  %29 = getelementptr i8, ptr %11, i64 0
  %30 = getelementptr i8, ptr %12, i64 0
  %31 = getelementptr i8, ptr %13, i64 0
  %32 = getelementptr i8, ptr %14, i64 0
  %33 = getelementptr i8, ptr %15, i64 0
  %34 = getelementptr i8, ptr %16, i64 0
  %35 = getelementptr i8, ptr %17, i64 0
  %36 = getelementptr i8, ptr %18, i64 0
  %37 = getelementptr i8, ptr %19, i64 0
  %38 = getelementptr i8, ptr %20, i64 0
  %39 = getelementptr i8, ptr %21, i64 0
  %40 = getelementptr i8, ptr %22, i64 0
  %41 = getelementptr i8, ptr %23, i64 0
  %42 = getelementptr i8, ptr %0, i64 0
  %43 = getelementptr i8, ptr null, i64 0
  %44 = getelementptr i8, ptr null, i64 0
  %45 = getelementptr i8, ptr null, i64 0
  %46 = getelementptr i8, ptr null, i64 0
  call void (i32, ...) @f1(i32 0, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr null, ptr %1, ptr %26, ptr %27, ptr %28, ptr %29, ptr %30, ptr %31, ptr %32, ptr %33, ptr %34, ptr %35, ptr %36, ptr %37, ptr %38, ptr %39, ptr %40, ptr %41, ptr %42, ptr %43, ptr %44, ptr %2, ptr %3, ptr %4, ptr %5, ptr %6, ptr %7, ptr %45, ptr %46)
  ret void
}

define void @alloca_manyregs(i32 %0, ptr %1, ptr %2, ptr %3, i64 %4, i32 %5, ptr %r1, ptr %6, ptr %7, ptr %t, ptr %q, ptr %r, i64 %8, i32 %9, i64 %10, ptr %m, ptr %11, ptr %12, i32 %13, i64 %14, i32 %15, ptr %16, ptr %17, i64 %18, i32 %19, i32 %20, i32 %21) {
; X64-LABEL: alloca_manyregs>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    push r13
; X64-NEXT:    push r14
; X64-NEXT:    push r15
; X64-NEXT:    sub rsp, 0x40818
; X64-NEXT:    mov rax, qword ptr [rbp + 0x10]
; X64-NEXT:    mov qword ptr [rbp - 0x40798], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x18]
; X64-NEXT:    mov qword ptr [rbp - 0x407a0], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x20]
; X64-NEXT:    mov qword ptr [rbp - 0x407a8], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x28]
; X64-NEXT:    mov qword ptr [rbp - 0x407b0], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x30]
; X64-NEXT:    mov qword ptr [rbp - 0x407b8], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x38]
; X64-NEXT:    mov qword ptr [rbp - 0x407c0], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x40]
; X64-NEXT:    mov qword ptr [rbp - 0x407c8], rax
; X64-NEXT:    mov eax, dword ptr [rbp + 0x48]
; X64-NEXT:    mov dword ptr [rbp - 0x407cc], eax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x50]
; X64-NEXT:    mov qword ptr [rbp - 0x407d8], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x58]
; X64-NEXT:    mov qword ptr [rbp - 0x407e0], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x60]
; X64-NEXT:    mov qword ptr [rbp - 0x407e8], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x68]
; X64-NEXT:    mov qword ptr [rbp - 0x407f0], rax
; X64-NEXT:    mov eax, dword ptr [rbp + 0x70]
; X64-NEXT:    mov dword ptr [rbp - 0x407d0], eax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x78]
; X64-NEXT:    mov qword ptr [rbp - 0x407f8], rax
; X64-NEXT:    mov eax, dword ptr [rbp + 0x80]
; X64-NEXT:    mov dword ptr [rbp - 0x407fc], eax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x88]
; X64-NEXT:    mov qword ptr [rbp - 0x40808], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x90]
; X64-NEXT:    mov qword ptr [rbp - 0x40810], rax
; X64-NEXT:    mov rax, qword ptr [rbp + 0x98]
; X64-NEXT:    mov qword ptr [rbp - 0x40818], rax
; X64-NEXT:    mov eax, dword ptr [rbp + 0xa0]
; X64-NEXT:    mov dword ptr [rbp - 0x40800], eax
; X64-NEXT:    mov eax, dword ptr [rbp + 0xa8]
; X64-NEXT:    mov dword ptr [rbp - 0x4081c], eax
; X64-NEXT:    mov eax, dword ptr [rbp + 0xb0]
; X64-NEXT:    mov dword ptr [rbp - 0x40820], eax
; X64-NEXT:    mov qword ptr [rbp - 0x40788], rcx
; X64-NEXT:    mov qword ptr [rbp - 0x40780], rdx
; X64-NEXT:    mov qword ptr [rbp - 0x30], rsi
; X64-NEXT:    mov dword ptr [rbp - 0x40774], edi
; X64-NEXT:    mov qword ptr [rbp - 0x40790], r8
; X64-NEXT:    mov dword ptr [rbp - 0x40778], r9d
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x40824], eax
; X64-NEXT:  <L0>:
; X64-NEXT:    mov rax, qword ptr [rbp - 0x40788]
; X64-NEXT:    mov rcx, rax
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x40790]
; X64-NEXT:    lea rcx, [rcx + rdx]
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x40778]
; X64-NEXT:    mov ebx, ecx
; X64-NEXT:    or ebx, 0x0
; X64-NEXT:    mov rbx, qword ptr [rbp - 0x40798]
; X64-NEXT:    mov esi, dword ptr [rbx]
; X64-NEXT:    mov rsi, qword ptr [rbp - 0x407a0]
; X64-NEXT:    mov edi, dword ptr [rsi]
; X64-NEXT:    mov rdi, qword ptr [rbp - 0x407a8]
; X64-NEXT:    mov dword ptr [rdi], 0x0
; X64-NEXT:    mov r8, qword ptr [rbp - 0x407b0]
; X64-NEXT:    mov r9d, dword ptr [r8]
; X64-NEXT:    mov r9, qword ptr [rbp - 0x407b8]
; X64-NEXT:    mov r10d, dword ptr [r9]
; X64-NEXT:    mov r10, qword ptr [rbp - 0x407c0]
; X64-NEXT:    mov r11d, dword ptr [r10]
; X64-NEXT:    mov r11, qword ptr [rbp - 0x30]
; X64-NEXT:    mov r12, r11
; X64-NEXT:    mov r12, qword ptr [rbp - 0x407c8]
; X64-NEXT:    cmp r12, 0x0
; X64-NEXT:    mov r13d, 0x0
; X64-NEXT:    sete r13b
; X64-NEXT:    mov r13d, dword ptr [rbp - 0x407cc]
; X64-NEXT:    mov r14d, r13d
; X64-NEXT:    and r14d, 0x0
; X64-NEXT:    mov r14, qword ptr [rbp - 0x407d8]
; X64-NEXT:    cmp r14, 0x0
; X64-NEXT:    mov r15d, 0x0
; X64-NEXT:    sete r15b
; X64-NEXT:    mov r15, qword ptr [rbp - 0x407e0]
; X64-NEXT:    mov eax, dword ptr [r15]
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea eax, [1*rax]
; X64-NEXT:    mov dword ptr [rbp - 0x40828], eax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x407e8]
; X64-NEXT:    mov ecx, dword ptr [rax]
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x407f0]
; X64-NEXT:    mov dword ptr [rcx], 0x0
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x407d0]
; X64-NEXT:    mov dword ptr [0x0], ecx
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x407f8]
; X64-NEXT:    cmp rdx, 0x0
; X64-NEXT:    mov ebx, 0x0
; X64-NEXT:    sete bl
; X64-NEXT:    mov rbx, qword ptr [rbp - 0x40780]
; X64-NEXT:    lea rax, [rbx + 0x4]
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov esi, dword ptr [rbp - 0x407fc]
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    shr eax, cl
; X64-NEXT:    mov rax, qword ptr [rbp - 0x40808]
; X64-NEXT:    mov rcx, rax
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x40810]
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    mov rdi, qword ptr [rbp - 0x40818]
; X64-NEXT:    lea rax, [rax + 4*rdi]
; X64-NEXT:    mov eax, dword ptr [rbp - 0x40800]
; X64-NEXT:    mov ecx, eax
; X64-NEXT:    and ecx, dword ptr [rbp - 0x4081c]
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x40820]
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    shr eax, 0x0
; X64-NEXT:    mov eax, dword ptr [rbp - 0x40774]
; X64-NEXT:    mov ecx, eax
; X64-NEXT:    or ecx, 0x0
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x40828]
; X64-NEXT:    mov dword ptr [rbp - 0x40824], ecx
; X64-NEXT:    jmp <L0>
;
; ARM64-LABEL: alloca_manyregs>:
; ARM64:         sub sp, sp, #0x41, lsl #12 // =0x41000
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    stp x21, x22, [sp, #0x20]
; ARM64-NEXT:    stp x23, x24, [sp, #0x30]
; ARM64-NEXT:    stp x25, x26, [sp, #0x40]
; ARM64-NEXT:    stp x27, x28, [sp, #0x50]
; ARM64-NEXT:    add x8, sp, #0x41, lsl #12 // =0x41000
; ARM64-NEXT:    ldr x9, [x8]
; ARM64-NEXT:    mov x10, #0x818 // =2072
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x8]
; ARM64-NEXT:    mov x10, #0x820 // =2080
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x10]
; ARM64-NEXT:    mov x10, #0x828 // =2088
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x18]
; ARM64-NEXT:    mov x10, #0x830 // =2096
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x20]
; ARM64-NEXT:    mov x10, #0x838 // =2104
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr w9, [x8, #0x28]
; ARM64-NEXT:    mov x10, #0x840 // =2112
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str w9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x30]
; ARM64-NEXT:    mov x10, #0x848 // =2120
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x38]
; ARM64-NEXT:    mov x10, #0x850 // =2128
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x40]
; ARM64-NEXT:    mov x10, #0x858 // =2136
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x48]
; ARM64-NEXT:    mov x10, #0x860 // =2144
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr w9, [x8, #0x50]
; ARM64-NEXT:    mov x10, #0x844 // =2116
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str w9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x58]
; ARM64-NEXT:    mov x10, #0x868 // =2152
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr w9, [x8, #0x60]
; ARM64-NEXT:    mov x10, #0x870 // =2160
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str w9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x68]
; ARM64-NEXT:    mov x10, #0x878 // =2168
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x70]
; ARM64-NEXT:    mov x10, #0x880 // =2176
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr x9, [x8, #0x78]
; ARM64-NEXT:    mov x10, #0x888 // =2184
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str x9, [x10]
; ARM64-NEXT:    ldr w9, [x8, #0x80]
; ARM64-NEXT:    mov x10, #0x874 // =2164
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str w9, [x10]
; ARM64-NEXT:    ldr w9, [x8, #0x88]
; ARM64-NEXT:    mov x10, #0x890 // =2192
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str w9, [x10]
; ARM64-NEXT:    ldr w9, [x8, #0x90]
; ARM64-NEXT:    mov x10, #0x894 // =2196
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    str w9, [x10]
; ARM64-NEXT:    mov x8, #0x7e0 // =2016
; ARM64-NEXT:    movk x8, #0x4, lsl #16
; ARM64-NEXT:    add x8, x29, w8, uxtw
; ARM64-NEXT:    str w0, [x8]
; ARM64-NEXT:    mov x8, #0x7e8 // =2024
; ARM64-NEXT:    movk x8, #0x4, lsl #16
; ARM64-NEXT:    add x8, x29, w8, uxtw
; ARM64-NEXT:    str x1, [x8]
; ARM64-NEXT:    mov x8, #0x7f0 // =2032
; ARM64-NEXT:    movk x8, #0x4, lsl #16
; ARM64-NEXT:    add x8, x29, w8, uxtw
; ARM64-NEXT:    str x2, [x8]
; ARM64-NEXT:    mov x8, #0x7f8 // =2040
; ARM64-NEXT:    movk x8, #0x4, lsl #16
; ARM64-NEXT:    add x8, x29, w8, uxtw
; ARM64-NEXT:    str x3, [x8]
; ARM64-NEXT:    mov x8, #0x800 // =2048
; ARM64-NEXT:    movk x8, #0x4, lsl #16
; ARM64-NEXT:    add x8, x29, w8, uxtw
; ARM64-NEXT:    str x4, [x8]
; ARM64-NEXT:    mov x8, #0x7e4 // =2020
; ARM64-NEXT:    movk x8, #0x4, lsl #16
; ARM64-NEXT:    add x8, x29, w8, uxtw
; ARM64-NEXT:    str w5, [x8]
; ARM64-NEXT:    mov x8, #0x808 // =2056
; ARM64-NEXT:    movk x8, #0x4, lsl #16
; ARM64-NEXT:    add x8, x29, w8, uxtw
; ARM64-NEXT:    str x6, [x8]
; ARM64-NEXT:    mov x8, #0x810 // =2064
; ARM64-NEXT:    movk x8, #0x4, lsl #16
; ARM64-NEXT:    add x8, x29, w8, uxtw
; ARM64-NEXT:    str x7, [x8]
; ARM64-NEXT:    mov w8, #0x0 // =0
; ARM64-NEXT:    mov x9, #0x898 // =2200
; ARM64-NEXT:    movk x9, #0x4, lsl #16
; ARM64-NEXT:    add x9, x29, w9, uxtw
; ARM64-NEXT:    str w8, [x9]
; ARM64-NEXT:    mov x1, #0x7f8 // =2040
; ARM64-NEXT:    movk x1, #0x4, lsl #16
; ARM64-NEXT:    add x1, x29, w1, uxtw
; ARM64-NEXT:    ldr x0, [x1]
; ARM64-NEXT:    mov x1, x0
; ARM64-NEXT:    mov x3, #0x800 // =2048
; ARM64-NEXT:    movk x3, #0x4, lsl #16
; ARM64-NEXT:    add x3, x29, w3, uxtw
; ARM64-NEXT:    ldr x2, [x3]
; ARM64-NEXT:    add x1, x1, x2
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    mov x4, #0x7e4 // =2020
; ARM64-NEXT:    movk x4, #0x4, lsl #16
; ARM64-NEXT:    add x4, x29, w4, uxtw
; ARM64-NEXT:    ldr w3, [x4]
; ARM64-NEXT:    orr w1, w1, w3
; ARM64-NEXT:    mov x4, #0x808 // =2056
; ARM64-NEXT:    movk x4, #0x4, lsl #16
; ARM64-NEXT:    add x4, x29, w4, uxtw
; ARM64-NEXT:    ldr x1, [x4]
; ARM64-NEXT:    ldr w4, [x1]
; ARM64-NEXT:    mov x5, #0x810 // =2064
; ARM64-NEXT:    movk x5, #0x4, lsl #16
; ARM64-NEXT:    add x5, x29, w5, uxtw
; ARM64-NEXT:    ldr x4, [x5]
; ARM64-NEXT:    ldr w5, [x4]
; ARM64-NEXT:    mov w5, #0x0 // =0
; ARM64-NEXT:    mov x7, #0x818 // =2072
; ARM64-NEXT:    movk x7, #0x4, lsl #16
; ARM64-NEXT:    add x7, x29, w7, uxtw
; ARM64-NEXT:    ldr x6, [x7]
; ARM64-NEXT:    str w5, [x6]
; ARM64-NEXT:    mov x7, #0x820 // =2080
; ARM64-NEXT:    movk x7, #0x4, lsl #16
; ARM64-NEXT:    add x7, x29, w7, uxtw
; ARM64-NEXT:    ldr x5, [x7]
; ARM64-NEXT:    ldr w7, [x5]
; ARM64-NEXT:    mov x8, #0x828 // =2088
; ARM64-NEXT:    movk x8, #0x4, lsl #16
; ARM64-NEXT:    add x8, x29, w8, uxtw
; ARM64-NEXT:    ldr x7, [x8]
; ARM64-NEXT:    ldr w8, [x7]
; ARM64-NEXT:    mov x9, #0x830 // =2096
; ARM64-NEXT:    movk x9, #0x4, lsl #16
; ARM64-NEXT:    add x9, x29, w9, uxtw
; ARM64-NEXT:    ldr x8, [x9]
; ARM64-NEXT:    ldr w9, [x8]
; ARM64-NEXT:    mov x10, #0x7e8 // =2024
; ARM64-NEXT:    movk x10, #0x4, lsl #16
; ARM64-NEXT:    add x10, x29, w10, uxtw
; ARM64-NEXT:    ldr x9, [x10]
; ARM64-NEXT:    mov x10, x9
; ARM64-NEXT:    mov x11, #0x838 // =2104
; ARM64-NEXT:    movk x11, #0x4, lsl #16
; ARM64-NEXT:    add x11, x29, w11, uxtw
; ARM64-NEXT:    ldr x10, [x11]
; ARM64-NEXT:    cmp x10, #0x0
; ARM64-NEXT:    cset w11, eq
; ARM64-NEXT:    mov w11, #0x0 // =0
; ARM64-NEXT:    mov x13, #0x840 // =2112
; ARM64-NEXT:    movk x13, #0x4, lsl #16
; ARM64-NEXT:    add x13, x29, w13, uxtw
; ARM64-NEXT:    ldr w12, [x13]
; ARM64-NEXT:    and w11, w11, w12
; ARM64-NEXT:    mov x13, #0x848 // =2120
; ARM64-NEXT:    movk x13, #0x4, lsl #16
; ARM64-NEXT:    add x13, x29, w13, uxtw
; ARM64-NEXT:    ldr x11, [x13]
; ARM64-NEXT:    cmp x11, #0x0
; ARM64-NEXT:    cset w13, eq
; ARM64-NEXT:    mov x14, #0x850 // =2128
; ARM64-NEXT:    movk x14, #0x4, lsl #16
; ARM64-NEXT:    add x14, x29, w14, uxtw
; ARM64-NEXT:    ldr x13, [x14]
; ARM64-NEXT:    ldr w14, [x13]
; ARM64-NEXT:    mov w14, #0x0 // =0
; ARM64-NEXT:    add w14, w14, #0x0
; ARM64-NEXT:    mov x18, #0x858 // =2136
; ARM64-NEXT:    movk x18, #0x4, lsl #16
; ARM64-NEXT:    add x18, x29, w18, uxtw
; ARM64-NEXT:    ldr x15, [x18]
; ARM64-NEXT:    ldr w18, [x15]
; ARM64-NEXT:    mov w18, #0x0 // =0
; ARM64-NEXT:    mov x20, #0x860 // =2144
; ARM64-NEXT:    movk x20, #0x4, lsl #16
; ARM64-NEXT:    add x20, x29, w20, uxtw
; ARM64-NEXT:    ldr x19, [x20]
; ARM64-NEXT:    str w18, [x19]
; ARM64-NEXT:    mov x20, #0x844 // =2116
; ARM64-NEXT:    movk x20, #0x4, lsl #16
; ARM64-NEXT:    add x20, x29, w20, uxtw
; ARM64-NEXT:    ldr w18, [x20]
; ARM64-NEXT:    mov w20, #0x0 // =0
; ARM64-NEXT:    str w18, [x20]
; ARM64-NEXT:    mov x21, #0x868 // =2152
; ARM64-NEXT:    movk x21, #0x4, lsl #16
; ARM64-NEXT:    add x21, x29, w21, uxtw
; ARM64-NEXT:    ldr x20, [x21]
; ARM64-NEXT:    cmp x20, #0x0
; ARM64-NEXT:    cset w21, eq
; ARM64-NEXT:    mov x22, #0x7f0 // =2032
; ARM64-NEXT:    movk x22, #0x4, lsl #16
; ARM64-NEXT:    add x22, x29, w22, uxtw
; ARM64-NEXT:    ldr x21, [x22]
; ARM64-NEXT:    add x22, x21, #0x4
; ARM64-NEXT:    mov w22, #0x0 // =0
; ARM64-NEXT:    mov x24, #0x870 // =2160
; ARM64-NEXT:    movk x24, #0x4, lsl #16
; ARM64-NEXT:    add x24, x29, w24, uxtw
; ARM64-NEXT:    ldr w23, [x24]
; ARM64-NEXT:    lsr w22, w22, w23
; ARM64-NEXT:    mov x24, #0x878 // =2168
; ARM64-NEXT:    movk x24, #0x4, lsl #16
; ARM64-NEXT:    add x24, x29, w24, uxtw
; ARM64-NEXT:    ldr x22, [x24]
; ARM64-NEXT:    mov x24, x22
; ARM64-NEXT:    mov x25, #0x880 // =2176
; ARM64-NEXT:    movk x25, #0x4, lsl #16
; ARM64-NEXT:    add x25, x29, w25, uxtw
; ARM64-NEXT:    ldr x24, [x25]
; ARM64-NEXT:    mov x25, x24
; ARM64-NEXT:    mov x27, #0x888 // =2184
; ARM64-NEXT:    movk x27, #0x4, lsl #16
; ARM64-NEXT:    add x27, x29, w27, uxtw
; ARM64-NEXT:    ldr x26, [x27]
; ARM64-NEXT:    add x25, x25, x26, lsl #2
; ARM64-NEXT:    mov x27, #0x890 // =2192
; ARM64-NEXT:    movk x27, #0x4, lsl #16
; ARM64-NEXT:    add x27, x29, w27, uxtw
; ARM64-NEXT:    ldr w25, [x27]
; ARM64-NEXT:    mov x28, #0x874 // =2164
; ARM64-NEXT:    movk x28, #0x4, lsl #16
; ARM64-NEXT:    add x28, x29, w28, uxtw
; ARM64-NEXT:    ldr w27, [x28]
; ARM64-NEXT:    and w28, w25, w27
; ARM64-NEXT:    mov x30, #0x894 // =2196
; ARM64-NEXT:    movk x30, #0x4, lsl #16
; ARM64-NEXT:    add x30, x29, w30, uxtw
; ARM64-NEXT:    ldr w28, [x30]
; ARM64-NEXT:    lsr w30, w28, #0
; ARM64-NEXT:    mov w30, #0x0 // =0
; ARM64-NEXT:    mov x1, #0x7e0 // =2016
; ARM64-NEXT:    movk x1, #0x4, lsl #16
; ARM64-NEXT:    add x1, x29, w1, uxtw
; ARM64-NEXT:    ldr w0, [x1]
; ARM64-NEXT:    orr w30, w30, w0
; ARM64-NEXT:    mov x1, #0x898 // =2200
; ARM64-NEXT:    movk x1, #0x4, lsl #16
; ARM64-NEXT:    add x1, x29, w1, uxtw
; ARM64-NEXT:    str w14, [x1]
; ARM64-NEXT:    b 0x1074 <alloca_manyregs+0x234>
  %23 = alloca [66000 x i32], align 4
  br label %24

24:                                               ; preds = %24, %22
  %25 = phi i32 [ 0, %22 ], [ %38, %24 ]
  %26 = getelementptr [50177 x i8], ptr %3, i64 0, i64 %4
  %27 = or i32 %5, 0
  %28 = load i32, ptr %r1, align 4
  %29 = load i32, ptr %6, align 4
  store i32 0, ptr %7, align 4
  %30 = load i32, ptr %t, align 4
  %31 = load i32, ptr %q, align 4
  %32 = load i32, ptr %r, align 4
  %33 = getelementptr [5 x i32], ptr %1, i64 0, i64 0
  %34 = icmp eq i64 0, %8
  %35 = and i32 0, %9
  %36 = icmp eq i64 0, %10
  %37 = load i32, ptr %m, align 4
  %38 = add i32 0, 0
  %39 = load i32, ptr %11, align 4
  store i32 0, ptr %12, align 4
  store i32 %13, ptr null, align 4
  %40 = icmp eq i64 0, %14
  %41 = getelementptr [5 x i32], ptr %2, i64 0, i64 1
  %42 = lshr i32 0, %15
  %43 = getelementptr [66000 x i32], ptr %16, i64 0, i64 0
  %44 = getelementptr [66000 x i32], ptr %17, i64 0, i64 %18
  %45 = and i32 %19, %20
  %46 = lshr i32 %21, 0
  %47 = or i32 0, %0
  br label %24
}

; COM: TODO
;declare void @func_9args(ptr, i64, i64, i64, i64, i64, i64, i64, i64)

;define void @dyn_alloca_correct_sp_ptr(i64 %0) {
;entry:
;    %1 = alloca i64
;    %2 = alloca i64, i64 %0
;    call void @func_9args(ptr %1, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0)
;    ret void
;}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
