; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel --section=.text --section=.rodata - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always


define void @dyn_alloca_const() {
; X64-LABEL: dyn_alloca_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    sub rsp, 0x10
; X64:    and rsp, -0x10
; X64:    mov rax, rsp
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
    br label %bb1
bb1:
    %0 = alloca i32
    ret void
}

define void @dyn_alloca_const_align_32() {
; X64-LABEL: dyn_alloca_const_align_32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    sub rsp, 0x10
; X64:    and rsp, -0x20
; X64:    mov rax, rsp
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
    br label %bb1
bb1:
    %0 = alloca i32, align 32
    ret void
}


define void @dyn_alloca_dyn_i8_cnt_i64(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_i8_cnt_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x38
; X64:    mov rbx, rdi
; X64:    sub rsp, rbx
; X64:    and rsp, -0x10
; X64:    mov rbx, rsp
; X64:    add rsp, 0x38
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
entry:
    br label %bb1
bb1:
    %1 = alloca i8, i64 %0
    ret void
}

define void @dyn_alloca_dyn_i8_cnt_i32(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_i8_cnt_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x38
; X64:    mov ebx, edi
; X64:    sub rsp, rbx
; X64:    and rsp, -0x10
; X64:    mov rbx, rsp
; X64:    add rsp, 0x38
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
entry:
    br label %bb1
bb1:
    %1 = alloca i8, i32 %0
    ret void
}


define void @dyn_alloca_dyn_i32_cnt_i64(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_i32_cnt_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x38
; X64:    mov rbx, rdi
; X64:    shl rbx, 0x2
; X64:    sub rsp, rbx
; X64:    and rsp, -0x10
; X64:    mov rbx, rsp
; X64:    add rsp, 0x38
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
entry:
    br label %bb1
bb1:
    %1 = alloca i32, i64 %0
    ret void
}

define void @dyn_alloca_dyn_i32_cnt_i32(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_i32_cnt_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x38
; X64:    mov ebx, edi
; X64:    shl rbx, 0x2
; X64:    sub rsp, rbx
; X64:    and rsp, -0x10
; X64:    mov rbx, rsp
; X64:    add rsp, 0x38
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
entry:
    br label %bb1
bb1:
    %1 = alloca i32, i32 %0
    ret void
}


%struct.i32_3 = type { i32, i32, i32 }

define void @dyn_alloca_dyn_si3_cnt_i64(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x38
; X64:    mov rbx, rdi
; X64:    imul rbx, rbx, 0xc
; X64:    sub rsp, rbx
; X64:    and rsp, -0x10
; X64:    mov rbx, rsp
; X64:    add rsp, 0x38
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i64 %0
    ret void
}

define void @dyn_alloca_dyn_si3_cnt_i32(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x38
; X64:    mov ebx, edi
; X64:    imul rbx, rbx, 0xc
; X64:    sub rsp, rbx
; X64:    and rsp, -0x10
; X64:    mov rbx, rsp
; X64:    add rsp, 0x38
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
entry:
    br label %bb1

bb1:
    %1 = alloca %struct.i32_3, i32 %0
    ret void
}

; TODO: this should zero-extend
define void @dyn_alloca_dyn_si3_cnt_i16(i16 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x38
; X64:    mov ebx, edi
; X64:    imul rbx, rbx, 0xc
; X64:    sub rsp, rbx
; X64:    and rsp, -0x10
; X64:    mov rbx, rsp
; X64:    add rsp, 0x38
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i16 %0
    ret void
}



define i64 @dyn_alloca_dyn_i8_cnt_i64_no_salvage(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_i8_cnt_i64_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x38
; X64:    mov rbx, rdi
; X64:    mov rax, rbx
; X64:    sub rsp, rax
; X64:    and rsp, -0x10
; X64:    mov rax, rsp
; X64:    mov rax, rbx
; X64:    add rsp, 0x38
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
    br label %bb1
bb1:
    %1 = alloca i8, i64 %0
    ret i64 %0
}

define i32 @dyn_alloca_dyn_i32_cnt_i32_no_salvage(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_i32_cnt_i32_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x38
; X64:    mov ebx, edi
; X64:    mov eax, ebx
; X64:    shl rax, 0x2
; X64:    sub rsp, rax
; X64:    and rsp, -0x10
; X64:    mov rax, rsp
; X64:    mov eax, ebx
; X64:    add rsp, 0x38
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
    br label %bb1
bb1:
    %1 = alloca i32, i32 %0
    ret i32 %0
}

define i64 @dyn_alloca_dyn_si3_cnt_i64_no_salvage(i64 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i64_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x38
; X64:    mov rbx, rdi
; X64:    mov rax, rbx
; X64:    imul rax, rax, 0xc
; X64:    sub rsp, rax
; X64:    and rsp, -0x10
; X64:    mov rax, rsp
; X64:    mov rax, rbx
; X64:    add rsp, 0x38
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i64 %0
    ret i64 %0
}

define i32 @dyn_alloca_dyn_si3_cnt_i32_no_salvage(i32 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i32_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x38
; X64:    mov ebx, edi
; X64:    mov eax, ebx
; X64:    imul rax, rax, 0xc
; X64:    sub rsp, rax
; X64:    and rsp, -0x10
; X64:    mov rax, rsp
; X64:    mov eax, ebx
; X64:    add rsp, 0x38
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i32 %0
    ret i32 %0
}

define i16 @dyn_alloca_dyn_si3_cnt_i16_no_salvage(i16 %0) {
; X64-LABEL: dyn_alloca_dyn_si3_cnt_i16_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x38
; X64:    mov ebx, edi
; X64:    mov eax, ebx
; X64:    imul rax, rax, 0xc
; X64:    sub rsp, rax
; X64:    and rsp, -0x10
; X64:    mov rax, rsp
; X64:    mov eax, ebx
; X64:    add rsp, 0x38
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
entry:
    br label %bb1
bb1:
    %1 = alloca %struct.i32_3, i16 %0
    ret i16 %0
}

; COM: TODO
;declare void @func_9args(ptr, i64, i64, i64, i64, i64, i64, i64, i64)

;define void @dyn_alloca_correct_sp_ptr(i64 %0) {
;entry:
;    %1 = alloca i64
;    %2 = alloca i64, i64 %0
;    call void @func_9args(ptr %1, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0, i64 %0)
;    ret void
;}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
