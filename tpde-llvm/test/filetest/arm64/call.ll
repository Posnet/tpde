; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

declare {float, float, float} @ret_3_float();

define void @call_3_float() {
; ARM64-LABEL: <call_3_float>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    bl 0x30 <call_3_float+0x10>
; ARM64-NEXT:     R_AARCH64_CALL26 ret_3_float
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %c = call {float, float, float} @ret_3_float()
  ret void
}

declare void @take_double_fp128(double, fp128, double, fp128, double, fp128, double, fp128, double, fp128, double, fp128);

define void @call_take_12_fp128() {
; ARM64-LABEL: <call_take_12_fp128>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    str d8, [sp, #0x10]
; ARM64-NEXT:    movi v0.8b, #0x0
; ARM64-NEXT:    movi v1.16b, #0x0
; ARM64-NEXT:    movi v2.8b, #0x0
; ARM64-NEXT:    movi v3.16b, #0x0
; ARM64-NEXT:    movi v4.8b, #0x0
; ARM64-NEXT:    movi v5.16b, #0x0
; ARM64-NEXT:    movi v6.8b, #0x0
; ARM64-NEXT:    movi v7.16b, #0x0
; ARM64-NEXT:    sub sp, sp, #0x40
; ARM64-NEXT:    movi v8.8b, #0x0
; ARM64-NEXT:    str d8, [sp]
; ARM64-NEXT:    movi v8.16b, #0x0
; ARM64-NEXT:    str q8, [sp, #0x10]
; ARM64-NEXT:    movi v8.8b, #0x0
; ARM64-NEXT:    str d8, [sp, #0x20]
; ARM64-NEXT:    movi v8.16b, #0x0
; ARM64-NEXT:    str q8, [sp, #0x30]
; ARM64-NEXT:    bl 0xb4 <call_take_12_fp128+0x54>
; ARM64-NEXT:     R_AARCH64_CALL26 take_double_fp128
; ARM64-NEXT:    add sp, sp, #0x40
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldr d8, [sp, #0x10]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  call void @take_double_fp128(double 0.0, fp128 0xL00000000000000000000000000000000, double 0.0, fp128 0xL00000000000000000000000000000000, double 0.0, fp128 0xL00000000000000000000000000000000, double 0.0, fp128 0xL00000000000000000000000000000000, double 0.0, fp128 0xL00000000000000000000000000000000, double 0.0, fp128 0xL00000000000000000000000000000000)
  ret void
}

