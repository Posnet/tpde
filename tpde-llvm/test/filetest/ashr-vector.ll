; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define <8 x i8> @ashr_v8i8(<8 x i8> %a, <8 x i8> %b) {
; X64-LABEL: <ashr_v8i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    punpcklbw {{.*#+}} xmm0 = xmm0[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
; X64-NEXT:    psllw xmm1, 0x5
; X64-NEXT:    punpcklbw {{.*#+}} xmm1 = xmm1[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm3, xmm3
; X64-NEXT:    pcmpgtw xmm3, xmm1
; X64-NEXT:    movdqa xmm4, xmm3
; X64-NEXT:    pandn xmm4, xmm0
; X64-NEXT:    psraw xmm0, 0x4
; X64-NEXT:    pand xmm0, xmm3
; X64-NEXT:    por xmm0, xmm4
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    pxor xmm3, xmm3
; X64-NEXT:    pcmpgtw xmm3, xmm1
; X64-NEXT:    movdqa xmm4, xmm3
; X64-NEXT:    pandn xmm4, xmm0
; X64-NEXT:    psraw xmm0, 0x2
; X64-NEXT:    pand xmm0, xmm3
; X64-NEXT:    por xmm0, xmm4
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    pcmpgtw xmm2, xmm1
; X64-NEXT:    movdqa xmm1, xmm2
; X64-NEXT:    pandn xmm1, xmm0
; X64-NEXT:    psraw xmm0, 0x1
; X64-NEXT:    pand xmm0, xmm2
; X64-NEXT:    por xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0x8
; X64-NEXT:    packuswb xmm0, xmm0
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ashr_v8i8>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    neg v1.8b, v1.8b
; ARM64-NEXT:    sshl v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %r = ashr <8 x i8> %a, %b
  ret <8 x i8> %r
}

define <8 x i8> @ashr_v8i8_3(<8 x i8> %a) {
; X64-LABEL: <ashr_v8i8_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    punpcklbw {{.*#+}} xmm0 = xmm0[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
; X64-NEXT:    movabs rax, 0x303030303030303
; X64-NEXT:    movq xmm1, rax
; X64-NEXT:    psllw xmm1, 0x5
; X64-NEXT:    punpcklbw {{.*#+}} xmm1 = xmm1[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
; X64-NEXT:    pxor xmm2, xmm2
; X64-NEXT:    pxor xmm3, xmm3
; X64-NEXT:    pcmpgtw xmm3, xmm1
; X64-NEXT:    movdqa xmm4, xmm3
; X64-NEXT:    pandn xmm4, xmm0
; X64-NEXT:    psraw xmm0, 0x4
; X64-NEXT:    pand xmm0, xmm3
; X64-NEXT:    por xmm0, xmm4
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    pxor xmm3, xmm3
; X64-NEXT:    pcmpgtw xmm3, xmm1
; X64-NEXT:    movdqa xmm4, xmm3
; X64-NEXT:    pandn xmm4, xmm0
; X64-NEXT:    psraw xmm0, 0x2
; X64-NEXT:    pand xmm0, xmm3
; X64-NEXT:    por xmm0, xmm4
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    pcmpgtw xmm2, xmm1
; X64-NEXT:    movdqa xmm1, xmm2
; X64-NEXT:    pandn xmm1, xmm0
; X64-NEXT:    psraw xmm0, 0x1
; X64-NEXT:    pand xmm0, xmm2
; X64-NEXT:    por xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0x8
; X64-NEXT:    packuswb xmm0, xmm0
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ashr_v8i8_3>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8b, #0x3
; ARM64-NEXT:    neg v1.8b, v1.8b
; ARM64-NEXT:    sshl v0.8b, v0.8b, v1.8b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = ashr <8 x i8> %a, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  ret <8 x i8> %r
}

define <16 x i8> @ashr_v16i8(<16 x i8> %a, <16 x i8> %b) {
; X64-LABEL: <ashr_v16i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    punpckhbw {{.*#+}} xmm2 = xmm2[8],xmm0[8],xmm2[9],xmm0[9],xmm2[10],xmm0[10],xmm2[11],xmm0[11],xmm2[12],xmm0[12],xmm2[13],xmm0[13],xmm2[14],xmm0[14],xmm2[15],xmm0[15]
; X64-NEXT:    psllw xmm1, 0x5
; X64-NEXT:    punpckhbw {{.*#+}} xmm3 = xmm3[8],xmm1[8],xmm3[9],xmm1[9],xmm3[10],xmm1[10],xmm3[11],xmm1[11],xmm3[12],xmm1[12],xmm3[13],xmm1[13],xmm3[14],xmm1[14],xmm3[15],xmm1[15]
; X64-NEXT:    pxor xmm4, xmm4
; X64-NEXT:    pxor xmm5, xmm5
; X64-NEXT:    pcmpgtw xmm5, xmm3
; X64-NEXT:    movdqa xmm6, xmm5
; X64-NEXT:    pandn xmm6, xmm2
; X64-NEXT:    psraw xmm2, 0x4
; X64-NEXT:    pand xmm2, xmm5
; X64-NEXT:    por xmm2, xmm6
; X64-NEXT:    paddw xmm3, xmm3
; X64-NEXT:    pxor xmm5, xmm5
; X64-NEXT:    pcmpgtw xmm5, xmm3
; X64-NEXT:    movdqa xmm6, xmm5
; X64-NEXT:    pandn xmm6, xmm2
; X64-NEXT:    psraw xmm2, 0x2
; X64-NEXT:    pand xmm2, xmm5
; X64-NEXT:    por xmm2, xmm6
; X64-NEXT:    paddw xmm3, xmm3
; X64-NEXT:    pxor xmm5, xmm5
; X64-NEXT:    pcmpgtw xmm5, xmm3
; X64-NEXT:    movdqa xmm3, xmm5
; X64-NEXT:    pandn xmm3, xmm2
; X64-NEXT:    psraw xmm2, 0x1
; X64-NEXT:    pand xmm2, xmm5
; X64-NEXT:    por xmm2, xmm3
; X64-NEXT:    psrlw xmm2, 0x8
; X64-NEXT:    punpcklbw {{.*#+}} xmm0 = xmm0[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
; X64-NEXT:    punpcklbw {{.*#+}} xmm1 = xmm1[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
; X64-NEXT:    pxor xmm3, xmm3
; X64-NEXT:    pcmpgtw xmm3, xmm1
; X64-NEXT:    movdqa xmm5, xmm3
; X64-NEXT:    pandn xmm5, xmm0
; X64-NEXT:    psraw xmm0, 0x4
; X64-NEXT:    pand xmm0, xmm3
; X64-NEXT:    por xmm0, xmm5
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    pxor xmm3, xmm3
; X64-NEXT:    pcmpgtw xmm3, xmm1
; X64-NEXT:    movdqa xmm5, xmm3
; X64-NEXT:    pandn xmm5, xmm0
; X64-NEXT:    psraw xmm0, 0x2
; X64-NEXT:    pand xmm0, xmm3
; X64-NEXT:    por xmm0, xmm5
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    pcmpgtw xmm4, xmm1
; X64-NEXT:    movdqa xmm1, xmm4
; X64-NEXT:    pandn xmm1, xmm0
; X64-NEXT:    psraw xmm0, 0x1
; X64-NEXT:    pand xmm0, xmm4
; X64-NEXT:    por xmm0, xmm1
; X64-NEXT:    psrlw xmm0, 0x8
; X64-NEXT:    packuswb xmm0, xmm2
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ashr_v16i8>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    neg v1.16b, v1.16b
; ARM64-NEXT:    sshl v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %r = ashr <16 x i8> %a, %b
  ret <16 x i8> %r
}

define <16 x i8> @ashr_v16i8_3(<16 x i8> %a) {
; X64-LABEL: <ashr_v16i8_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    punpckhbw {{.*#+}} xmm1 = xmm1[8],xmm0[8],xmm1[9],xmm0[9],xmm1[10],xmm0[10],xmm1[11],xmm0[11],xmm1[12],xmm0[12],xmm1[13],xmm0[13],xmm1[14],xmm0[14],xmm1[15],xmm0[15]
; X64-NEXT:    movaps xmm2, xmmword ptr <ashr_v16i8_3+0x17>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    psllw xmm2, 0x5
; X64-NEXT:    punpckhbw {{.*#+}} xmm3 = xmm3[8],xmm2[8],xmm3[9],xmm2[9],xmm3[10],xmm2[10],xmm3[11],xmm2[11],xmm3[12],xmm2[12],xmm3[13],xmm2[13],xmm3[14],xmm2[14],xmm3[15],xmm2[15]
; X64-NEXT:    pxor xmm4, xmm4
; X64-NEXT:    pxor xmm5, xmm5
; X64-NEXT:    pcmpgtw xmm5, xmm3
; X64-NEXT:    movdqa xmm6, xmm5
; X64-NEXT:    pandn xmm6, xmm1
; X64-NEXT:    psraw xmm1, 0x4
; X64-NEXT:    pand xmm1, xmm5
; X64-NEXT:    por xmm1, xmm6
; X64-NEXT:    paddw xmm3, xmm3
; X64-NEXT:    pxor xmm5, xmm5
; X64-NEXT:    pcmpgtw xmm5, xmm3
; X64-NEXT:    movdqa xmm6, xmm5
; X64-NEXT:    pandn xmm6, xmm1
; X64-NEXT:    psraw xmm1, 0x2
; X64-NEXT:    pand xmm1, xmm5
; X64-NEXT:    por xmm1, xmm6
; X64-NEXT:    paddw xmm3, xmm3
; X64-NEXT:    pxor xmm5, xmm5
; X64-NEXT:    pcmpgtw xmm5, xmm3
; X64-NEXT:    movdqa xmm3, xmm5
; X64-NEXT:    pandn xmm3, xmm1
; X64-NEXT:    psraw xmm1, 0x1
; X64-NEXT:    pand xmm1, xmm5
; X64-NEXT:    por xmm1, xmm3
; X64-NEXT:    psrlw xmm1, 0x8
; X64-NEXT:    punpcklbw {{.*#+}} xmm0 = xmm0[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
; X64-NEXT:    punpcklbw {{.*#+}} xmm2 = xmm2[0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]
; X64-NEXT:    pxor xmm3, xmm3
; X64-NEXT:    pcmpgtw xmm3, xmm2
; X64-NEXT:    movdqa xmm5, xmm3
; X64-NEXT:    pandn xmm5, xmm0
; X64-NEXT:    psraw xmm0, 0x4
; X64-NEXT:    pand xmm0, xmm3
; X64-NEXT:    por xmm0, xmm5
; X64-NEXT:    paddw xmm2, xmm2
; X64-NEXT:    pxor xmm3, xmm3
; X64-NEXT:    pcmpgtw xmm3, xmm2
; X64-NEXT:    movdqa xmm5, xmm3
; X64-NEXT:    pandn xmm5, xmm0
; X64-NEXT:    psraw xmm0, 0x2
; X64-NEXT:    pand xmm0, xmm3
; X64-NEXT:    por xmm0, xmm5
; X64-NEXT:    paddw xmm2, xmm2
; X64-NEXT:    pcmpgtw xmm4, xmm2
; X64-NEXT:    movdqa xmm2, xmm4
; X64-NEXT:    pandn xmm2, xmm0
; X64-NEXT:    psraw xmm0, 0x1
; X64-NEXT:    pand xmm0, xmm4
; X64-NEXT:    por xmm0, xmm2
; X64-NEXT:    psrlw xmm0, 0x8
; X64-NEXT:    packuswb xmm0, xmm1
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ashr_v16i8_3>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.16b, #0x3
; ARM64-NEXT:    neg v1.16b, v1.16b
; ARM64-NEXT:    sshl v0.16b, v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %r = ashr <16 x i8> %a, <i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3, i8 3>
  ret <16 x i8> %r
}

define <4 x i16> @ashr_v4i16(<4 x i16> %a, <4 x i16> %b) {
; X64-LABEL: <ashr_v4i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    psllw xmm1, 0xc
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    psraw xmm2, 0xf
; X64-NEXT:    movdqa xmm3, xmm2
; X64-NEXT:    pandn xmm3, xmm0
; X64-NEXT:    psraw xmm0, 0x8
; X64-NEXT:    pand xmm0, xmm2
; X64-NEXT:    por xmm0, xmm3
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    psraw xmm2, 0xf
; X64-NEXT:    movdqa xmm3, xmm2
; X64-NEXT:    pandn xmm3, xmm0
; X64-NEXT:    psraw xmm0, 0x4
; X64-NEXT:    pand xmm0, xmm2
; X64-NEXT:    por xmm0, xmm3
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    psraw xmm2, 0xf
; X64-NEXT:    movdqa xmm3, xmm2
; X64-NEXT:    pandn xmm3, xmm0
; X64-NEXT:    psraw xmm0, 0x2
; X64-NEXT:    pand xmm0, xmm2
; X64-NEXT:    por xmm0, xmm3
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    psraw xmm1, 0xf
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    pandn xmm2, xmm0
; X64-NEXT:    psraw xmm0, 0x1
; X64-NEXT:    pand xmm0, xmm1
; X64-NEXT:    por xmm0, xmm2
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ashr_v4i16>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    neg v1.4h, v1.4h
; ARM64-NEXT:    sshl v0.4h, v0.4h, v1.4h
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %r = ashr <4 x i16> %a, %b
  ret <4 x i16> %r
}

define <4 x i16> @ashr_v4i16_3(<4 x i16> %a) {
; X64-LABEL: <ashr_v4i16_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movabs rax, 0x3000300030003
; X64-NEXT:    movq xmm1, rax
; X64-NEXT:    psllw xmm1, 0xc
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    psraw xmm2, 0xf
; X64-NEXT:    movdqa xmm3, xmm2
; X64-NEXT:    pandn xmm3, xmm0
; X64-NEXT:    psraw xmm0, 0x8
; X64-NEXT:    pand xmm0, xmm2
; X64-NEXT:    por xmm0, xmm3
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    psraw xmm2, 0xf
; X64-NEXT:    movdqa xmm3, xmm2
; X64-NEXT:    pandn xmm3, xmm0
; X64-NEXT:    psraw xmm0, 0x4
; X64-NEXT:    pand xmm0, xmm2
; X64-NEXT:    por xmm0, xmm3
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    psraw xmm2, 0xf
; X64-NEXT:    movdqa xmm3, xmm2
; X64-NEXT:    pandn xmm3, xmm0
; X64-NEXT:    psraw xmm0, 0x2
; X64-NEXT:    pand xmm0, xmm2
; X64-NEXT:    por xmm0, xmm3
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    psraw xmm1, 0xf
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    pandn xmm2, xmm0
; X64-NEXT:    psraw xmm0, 0x1
; X64-NEXT:    pand xmm0, xmm1
; X64-NEXT:    por xmm0, xmm2
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ashr_v4i16_3>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4h, #0x3
; ARM64-NEXT:    neg v1.4h, v1.4h
; ARM64-NEXT:    sshl v0.4h, v0.4h, v1.4h
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = ashr <4 x i16> %a, <i16 3, i16 3, i16 3, i16 3>
  ret <4 x i16> %r
}

define <8 x i16> @ashr_v8i16(<8 x i16> %a, <8 x i16> %b) {
; X64-LABEL: <ashr_v8i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    psllw xmm1, 0xc
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    psraw xmm2, 0xf
; X64-NEXT:    movdqa xmm3, xmm2
; X64-NEXT:    pandn xmm3, xmm0
; X64-NEXT:    psraw xmm0, 0x8
; X64-NEXT:    pand xmm0, xmm2
; X64-NEXT:    por xmm0, xmm3
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    psraw xmm2, 0xf
; X64-NEXT:    movdqa xmm3, xmm2
; X64-NEXT:    pandn xmm3, xmm0
; X64-NEXT:    psraw xmm0, 0x4
; X64-NEXT:    pand xmm0, xmm2
; X64-NEXT:    por xmm0, xmm3
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    psraw xmm2, 0xf
; X64-NEXT:    movdqa xmm3, xmm2
; X64-NEXT:    pandn xmm3, xmm0
; X64-NEXT:    psraw xmm0, 0x2
; X64-NEXT:    pand xmm0, xmm2
; X64-NEXT:    por xmm0, xmm3
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    psraw xmm1, 0xf
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    pandn xmm2, xmm0
; X64-NEXT:    psraw xmm0, 0x1
; X64-NEXT:    pand xmm0, xmm1
; X64-NEXT:    por xmm0, xmm2
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ashr_v8i16>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    neg v1.8h, v1.8h
; ARM64-NEXT:    sshl v0.8h, v0.8h, v1.8h
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %r = ashr <8 x i16> %a, %b
  ret <8 x i16> %r
}

define <8 x i16> @ashr_v8i16_3(<8 x i16> %a) {
; X64-LABEL: <ashr_v8i16_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movaps xmm1, xmmword ptr <ashr_v8i16_3+0x13>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    psllw xmm1, 0xc
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    psraw xmm2, 0xf
; X64-NEXT:    movdqa xmm3, xmm2
; X64-NEXT:    pandn xmm3, xmm0
; X64-NEXT:    psraw xmm0, 0x8
; X64-NEXT:    pand xmm0, xmm2
; X64-NEXT:    por xmm0, xmm3
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    psraw xmm2, 0xf
; X64-NEXT:    movdqa xmm3, xmm2
; X64-NEXT:    pandn xmm3, xmm0
; X64-NEXT:    psraw xmm0, 0x4
; X64-NEXT:    pand xmm0, xmm2
; X64-NEXT:    por xmm0, xmm3
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    psraw xmm2, 0xf
; X64-NEXT:    movdqa xmm3, xmm2
; X64-NEXT:    pandn xmm3, xmm0
; X64-NEXT:    psraw xmm0, 0x2
; X64-NEXT:    pand xmm0, xmm2
; X64-NEXT:    por xmm0, xmm3
; X64-NEXT:    paddw xmm1, xmm1
; X64-NEXT:    psraw xmm1, 0xf
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    pandn xmm2, xmm0
; X64-NEXT:    psraw xmm0, 0x1
; X64-NEXT:    pand xmm0, xmm1
; X64-NEXT:    por xmm0, xmm2
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ashr_v8i16_3>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.8h, #0x3
; ARM64-NEXT:    neg v1.8h, v1.8h
; ARM64-NEXT:    sshl v0.8h, v0.8h, v1.8h
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %r = ashr <8 x i16> %a, <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>
  ret <8 x i16> %r
}

define <2 x i32> @ashr_v2i32(<2 x i32> %a, <2 x i32> %b) {
; X64-LABEL: <ashr_v2i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    pshuflw {{.*#+}} xmm2 = xmm1[2,3,3,3,4,5,6,7]
; X64-NEXT:    movapd xmm3, xmm0
; X64-NEXT:    shufps {{.*#+}} xmm3 = xmm3[1,1],xmm0[1,1]
; X64-NEXT:    psrad xmm3, xmm2
; X64-NEXT:    pshuflw {{.*#+}} xmm1 = xmm1[0,1,1,1,4,5,6,7]
; X64-NEXT:    psrad xmm0, xmm1
; X64-NEXT:    punpckldq {{.*#+}} xmm0 = xmm0[0],xmm3[0],xmm0[1],xmm3[1]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ashr_v2i32>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    neg v1.2s, v1.2s
; ARM64-NEXT:    sshl v0.2s, v0.2s, v1.2s
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %r = ashr <2 x i32> %a, %b
  ret <2 x i32> %r
}

define <2 x i32> @ashr_v2i32_3(<2 x i32> %a) {
; X64-LABEL: <ashr_v2i32_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movabs rax, 0x300000003
; X64-NEXT:    movq xmm1, rax
; X64-NEXT:    pshuflw {{.*#+}} xmm2 = xmm1[2,3,3,3,4,5,6,7]
; X64-NEXT:    movapd xmm3, xmm0
; X64-NEXT:    shufps {{.*#+}} xmm3 = xmm3[1,1],xmm0[1,1]
; X64-NEXT:    psrad xmm3, xmm2
; X64-NEXT:    pshuflw {{.*#+}} xmm1 = xmm1[0,1,1,1,4,5,6,7]
; X64-NEXT:    psrad xmm0, xmm1
; X64-NEXT:    punpckldq {{.*#+}} xmm0 = xmm0[0],xmm3[0],xmm0[1],xmm3[1]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ashr_v2i32_3>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.2s, #0x3
; ARM64-NEXT:    neg v1.2s, v1.2s
; ARM64-NEXT:    sshl v0.2s, v0.2s, v1.2s
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = ashr <2 x i32> %a, <i32 3, i32 3>
  ret <2 x i32> %r
}

define <4 x i32> @ashr_v4i32(<4 x i32> %a, <4 x i32> %b) {
; X64-LABEL: <ashr_v4i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    pshuflw {{.*#+}} xmm2 = xmm1[2,3,3,3,4,5,6,7]
; X64-NEXT:    movapd xmm3, xmm0
; X64-NEXT:    psrad xmm3, xmm2
; X64-NEXT:    pshuflw {{.*#+}} xmm4 = xmm1[0,1,1,1,4,5,6,7]
; X64-NEXT:    movapd xmm2, xmm0
; X64-NEXT:    psrad xmm2, xmm4
; X64-NEXT:    punpcklqdq {{.*#+}} xmm2 = xmm2[0],xmm3[0]
; X64-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[2,3,2,3]
; X64-NEXT:    pshuflw {{.*#+}} xmm3 = xmm1[2,3,3,3,4,5,6,7]
; X64-NEXT:    movapd xmm4, xmm0
; X64-NEXT:    psrad xmm4, xmm3
; X64-NEXT:    pshuflw {{.*#+}} xmm1 = xmm1[0,1,1,1,4,5,6,7]
; X64-NEXT:    psrad xmm0, xmm1
; X64-NEXT:    punpckhqdq {{.*#+}} xmm0 = xmm0[1],xmm4[1]
; X64-NEXT:    shufps {{.*#+}} xmm2 = xmm2[0,3],xmm0[0,3]
; X64-NEXT:    movapd xmm0, xmm2
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ashr_v4i32>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    neg v1.4s, v1.4s
; ARM64-NEXT:    sshl v0.4s, v0.4s, v1.4s
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %r = ashr <4 x i32> %a, %b
  ret <4 x i32> %r
}

define <4 x i32> @ashr_v4i32_3(<4 x i32> %a) {
; X64-LABEL: <ashr_v4i32_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movaps xmm1, xmmword ptr <ashr_v4i32_3+0x13>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    pshuflw {{.*#+}} xmm2 = xmm1[2,3,3,3,4,5,6,7]
; X64-NEXT:    movapd xmm3, xmm0
; X64-NEXT:    psrad xmm3, xmm2
; X64-NEXT:    pshuflw {{.*#+}} xmm4 = xmm1[0,1,1,1,4,5,6,7]
; X64-NEXT:    movapd xmm2, xmm0
; X64-NEXT:    psrad xmm2, xmm4
; X64-NEXT:    punpcklqdq {{.*#+}} xmm2 = xmm2[0],xmm3[0]
; X64-NEXT:    pshufd {{.*#+}} xmm1 = xmm1[2,3,2,3]
; X64-NEXT:    pshuflw {{.*#+}} xmm3 = xmm1[2,3,3,3,4,5,6,7]
; X64-NEXT:    movapd xmm4, xmm0
; X64-NEXT:    psrad xmm4, xmm3
; X64-NEXT:    pshuflw {{.*#+}} xmm1 = xmm1[0,1,1,1,4,5,6,7]
; X64-NEXT:    psrad xmm0, xmm1
; X64-NEXT:    punpckhqdq {{.*#+}} xmm0 = xmm0[1],xmm4[1]
; X64-NEXT:    shufps {{.*#+}} xmm2 = xmm2[0,3],xmm0[0,3]
; X64-NEXT:    movapd xmm0, xmm2
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ashr_v4i32_3>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v1.4s, #0x3
; ARM64-NEXT:    neg v1.4s, v1.4s
; ARM64-NEXT:    sshl v0.4s, v0.4s, v1.4s
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %r = ashr <4 x i32> %a, <i32 3, i32 3, i32 3, i32 3>
  ret <4 x i32> %r
}

define <2 x i64> @ashr_v2i64(<2 x i64> %a, <2 x i64> %b) {
; X64-LABEL: <ashr_v2i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movdqa xmm2, xmmword ptr <ashr_v2i64+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movdqa xmm3, xmm2
; X64-NEXT:    psrlq xmm3, xmm1
; X64-NEXT:    pshufd {{.*#+}} xmm4 = xmm1[2,3,2,3]
; X64-NEXT:    psrlq xmm2, xmm4
; X64-NEXT:    movsd {{.*#+}} xmm2 = xmm3[0],xmm2[1]
; X64-NEXT:    movapd xmm3, xmm0
; X64-NEXT:    psrlq xmm3, xmm1
; X64-NEXT:    psrlq xmm0, xmm4
; X64-NEXT:    movsd {{.*#+}} xmm0 = xmm3[0],xmm0[1]
; X64-NEXT:    xorpd xmm0, xmm2
; X64-NEXT:    psubq xmm0, xmm2
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ashr_v2i64>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    neg v1.2d, v1.2d
; ARM64-NEXT:    sshl v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %r = ashr <2 x i64> %a, %b
  ret <2 x i64> %r
}

define <2 x i64> @ashr_v2i64_3(<2 x i64> %a) {
; X64-LABEL: <ashr_v2i64_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movdqa xmm1, xmmword ptr <ashr_v2i64_3+0x14>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movdqa xmm2, xmm1
; X64-NEXT:    movaps xmm3, xmmword ptr <ashr_v2i64_3+0x1f>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    psrlq xmm2, xmm3
; X64-NEXT:    pshufd {{.*#+}} xmm4 = xmm3[2,3,2,3]
; X64-NEXT:    psrlq xmm1, xmm4
; X64-NEXT:    movsd {{.*#+}} xmm1 = xmm2[0],xmm1[1]
; X64-NEXT:    movapd xmm2, xmm0
; X64-NEXT:    psrlq xmm2, xmm3
; X64-NEXT:    psrlq xmm0, xmm4
; X64-NEXT:    movsd {{.*#+}} xmm0 = xmm2[0],xmm0[1]
; X64-NEXT:    xorpd xmm0, xmm1
; X64-NEXT:    psubq xmm0, xmm1
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ashr_v2i64_3>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21
; ARM64-NEXT:    ldr q1, [x0]
; ARM64-NEXT:     R_AARCH64_LDST128_ABS_LO12_NC
; ARM64-NEXT:    neg v1.2d, v1.2d
; ARM64-NEXT:    sshl v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %r = ashr <2 x i64> %a, <i64 3, i64 3>
  ret <2 x i64> %r
}
