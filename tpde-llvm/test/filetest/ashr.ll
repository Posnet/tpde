; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm --target=x86_64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always

define void @ashr_i8_3(i8 %0) {
; X64-LABEL: ashr_i8_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, dil
; X64-NEXT:    sar edi, 0x3
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: ashr_i8_3>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb w0, w0
; ARM64-NEXT:    asr w0, w0, #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %1 = ashr i8 %0, 3
    ret void
}

define void @ashr_i8_i8(i8 %0, i8 %1) {
; X64-LABEL: ashr_i8_i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, dil
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    sar edi, cl
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: ashr_i8_i8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb w0, w0
; ARM64-NEXT:    asr w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %2 = ashr i8 %0, %1
    ret void
}

define void @ashr_i16_3(i16 %0) {
; X64-LABEL: ashr_i16_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, di
; X64-NEXT:    sar edi, 0x3
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: ashr_i16_3>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth w0, w0
; ARM64-NEXT:    asr w0, w0, #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %1 = ashr i16 %0, 3
    ret void
}

define void @ashr_i16_i16(i16 %0, i16 %1) {
; X64-LABEL: ashr_i16_i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx edi, di
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    sar edi, cl
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: ashr_i16_i16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth w0, w0
; ARM64-NEXT:    asr w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %2 = ashr i16 %0, %1
    ret void
}

define void @ashr_i32_3(i32 %0) {
; X64-LABEL: ashr_i32_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    sar edi, 0x3
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: ashr_i32_3>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    asr w0, w0, #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %1 = ashr i32 %0, 3
    ret void
}

define void @ashr_i32_i32(i32 %0, i32 %1) {
; X64-LABEL: ashr_i32_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    sar edi, cl
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: ashr_i32_i32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    asr w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %2 = ashr i32 %0, %1
    ret void
}

define void @ashr_i64_3(i64 %0) {
; X64-LABEL: ashr_i64_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    sar rdi, 0x3
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: ashr_i64_3>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    asr x0, x0, #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %1 = ashr i64 %0, 3
    ret void
}

define void @ashr_i64_i64(i64 %0, i64 %1) {
; X64-LABEL: ashr_i64_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    sar rdi, cl
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: ashr_i64_i64>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    asr x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %2 = ashr i64 %0, %1
    ret void
}


define void @ashr_i21_3(i21 %0) {
; X64-LABEL: ashr_i21_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    shl edi, 0xb
; X64-NEXT:    sar edi, 0xb
; X64-NEXT:    sar edi, 0x3
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: ashr_i21_3>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx w0, w0, #0, #21
; ARM64-NEXT:    asr w0, w0, #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %1 = ashr i21 %0, 3
    ret void
}

define void @ashr_i21_i21(i21 %0, i21 %1) {
; X64-LABEL: ashr_i21_i21>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    shl edi, 0xb
; X64-NEXT:    sar edi, 0xb
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    sar edi, cl
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: ashr_i21_i21>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx w0, w0, #0, #21
; ARM64-NEXT:    asr w0, w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %2 = ashr i21 %0, %1
    ret void
}

define void @ashr_i37_3(i37 %0) {
; X64-LABEL: ashr_i37_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    shl rdi, 0x1b
; X64-NEXT:    sar rdi, 0x1b
; X64-NEXT:    sar rdi, 0x3
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: ashr_i37_3>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x0, x0, #0, #37
; ARM64-NEXT:    asr x0, x0, #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %1 = ashr i37 %0, 3
    ret void
}

define void @ashr_i37_i37(i37 %0, i37 %1) {
; X64-LABEL: ashr_i37_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    shl rdi, 0x1b
; X64-NEXT:    sar rdi, 0x1b
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    sar rdi, cl
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: ashr_i37_i37>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x0, x0, #0, #37
; ARM64-NEXT:    asr x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %2 = ashr i37 %0, %1
    ret void
}

define i128 @ashr_i128_3(i128 %0) {
; X64-LABEL: ashr_i128_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    shr rax, 0x3
; X64-NEXT:    mov rcx, rsi
; X64-NEXT:    shl rcx, 0x3d
; X64-NEXT:    or rcx, rax
; X64-NEXT:    sar rsi, 0x3
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    mov rdx, rsi
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: ashr_i128_3>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    lsl x2, x1, #61
; ARM64-NEXT:    lsr x3, x0, #3
; ARM64-NEXT:    asr x1, x1, #3
; ARM64-NEXT:    orr x0, x3, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %1 = ashr i128 %0, 3
    ret i128 %1
}

define i128 @ashr_i128_74(i128 %0) {
; X64-LABEL: ashr_i128_74>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    sar rax, 0xa
; X64-NEXT:    mov rcx, rsi
; X64-NEXT:    sar rcx, 0x3f
; X64-NEXT:    mov rdx, rcx
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: ashr_i128_74>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    asr x2, x1, #10
; ARM64-NEXT:    asr x3, x1, #63
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    mov x1, x3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %1 = ashr i128 %0, 74
    ret i128 %1
}

define i128 @ashr_i128_128(i128 %0) {
; X64-LABEL: ashr_i128_128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    shr rax, 0x0
; X64-NEXT:    mov rcx, rsi
; X64-NEXT:    shl rcx, 0x0
; X64-NEXT:    or rcx, rax
; X64-NEXT:    sar rsi, 0x0
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    mov rdx, rsi
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: ashr_i128_128>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    lsr x2, x1, #0
; ARM64-NEXT:    lsr x3, x0, #0
; ARM64-NEXT:    asr x1, x1, #0
; ARM64-NEXT:    orr x0, x3, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %1 = ashr i128 %0, 128
    ret i128 %1
}


define void @ashr_i64_no_salvage_imm(i64 %0) {
; X64-LABEL: ashr_i64_no_salvage_imm>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    sar rax, 0x3
; X64-NEXT:    mov ecx, eax
; X64-NEXT:    sar rdi, cl
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: ashr_i64_no_salvage_imm>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    asr x1, x0, #3
; ARM64-NEXT:    asr x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %1 = ashr i64 %0, 3
    %2 = ashr i64 %0, %1
    ret void
}

define void @ashr_i64_no_salvage_reg(i64 %0, i64 %1) {
; X64-LABEL: ashr_i64_no_salvage_reg>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    sar rax, cl
; X64-NEXT:    mov ecx, eax
; X64-NEXT:    sar rdi, cl
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: ashr_i64_no_salvage_reg>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    asr x1, x0, x1
; ARM64-NEXT:    asr x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %2 = ashr i64 %0, %1
    %3 = ashr i64 %0, %2
    ret void
}

define void @ashr_i37_no_salvage_imm(i37 %0) {
; X64-LABEL: ashr_i37_no_salvage_imm>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    shl rax, 0x1b
; X64-NEXT:    sar rax, 0x1b
; X64-NEXT:    sar rax, 0x3
; X64-NEXT:    shl rdi, 0x1b
; X64-NEXT:    sar rdi, 0x1b
; X64-NEXT:    mov ecx, eax
; X64-NEXT:    sar rdi, cl
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: ashr_i37_no_salvage_imm>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x1, x0, #0, #37
; ARM64-NEXT:    asr x1, x1, #3
; ARM64-NEXT:    sbfx x0, x0, #0, #37
; ARM64-NEXT:    asr x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %1 = ashr i37 %0, 3
    %2 = ashr i37 %0, %1
    ret void
}

define void @ashr_i37_no_salvage_reg(i37 %0, i37 %1) {
; X64-LABEL: ashr_i37_no_salvage_reg>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    shl rax, 0x1b
; X64-NEXT:    sar rax, 0x1b
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    sar rax, cl
; X64-NEXT:    shl rdi, 0x1b
; X64-NEXT:    sar rdi, 0x1b
; X64-NEXT:    mov ecx, eax
; X64-NEXT:    sar rdi, cl
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: ashr_i37_no_salvage_reg>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x2, x0, #0, #37
; ARM64-NEXT:    asr x2, x2, x1
; ARM64-NEXT:    sbfx x0, x0, #0, #37
; ARM64-NEXT:    asr x0, x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
entry:
    %2 = ashr i37 %0, %1
    %3 = ashr i37 %0, %2
    ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
