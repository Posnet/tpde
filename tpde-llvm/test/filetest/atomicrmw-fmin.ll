; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define float @atomicrmw_fmin_float_seq_cst(ptr %p, float %a) {
; X64-LABEL: <atomicrmw_fmin_float_seq_cst>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movss xmm1, dword ptr [rdi]
; X64-NEXT:  <L0>:
; X64-NEXT:    movaps xmm2, xmm0
; X64-NEXT:    minss xmm2, xmm1
; X64-NEXT:    movd eax, xmm1
; X64-NEXT:    cmpunordss xmm1, xmm1
; X64-NEXT:    movaps xmm3, xmm1
; X64-NEXT:    andps xmm3, xmm0
; X64-NEXT:    andnps xmm1, xmm2
; X64-NEXT:    orps xmm1, xmm3
; X64-NEXT:    movd ecx, xmm1
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg dword ptr [rdi], ecx
; X64-NEXT:    movd xmm1, eax
; X64-NEXT:    jne <L0>
; X64-NEXT:    movaps xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <atomicrmw_fmin_float_seq_cst>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr s1, [x0]
; ARM64-NEXT:    fminnm s2, s1, s0
; ARM64-NEXT:    fmov w1, s1
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    fmov w2, s2
; ARM64-NEXT:    casal w3, w2, [x0]
; ARM64-NEXT:    fmov s1, w3
; ARM64-NEXT:    cmp w3, w1
; ARM64-NEXT:    b.ne 0x34 <atomicrmw_fmin_float_seq_cst+0x14>
; ARM64-NEXT:    fmov s0, s1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = atomicrmw fmin ptr %p, float %a seq_cst
  ret float %r
}

define void @atomicrmw_fmin_float_seq_cst_nouse(ptr %p, float %a) {
; X64-LABEL: <atomicrmw_fmin_float_seq_cst_nouse>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movss xmm1, dword ptr [rdi]
; X64-NEXT:  <L0>:
; X64-NEXT:    movaps xmm2, xmm0
; X64-NEXT:    minss xmm2, xmm1
; X64-NEXT:    movd eax, xmm1
; X64-NEXT:    cmpunordss xmm1, xmm1
; X64-NEXT:    movaps xmm3, xmm1
; X64-NEXT:    andps xmm3, xmm0
; X64-NEXT:    andnps xmm1, xmm2
; X64-NEXT:    orps xmm1, xmm3
; X64-NEXT:    movd ecx, xmm1
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg dword ptr [rdi], ecx
; X64-NEXT:    movd xmm1, eax
; X64-NEXT:    jne <L0>
; X64-NEXT:    movaps xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <atomicrmw_fmin_float_seq_cst_nouse>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr s1, [x0]
; ARM64-NEXT:    fminnm s2, s1, s0
; ARM64-NEXT:    fmov w1, s1
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    fmov w2, s2
; ARM64-NEXT:    casal w3, w2, [x0]
; ARM64-NEXT:    fmov s1, w3
; ARM64-NEXT:    cmp w3, w1
; ARM64-NEXT:    b.ne 0xa4 <atomicrmw_fmin_float_seq_cst_nouse+0x14>
; ARM64-NEXT:    fmov s0, s1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = atomicrmw fmin ptr %p, float %a seq_cst
  ret void
}

define double @atomicrmw_fmin_double_seq_cst(ptr %p, double %a) {
; X64-LABEL: <atomicrmw_fmin_double_seq_cst>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsd xmm1, qword ptr [rdi]
; X64-NEXT:  <L0>:
; X64-NEXT:    movapd xmm2, xmm0
; X64-NEXT:    minsd xmm2, xmm1
; X64-NEXT:    movq rax, xmm1
; X64-NEXT:    cmpunordsd xmm1, xmm1
; X64-NEXT:    movapd xmm3, xmm1
; X64-NEXT:    andpd xmm3, xmm0
; X64-NEXT:    andnpd xmm1, xmm2
; X64-NEXT:    orpd xmm1, xmm3
; X64-NEXT:    movq rcx, xmm1
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rcx
; X64-NEXT:    movq xmm1, rax
; X64-NEXT:    jne <L0>
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <atomicrmw_fmin_double_seq_cst>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr d1, [x0]
; ARM64-NEXT:    fminnm d2, d1, d0
; ARM64-NEXT:    fmov x1, d1
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    fmov x2, d2
; ARM64-NEXT:    casal x3, x2, [x0]
; ARM64-NEXT:    fmov d1, x3
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    b.ne 0x114 <atomicrmw_fmin_double_seq_cst+0x14>
; ARM64-NEXT:    fmov d0, d1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = atomicrmw fmin ptr %p, double %a seq_cst
  ret double %r
}

define void @atomicrmw_fmin_double_seq_cst_nouse(ptr %p, double %a) {
; X64-LABEL: <atomicrmw_fmin_double_seq_cst_nouse>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsd xmm1, qword ptr [rdi]
; X64-NEXT:  <L0>:
; X64-NEXT:    movapd xmm2, xmm0
; X64-NEXT:    minsd xmm2, xmm1
; X64-NEXT:    movq rax, xmm1
; X64-NEXT:    cmpunordsd xmm1, xmm1
; X64-NEXT:    movapd xmm3, xmm1
; X64-NEXT:    andpd xmm3, xmm0
; X64-NEXT:    andnpd xmm1, xmm2
; X64-NEXT:    orpd xmm1, xmm3
; X64-NEXT:    movq rcx, xmm1
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rcx
; X64-NEXT:    movq xmm1, rax
; X64-NEXT:    jne <L0>
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <atomicrmw_fmin_double_seq_cst_nouse>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr d1, [x0]
; ARM64-NEXT:    fminnm d2, d1, d0
; ARM64-NEXT:    fmov x1, d1
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    fmov x2, d2
; ARM64-NEXT:    casal x3, x2, [x0]
; ARM64-NEXT:    fmov d1, x3
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    b.ne 0x184 <atomicrmw_fmin_double_seq_cst_nouse+0x14>
; ARM64-NEXT:    fmov d0, d1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = atomicrmw fmin ptr %p, double %a seq_cst
  ret void
}
