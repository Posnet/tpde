; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define i8 @atomicrmw_max_i8_seq_cst(ptr %p, i8 %a) {
; X64-LABEL: <atomicrmw_max_i8_seq_cst>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    movzx esi, sil
; X64-NEXT:  <L0>:
; X64-NEXT:    cmp al, sil
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    cmovg ecx, eax
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg byte ptr [rdi], cl
; X64-NEXT:    jne <L0>
; X64-NEXT:    movsx eax, al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <atomicrmw_max_i8_seq_cst>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldsmaxalb w1, w1, [x0]
; ARM64-NEXT:    sxtb w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = atomicrmw max ptr %p, i8 %a seq_cst
  ret i8 %r
}

define void @atomicrmw_max_i8_seq_cst_nouse(ptr %p, i8 %a) {
; X64-LABEL: <atomicrmw_max_i8_seq_cst_nouse>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    movzx esi, sil
; X64-NEXT:  <L0>:
; X64-NEXT:    cmp al, sil
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    cmovg ecx, eax
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg byte ptr [rdi], cl
; X64-NEXT:    jne <L0>
; X64-NEXT:    movsx eax, al
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <atomicrmw_max_i8_seq_cst_nouse>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldsmaxalb w1, w1, [x0]
; ARM64-NEXT:    sxtb w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = atomicrmw max ptr %p, i8 %a seq_cst
  ret void
}

define i16 @atomicrmw_max_i16_seq_cst(ptr %p, i16 %a) {
; X64-LABEL: <atomicrmw_max_i16_seq_cst>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, word ptr [rdi]
; X64-NEXT:  <L0>:
; X64-NEXT:    cmp ax, si
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    cmovg ecx, eax
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg word ptr [rdi], cx
; X64-NEXT:    jne <L0>
; X64-NEXT:    movsx eax, ax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <atomicrmw_max_i16_seq_cst>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldsmaxalh w1, w1, [x0]
; ARM64-NEXT:    sxth w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = atomicrmw max ptr %p, i16 %a seq_cst
  ret i16 %r
}

define void @atomicrmw_max_i16_seq_cst_nouse(ptr %p, i16 %a) {
; X64-LABEL: <atomicrmw_max_i16_seq_cst_nouse>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, word ptr [rdi]
; X64-NEXT:  <L0>:
; X64-NEXT:    cmp ax, si
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    cmovg ecx, eax
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg word ptr [rdi], cx
; X64-NEXT:    jne <L0>
; X64-NEXT:    movsx eax, ax
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <atomicrmw_max_i16_seq_cst_nouse>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldsmaxalh w1, w1, [x0]
; ARM64-NEXT:    sxth w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = atomicrmw max ptr %p, i16 %a seq_cst
  ret void
}

define i32 @atomicrmw_max_i32_seq_cst(ptr %p, i32 %a) {
; X64-LABEL: <atomicrmw_max_i32_seq_cst>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:  <L0>:
; X64-NEXT:    cmp eax, esi
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    cmovg ecx, eax
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg dword ptr [rdi], ecx
; X64-NEXT:    jne <L0>
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <atomicrmw_max_i32_seq_cst>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldsmaxal w1, w1, [x0]
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = atomicrmw max ptr %p, i32 %a seq_cst
  ret i32 %r
}

define void @atomicrmw_max_i32_seq_cst_nouse(ptr %p, i32 %a) {
; X64-LABEL: <atomicrmw_max_i32_seq_cst_nouse>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:  <L0>:
; X64-NEXT:    cmp eax, esi
; X64-NEXT:    mov ecx, esi
; X64-NEXT:    cmovg ecx, eax
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg dword ptr [rdi], ecx
; X64-NEXT:    jne <L0>
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <atomicrmw_max_i32_seq_cst_nouse>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldsmaxal w1, w1, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = atomicrmw max ptr %p, i32 %a seq_cst
  ret void
}

define i64 @atomicrmw_max_i64_seq_cst(ptr %p, i64 %a) {
; X64-LABEL: <atomicrmw_max_i64_seq_cst>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:  <L0>:
; X64-NEXT:    cmp rax, rsi
; X64-NEXT:    mov rcx, rsi
; X64-NEXT:    cmovg rcx, rax
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rcx
; X64-NEXT:    jne <L0>
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <atomicrmw_max_i64_seq_cst>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldsmaxal x1, x1, [x0]
; ARM64-NEXT:    mov x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = atomicrmw max ptr %p, i64 %a seq_cst
  ret i64 %r
}

define void @atomicrmw_max_i64_seq_cst_nouse(ptr %p, i64 %a) {
; X64-LABEL: <atomicrmw_max_i64_seq_cst_nouse>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:  <L0>:
; X64-NEXT:    cmp rax, rsi
; X64-NEXT:    mov rcx, rsi
; X64-NEXT:    cmovg rcx, rax
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rcx
; X64-NEXT:    jne <L0>
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <atomicrmw_max_i64_seq_cst_nouse>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldsmaxal x1, x1, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = atomicrmw max ptr %p, i64 %a seq_cst
  ret void
}
