; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel --section=.text --section=.rodata - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always

define i32 @bitcast_f32_to_i32(float %0) {
; X64-LABEL: bitcast_f32_to_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movd eax, xmm0
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    nop
;
; ARM64-LABEL: bitcast_f32_to_i32>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    fmov w0, s0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = bitcast float %0 to i32
  ret i32 %1
}

define float @bitcast_i32_to_f32(i32 %0) {
; X64-LABEL: bitcast_i32_to_f32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movd xmm0, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    nop
;
; ARM64-LABEL: bitcast_i32_to_f32>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    fmov s0, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = bitcast i32 %0 to float
  ret float %1
}


define i64 @bitcast_f64_to_i64(double %0) {
; X64-LABEL: bitcast_f64_to_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movq rax, xmm0
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    nop
;
; ARM64-LABEL: bitcast_f64_to_i64>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    fmov x0, d0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = bitcast double %0 to i64
  ret i64 %1
}

define double @bitcast_i64_to_f64(i64 %0) {
; X64-LABEL: bitcast_i64_to_f64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movq xmm0, rdi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    nop
;
; ARM64-LABEL: bitcast_i64_to_f64>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    fmov d0, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = bitcast i64 %0 to double
  ret double %1
}


define <4 x float> @bitcast_i8vec_to_f32vec(<16 x i8> %0) {
; X64-LABEL: bitcast_i8vec_to_f32vec>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:    nop word ptr [rax + rax]
; X64:    nop dword ptr [rax]
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: bitcast_i8vec_to_f32vec>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = bitcast <16 x i8> %0 to <4 x float>
  ret <4 x float> %1
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
