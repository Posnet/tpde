; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2025 Contributors to TPDE <https://tpde.org>
; SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

; COM: ptr, cmp, new_val

define {i64, i1} @cmpxchg_mono_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_mono_mono>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_mono_mono>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    cas x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa8]
; ARM64-NEXT:    mov x0, x3
; ARM64-NEXT:    ldrb w1, [x29, #0xa8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i64 %1, i64 %2 monotonic monotonic
  ret {i64, i1} %r
}


define {i64, i1} @cmpxchg_acq_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_acq_mono>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acq_mono>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casa x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa8]
; ARM64-NEXT:    mov x0, x3
; ARM64-NEXT:    ldrb w1, [x29, #0xa8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i64 %1, i64 %2 acquire monotonic
  ret {i64, i1} %r
}

define {i64, i1} @cmpxchg_acq_acq(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_acq_acq>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acq_acq>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casa x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa8]
; ARM64-NEXT:    mov x0, x3
; ARM64-NEXT:    ldrb w1, [x29, #0xa8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i64 %1, i64 %2 acquire acquire
  ret {i64, i1} %r
}


define {i64, i1} @cmpxchg_rel_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_rel_mono>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_rel_mono>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casl x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa8]
; ARM64-NEXT:    mov x0, x3
; ARM64-NEXT:    ldrb w1, [x29, #0xa8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i64 %1, i64 %2 release monotonic
  ret {i64, i1} %r
}

define {i64, i1} @cmpxchg_rel_acq(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_rel_acq>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_rel_acq>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casal x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa8]
; ARM64-NEXT:    mov x0, x3
; ARM64-NEXT:    ldrb w1, [x29, #0xa8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i64 %1, i64 %2 release acquire
  ret {i64, i1} %r
}


define {i64, i1} @cmpxchg_acqrel_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_acqrel_mono>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acqrel_mono>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casal x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa8]
; ARM64-NEXT:    mov x0, x3
; ARM64-NEXT:    ldrb w1, [x29, #0xa8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i64 %1, i64 %2 acq_rel monotonic
  ret {i64, i1} %r
}

define {i64, i1} @cmpxchg_acqrel_acq(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_acqrel_acq>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acqrel_acq>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casal x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa8]
; ARM64-NEXT:    mov x0, x3
; ARM64-NEXT:    ldrb w1, [x29, #0xa8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i64 %1, i64 %2 acq_rel acquire
  ret {i64, i1} %r
}


define {i64, i1} @cmpxchg_seqcst_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_seqcst_mono>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_seqcst_mono>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casal x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa8]
; ARM64-NEXT:    mov x0, x3
; ARM64-NEXT:    ldrb w1, [x29, #0xa8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i64 %1, i64 %2 seq_cst monotonic
  ret {i64, i1} %r
}

define {i64, i1} @cmpxchg_seqcst_acq(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_seqcst_acq>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_seqcst_acq>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casal x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa8]
; ARM64-NEXT:    mov x0, x3
; ARM64-NEXT:    ldrb w1, [x29, #0xa8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i64 %1, i64 %2 seq_cst acquire
  ret {i64, i1} %r
}

define {i64, i1} @cmpxchg_seqcst_seqcst(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_seqcst_seqcst>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_seqcst_seqcst>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casal x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa8]
; ARM64-NEXT:    mov x0, x3
; ARM64-NEXT:    ldrb w1, [x29, #0xa8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i64 %1, i64 %2 seq_cst seq_cst
  ret {i64, i1} %r
}


define {i32, i1} @cmpxchg_mono_mono32(ptr %0, i32 %1, i32 %2) {
; X64-LABEL: <cmpxchg_mono_mono32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg dword ptr [rdi], edx
; X64-NEXT:    sete cl
; X64-NEXT:    mov eax, eax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_mono_mono32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    cas w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa4]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i32 %1, i32 %2 monotonic monotonic
  ret {i32, i1} %r
}


define {i32, i1} @cmpxchg_acq_mono32(ptr %0, i32 %1, i32 %2) {
; X64-LABEL: <cmpxchg_acq_mono32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg dword ptr [rdi], edx
; X64-NEXT:    sete cl
; X64-NEXT:    mov eax, eax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acq_mono32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casa w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa4]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i32 %1, i32 %2 acquire monotonic
  ret {i32, i1} %r
}

define {i32, i1} @cmpxchg_acq_acq32(ptr %0, i32 %1, i32 %2) {
; X64-LABEL: <cmpxchg_acq_acq32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg dword ptr [rdi], edx
; X64-NEXT:    sete cl
; X64-NEXT:    mov eax, eax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acq_acq32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casa w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa4]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i32 %1, i32 %2 acquire acquire
  ret {i32, i1} %r
}


define {i32, i1} @cmpxchg_rel_mono32(ptr %0, i32 %1, i32 %2) {
; X64-LABEL: <cmpxchg_rel_mono32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg dword ptr [rdi], edx
; X64-NEXT:    sete cl
; X64-NEXT:    mov eax, eax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_rel_mono32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casl w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa4]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i32 %1, i32 %2 release monotonic
  ret {i32, i1} %r
}

define {i32, i1} @cmpxchg_rel_acq32(ptr %0, i32 %1, i32 %2) {
; X64-LABEL: <cmpxchg_rel_acq32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg dword ptr [rdi], edx
; X64-NEXT:    sete cl
; X64-NEXT:    mov eax, eax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_rel_acq32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casal w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa4]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i32 %1, i32 %2 release acquire
  ret {i32, i1} %r
}


define {i32, i1} @cmpxchg_acqrel_mono32(ptr %0, i32 %1, i32 %2) {
; X64-LABEL: <cmpxchg_acqrel_mono32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg dword ptr [rdi], edx
; X64-NEXT:    sete cl
; X64-NEXT:    mov eax, eax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acqrel_mono32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casal w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa4]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i32 %1, i32 %2 acq_rel monotonic
  ret {i32, i1} %r
}

define {i32, i1} @cmpxchg_acqrel_acq32(ptr %0, i32 %1, i32 %2) {
; X64-LABEL: <cmpxchg_acqrel_acq32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg dword ptr [rdi], edx
; X64-NEXT:    sete cl
; X64-NEXT:    mov eax, eax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acqrel_acq32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casal w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa4]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i32 %1, i32 %2 acq_rel acquire
  ret {i32, i1} %r
}


define {i32, i1} @cmpxchg_seqcst_mono32(ptr %0, i32 %1, i32 %2) {
; X64-LABEL: <cmpxchg_seqcst_mono32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg dword ptr [rdi], edx
; X64-NEXT:    sete cl
; X64-NEXT:    mov eax, eax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_seqcst_mono32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casal w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa4]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i32 %1, i32 %2 seq_cst monotonic
  ret {i32, i1} %r
}

define {i32, i1} @cmpxchg_seqcst_acq32(ptr %0, i32 %1, i32 %2) {
; X64-LABEL: <cmpxchg_seqcst_acq32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg dword ptr [rdi], edx
; X64-NEXT:    sete cl
; X64-NEXT:    mov eax, eax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_seqcst_acq32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casal w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa4]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i32 %1, i32 %2 seq_cst acquire
  ret {i32, i1} %r
}

define {i32, i1} @cmpxchg_seqcst_seqcst32(ptr %0, i32 %1, i32 %2) {
; X64-LABEL: <cmpxchg_seqcst_seqcst32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg dword ptr [rdi], edx
; X64-NEXT:    sete cl
; X64-NEXT:    mov eax, eax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_seqcst_seqcst32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casal w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa4]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i32 %1, i32 %2 seq_cst seq_cst
  ret {i32, i1} %r
}


define {i16, i1} @cmpxchg_mono_mono16(ptr %0, i16 %1, i16 %2) {
; X64-LABEL: <cmpxchg_mono_mono16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg word ptr [rdi], dx
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_mono_mono16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    cash w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxth
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa2]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa2]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i16 %1, i16 %2 monotonic monotonic
  ret {i16, i1} %r
}


define {i16, i1} @cmpxchg_acq_mono16(ptr %0, i16 %1, i16 %2) {
; X64-LABEL: <cmpxchg_acq_mono16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg word ptr [rdi], dx
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acq_mono16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casah w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxth
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa2]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa2]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i16 %1, i16 %2 acquire monotonic
  ret {i16, i1} %r
}

define {i16, i1} @cmpxchg_acq_acq16(ptr %0, i16 %1, i16 %2) {
; X64-LABEL: <cmpxchg_acq_acq16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg word ptr [rdi], dx
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acq_acq16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casah w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxth
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa2]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa2]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i16 %1, i16 %2 acquire acquire
  ret {i16, i1} %r
}


define {i16, i1} @cmpxchg_rel_mono16(ptr %0, i16 %1, i16 %2) {
; X64-LABEL: <cmpxchg_rel_mono16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg word ptr [rdi], dx
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_rel_mono16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    caslh w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxth
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa2]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa2]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i16 %1, i16 %2 release monotonic
  ret {i16, i1} %r
}

define {i16, i1} @cmpxchg_rel_acq16(ptr %0, i16 %1, i16 %2) {
; X64-LABEL: <cmpxchg_rel_acq16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg word ptr [rdi], dx
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_rel_acq16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casalh w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxth
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa2]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa2]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i16 %1, i16 %2 release acquire
  ret {i16, i1} %r
}


define {i16, i1} @cmpxchg_acqrel_mono16(ptr %0, i16 %1, i16 %2) {
; X64-LABEL: <cmpxchg_acqrel_mono16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg word ptr [rdi], dx
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acqrel_mono16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casalh w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxth
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa2]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa2]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i16 %1, i16 %2 acq_rel monotonic
  ret {i16, i1} %r
}

define {i16, i1} @cmpxchg_acqrel_acq16(ptr %0, i16 %1, i16 %2) {
; X64-LABEL: <cmpxchg_acqrel_acq16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg word ptr [rdi], dx
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acqrel_acq16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casalh w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxth
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa2]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa2]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i16 %1, i16 %2 acq_rel acquire
  ret {i16, i1} %r
}


define {i16, i1} @cmpxchg_seqcst_mono16(ptr %0, i16 %1, i16 %2) {
; X64-LABEL: <cmpxchg_seqcst_mono16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg word ptr [rdi], dx
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_seqcst_mono16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casalh w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxth
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa2]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa2]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i16 %1, i16 %2 seq_cst monotonic
  ret {i16, i1} %r
}

define {i16, i1} @cmpxchg_seqcst_acq16(ptr %0, i16 %1, i16 %2) {
; X64-LABEL: <cmpxchg_seqcst_acq16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg word ptr [rdi], dx
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_seqcst_acq16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casalh w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxth
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa2]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa2]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i16 %1, i16 %2 seq_cst acquire
  ret {i16, i1} %r
}

define {i16, i1} @cmpxchg_seqcst_seqcst16(ptr %0, i16 %1, i16 %2) {
; X64-LABEL: <cmpxchg_seqcst_seqcst16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg word ptr [rdi], dx
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, ax
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_seqcst_seqcst16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casalh w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxth
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa2]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa2]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i16 %1, i16 %2 seq_cst seq_cst
  ret {i16, i1} %r
}


define {i8, i1} @cmpxchg_mono_mono8(ptr %0, i8 %1, i8 %2) {
; X64-LABEL: <cmpxchg_mono_mono8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg byte ptr [rdi], dl
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_mono_mono8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casb w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxtb
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa1]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa1]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i8 %1, i8 %2 monotonic monotonic
  ret {i8, i1} %r
}


define {i8, i1} @cmpxchg_acq_mono8(ptr %0, i8 %1, i8 %2) {
; X64-LABEL: <cmpxchg_acq_mono8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg byte ptr [rdi], dl
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acq_mono8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casab w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxtb
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa1]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa1]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i8 %1, i8 %2 acquire monotonic
  ret {i8, i1} %r
}

define {i8, i1} @cmpxchg_acq_acq8(ptr %0, i8 %1, i8 %2) {
; X64-LABEL: <cmpxchg_acq_acq8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg byte ptr [rdi], dl
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acq_acq8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casab w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxtb
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa1]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa1]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i8 %1, i8 %2 acquire acquire
  ret {i8, i1} %r
}


define {i8, i1} @cmpxchg_rel_mono8(ptr %0, i8 %1, i8 %2) {
; X64-LABEL: <cmpxchg_rel_mono8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg byte ptr [rdi], dl
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_rel_mono8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    caslb w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxtb
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa1]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa1]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i8 %1, i8 %2 release monotonic
  ret {i8, i1} %r
}

define {i8, i1} @cmpxchg_rel_acq8(ptr %0, i8 %1, i8 %2) {
; X64-LABEL: <cmpxchg_rel_acq8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg byte ptr [rdi], dl
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_rel_acq8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casalb w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxtb
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa1]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa1]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i8 %1, i8 %2 release acquire
  ret {i8, i1} %r
}


define {i8, i1} @cmpxchg_acqrel_mono8(ptr %0, i8 %1, i8 %2) {
; X64-LABEL: <cmpxchg_acqrel_mono8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg byte ptr [rdi], dl
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acqrel_mono8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casalb w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxtb
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa1]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa1]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i8 %1, i8 %2 acq_rel monotonic
  ret {i8, i1} %r
}

define {i8, i1} @cmpxchg_acqrel_acq8(ptr %0, i8 %1, i8 %2) {
; X64-LABEL: <cmpxchg_acqrel_acq8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg byte ptr [rdi], dl
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_acqrel_acq8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casalb w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxtb
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa1]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa1]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i8 %1, i8 %2 acq_rel acquire
  ret {i8, i1} %r
}


define {i8, i1} @cmpxchg_seqcst_mono8(ptr %0, i8 %1, i8 %2) {
; X64-LABEL: <cmpxchg_seqcst_mono8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg byte ptr [rdi], dl
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_seqcst_mono8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casalb w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxtb
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa1]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa1]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i8 %1, i8 %2 seq_cst monotonic
  ret {i8, i1} %r
}

define {i8, i1} @cmpxchg_seqcst_acq8(ptr %0, i8 %1, i8 %2) {
; X64-LABEL: <cmpxchg_seqcst_acq8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg byte ptr [rdi], dl
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_seqcst_acq8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casalb w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxtb
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa1]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa1]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i8 %1, i8 %2 seq_cst acquire
  ret {i8, i1} %r
}

define {i8, i1} @cmpxchg_seqcst_seqcst8(ptr %0, i8 %1, i8 %2) {
; X64-LABEL: <cmpxchg_seqcst_seqcst8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, esi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg byte ptr [rdi], dl
; X64-NEXT:    sete cl
; X64-NEXT:    movzx eax, al
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_seqcst_seqcst8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    casalb w3, w2, [x0]
; ARM64-NEXT:    cmp w3, w1, uxtb
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    strb w0, [x29, #0xa1]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldrb w1, [x29, #0xa1]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = cmpxchg ptr %0, i8 %1, i8 %2 seq_cst seq_cst
  ret {i8, i1} %r
}
