; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

; COM: ptr, cmp, new_val
define void @cmpxchg_mono_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_mono_mono>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: <cmpxchg_mono_mono>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    cas x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 monotonic monotonic
  ret void
}


define void @cmpxchg_acq_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_acq_mono>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: <cmpxchg_acq_mono>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casa x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 acquire monotonic
  ret void
}

define void @cmpxchg_acq_acq(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_acq_acq>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: <cmpxchg_acq_acq>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casa x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 acquire acquire
  ret void
}


define void @cmpxchg_rel_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_rel_mono>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: <cmpxchg_rel_mono>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casl x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 release monotonic
  ret void
}

define void @cmpxchg_rel_acq(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_rel_acq>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: <cmpxchg_rel_acq>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casal x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 release acquire
  ret void
}


define void @cmpxchg_acqrel_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_acqrel_mono>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: <cmpxchg_acqrel_mono>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casal x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 acq_rel monotonic
  ret void
}

define void @cmpxchg_acqrel_acq(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_acqrel_acq>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: <cmpxchg_acqrel_acq>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casal x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 acq_rel acquire
  ret void
}


define void @cmpxchg_seqcst_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_seqcst_mono>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: <cmpxchg_seqcst_mono>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casal x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 seq_cst monotonic
  ret void
}

define void @cmpxchg_seqcst_acq(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_seqcst_acq>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: <cmpxchg_seqcst_acq>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casal x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 seq_cst acquire
  ret void
}

define void @cmpxchg_seqcst_seqcst(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: <cmpxchg_seqcst_seqcst>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    lock
; X64-NEXT:    cmpxchg qword ptr [rdi], rdx
; X64-NEXT:    sete cl
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <cmpxchg_seqcst_seqcst>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    casal x3, x2, [x0]
; ARM64-NEXT:    cmp x3, x1
; ARM64-NEXT:    cset w0, eq
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 seq_cst seq_cst
  ret void
}
