; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel --section=.text --section=.rodata - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always


; COM: ptr, cmp, new_val
define void @cmpxchg_mono_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: cmpxchg_mono_mono>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, rsi
; X64:    lock
; X64:    cmpxchg qword ptr [rdi], rdx
; X64:    sete cl
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 monotonic monotonic
  ret void
}


define void @cmpxchg_acq_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: cmpxchg_acq_mono>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, rsi
; X64:    lock
; X64:    cmpxchg qword ptr [rdi], rdx
; X64:    sete cl
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 acquire monotonic
  ret void
}

define void @cmpxchg_acq_acq(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: cmpxchg_acq_acq>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, rsi
; X64:    lock
; X64:    cmpxchg qword ptr [rdi], rdx
; X64:    sete cl
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 acquire acquire
  ret void
}


define void @cmpxchg_rel_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: cmpxchg_rel_mono>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, rsi
; X64:    lock
; X64:    cmpxchg qword ptr [rdi], rdx
; X64:    sete cl
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 release monotonic
  ret void
}

define void @cmpxchg_rel_acq(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: cmpxchg_rel_acq>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, rsi
; X64:    lock
; X64:    cmpxchg qword ptr [rdi], rdx
; X64:    sete cl
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 release acquire
  ret void
}


define void @cmpxchg_acqrel_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: cmpxchg_acqrel_mono>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, rsi
; X64:    lock
; X64:    cmpxchg qword ptr [rdi], rdx
; X64:    sete cl
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 acq_rel monotonic
  ret void
}

define void @cmpxchg_acqrel_acq(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: cmpxchg_acqrel_acq>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, rsi
; X64:    lock
; X64:    cmpxchg qword ptr [rdi], rdx
; X64:    sete cl
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 acq_rel acquire
  ret void
}


define void @cmpxchg_seqcst_mono(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: cmpxchg_seqcst_mono>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, rsi
; X64:    lock
; X64:    cmpxchg qword ptr [rdi], rdx
; X64:    sete cl
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 seq_cst monotonic
  ret void
}

define void @cmpxchg_seqcst_acq(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: cmpxchg_seqcst_acq>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, rsi
; X64:    lock
; X64:    cmpxchg qword ptr [rdi], rdx
; X64:    sete cl
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 seq_cst acquire
  ret void
}

define void @cmpxchg_seqcst_seqcst(ptr %0, i64 %1, i64 %2) {
; X64-LABEL: cmpxchg_seqcst_seqcst>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, rsi
; X64:    lock
; X64:    cmpxchg qword ptr [rdi], rdx
; X64:    sete cl
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    <unknown>
entry:
  %3 = cmpxchg ptr %0, i64 %1, i64 %2 seq_cst seq_cst
  ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
