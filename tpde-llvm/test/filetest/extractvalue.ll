; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

%struct.i8_i32 = type { i8, i32 }
%struct.ptr_i32 = type { ptr, i32 }
%struct.f32_ptr = type { float, ptr }
%struct.i128_i1 = type { i128, i1 }

define i8 @extract_i8_i32_0(ptr %0) {
; X64-LABEL: <extract_i8_i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_i8_i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0]
; ARM64-NEXT:    ldr w2, [x0, #0x4]
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.i8_i32, ptr %0
  %2 = extractvalue %struct.i8_i32 %1, 0
  ret i8 %2
}

define i32 @extract_i8_i32_1(ptr %0) {
; X64-LABEL: <extract_i8_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_i8_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0]
; ARM64-NEXT:    ldr w2, [x0, #0x4]
; ARM64-NEXT:    mov w0, w2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.i8_i32, ptr %0
  %2 = extractvalue %struct.i8_i32 %1, 1
  ret i32 %2
}

define i8 @extract_i8_i32_0_no_salvage(ptr %0) {
; X64-LABEL: <extract_i8_i32_0_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov edx, eax
; X64-NEXT:    mov byte ptr [rdi], al
; X64-NEXT:    mov dword ptr [rdi + 0x4], ecx
; X64-NEXT:    mov eax, edx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_i8_i32_0_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0]
; ARM64-NEXT:    ldr w2, [x0, #0x4]
; ARM64-NEXT:    mov w3, w1
; ARM64-NEXT:    strb w1, [x0]
; ARM64-NEXT:    str w2, [x0, #0x4]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.i8_i32, ptr %0
  %2 = extractvalue %struct.i8_i32 %1, 0
  store %struct.i8_i32 %1, ptr %0
  ret i8 %2
}

define i32 @extract_i8_i32_1_no_salvage(ptr %0) {
; X64-LABEL: <extract_i8_i32_1_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    mov byte ptr [rdi], al
; X64-NEXT:    mov dword ptr [rdi + 0x4], ecx
; X64-NEXT:    mov eax, edx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_i8_i32_1_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w1, [x0]
; ARM64-NEXT:    ldr w2, [x0, #0x4]
; ARM64-NEXT:    mov w3, w2
; ARM64-NEXT:    strb w1, [x0]
; ARM64-NEXT:    str w2, [x0, #0x4]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.i8_i32, ptr %0
  %2 = extractvalue %struct.i8_i32 %1, 1
  store %struct.i8_i32 %1, ptr %0
  ret i32 %2
}


define ptr @extract_ptr_i32_0(ptr %0) {
; X64-LABEL: <extract_ptr_i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x8]
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_ptr_i32_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x1, [x0]
; ARM64-NEXT:    ldr w2, [x0, #0x8]
; ARM64-NEXT:    mov x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.ptr_i32, ptr %0
  %2 = extractvalue %struct.ptr_i32 %1, 0
  ret ptr %2
}

define i32 @extract_ptr_i32_1(ptr %0) {
; X64-LABEL: <extract_ptr_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_ptr_i32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x1, [x0]
; ARM64-NEXT:    ldr w2, [x0, #0x8]
; ARM64-NEXT:    mov w0, w2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.ptr_i32, ptr %0
  %2 = extractvalue %struct.ptr_i32 %1, 1
  ret i32 %2
}

define ptr @extract_ptr_i32_0_no_salvage(ptr %0) {
; X64-LABEL: <extract_ptr_i32_0_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov qword ptr [rdi], rax
; X64-NEXT:    mov dword ptr [rdi + 0x8], ecx
; X64-NEXT:    mov rax, rdx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_ptr_i32_0_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x1, [x0]
; ARM64-NEXT:    ldr w2, [x0, #0x8]
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    str x1, [x0]
; ARM64-NEXT:    str w2, [x0, #0x8]
; ARM64-NEXT:    mov x0, x3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.ptr_i32, ptr %0
  %2 = extractvalue %struct.ptr_i32 %1, 0
  store %struct.ptr_i32 %1, ptr %0
  ret ptr %2
}

define i32 @extract_ptr_i32_1_no_salvage(ptr %0) {
; X64-LABEL: <extract_ptr_i32_1_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    mov qword ptr [rdi], rax
; X64-NEXT:    mov dword ptr [rdi + 0x8], ecx
; X64-NEXT:    mov eax, edx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_ptr_i32_1_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x1, [x0]
; ARM64-NEXT:    ldr w2, [x0, #0x8]
; ARM64-NEXT:    mov w3, w2
; ARM64-NEXT:    str x1, [x0]
; ARM64-NEXT:    str w2, [x0, #0x8]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.ptr_i32, ptr %0
  %2 = extractvalue %struct.ptr_i32 %1, 1
  store %struct.ptr_i32 %1, ptr %0
  ret i32 %2
}


define float @extract_f32_ptr_0(ptr %0) {
; X64-LABEL: <extract_f32_ptr_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movss xmm0, dword ptr [rdi]
; X64-NEXT:    mov rax, qword ptr [rdi + 0x8]
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_f32_ptr_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr s0, [x0]
; ARM64-NEXT:    ldr x1, [x0, #0x8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.f32_ptr, ptr %0
  %2 = extractvalue %struct.f32_ptr %1, 0
  ret float %2
}

define ptr @extract_f32_ptr_1(ptr %0) {
; X64-LABEL: <extract_f32_ptr_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movss xmm0, dword ptr [rdi]
; X64-NEXT:    mov rax, qword ptr [rdi + 0x8]
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_f32_ptr_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr s0, [x0]
; ARM64-NEXT:    ldr x1, [x0, #0x8]
; ARM64-NEXT:    mov x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.f32_ptr, ptr %0
  %2 = extractvalue %struct.f32_ptr %1, 1
  ret ptr %2
}

define float @extract_f32_ptr_0_no_salvage(ptr %0) {
; X64-LABEL: <extract_f32_ptr_0_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movss xmm0, dword ptr [rdi]
; X64-NEXT:    mov rax, qword ptr [rdi + 0x8]
; X64-NEXT:    movapd xmm1, xmm0
; X64-NEXT:    movss dword ptr [rdi], xmm0
; X64-NEXT:    mov qword ptr [rdi + 0x8], rax
; X64-NEXT:    movapd xmm0, xmm1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_f32_ptr_0_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr s0, [x0]
; ARM64-NEXT:    ldr x1, [x0, #0x8]
; ARM64-NEXT:    mov v1.16b, v0.16b
; ARM64-NEXT:    str s0, [x0]
; ARM64-NEXT:    str x1, [x0, #0x8]
; ARM64-NEXT:    mov v0.16b, v1.16b
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.f32_ptr, ptr %0
  %2 = extractvalue %struct.f32_ptr %1, 0
  store %struct.f32_ptr %1, ptr %0
  ret float %2
}

define ptr @extract_f32_ptr_1_no_salvage(ptr %0) {
; X64-LABEL: <extract_f32_ptr_1_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movss xmm0, dword ptr [rdi]
; X64-NEXT:    mov rax, qword ptr [rdi + 0x8]
; X64-NEXT:    mov rcx, rax
; X64-NEXT:    movss dword ptr [rdi], xmm0
; X64-NEXT:    mov qword ptr [rdi + 0x8], rax
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_f32_ptr_1_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr s0, [x0]
; ARM64-NEXT:    ldr x1, [x0, #0x8]
; ARM64-NEXT:    mov x2, x1
; ARM64-NEXT:    str s0, [x0]
; ARM64-NEXT:    str x1, [x0, #0x8]
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.f32_ptr, ptr %0
  %2 = extractvalue %struct.f32_ptr %1, 1
  store %struct.f32_ptr %1, ptr %0
  ret ptr %2
}


define i128 @extract_i128_i1_0(ptr %0) {
; X64-LABEL: <extract_i128_i1_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov rcx, qword ptr [rdi + 0x8]
; X64-NEXT:    movzx edx, byte ptr [rdi + 0x10]
; X64-NEXT:    mov rdx, rcx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_i128_i1_0>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x1, [x0]
; ARM64-NEXT:    ldr x2, [x0, #0x8]
; ARM64-NEXT:    ldrb w3, [x0, #0x10]
; ARM64-NEXT:    mov x0, x1
; ARM64-NEXT:    mov x1, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.i128_i1, ptr %0
  %2 = extractvalue %struct.i128_i1 %1, 0
  ret i128 %2
}

define i1 @extract_i128_i1_1(ptr %0) {
; X64-LABEL: <extract_i128_i1_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov rcx, qword ptr [rdi + 0x8]
; X64-NEXT:    movzx edx, byte ptr [rdi + 0x10]
; X64-NEXT:    mov eax, edx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_i128_i1_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x1, [x0]
; ARM64-NEXT:    ldr x2, [x0, #0x8]
; ARM64-NEXT:    ldrb w3, [x0, #0x10]
; ARM64-NEXT:    mov w0, w3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.i128_i1, ptr %0
  %2 = extractvalue %struct.i128_i1 %1, 1
  ret i1 %2
}

define i128 @extract_i128_i1_0_no_salvage(ptr %0) {
; X64-LABEL: <extract_i128_i1_0_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov rcx, qword ptr [rdi + 0x8]
; X64-NEXT:    movzx edx, byte ptr [rdi + 0x10]
; X64-NEXT:    mov rbx, rax
; X64-NEXT:    mov rsi, rcx
; X64-NEXT:    mov qword ptr [rdi], rax
; X64-NEXT:    mov qword ptr [rdi + 0x8], rcx
; X64-NEXT:    mov byte ptr [rdi + 0x10], dl
; X64-NEXT:    mov rax, rbx
; X64-NEXT:    mov rdx, rsi
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_i128_i1_0_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x1, [x0]
; ARM64-NEXT:    ldr x2, [x0, #0x8]
; ARM64-NEXT:    ldrb w3, [x0, #0x10]
; ARM64-NEXT:    mov x4, x1
; ARM64-NEXT:    mov x5, x2
; ARM64-NEXT:    str x1, [x0]
; ARM64-NEXT:    str x2, [x0, #0x8]
; ARM64-NEXT:    strb w3, [x0, #0x10]
; ARM64-NEXT:    mov x0, x4
; ARM64-NEXT:    mov x1, x5
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.i128_i1, ptr %0
  %2 = extractvalue %struct.i128_i1 %1, 0
  store %struct.i128_i1 %1, ptr %0
  ret i128 %2
}

define i1 @extract_i128_i1_1_no_salvage(ptr %0) {
; X64-LABEL: <extract_i128_i1_1_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov rcx, qword ptr [rdi + 0x8]
; X64-NEXT:    movzx edx, byte ptr [rdi + 0x10]
; X64-NEXT:    mov ebx, edx
; X64-NEXT:    mov qword ptr [rdi], rax
; X64-NEXT:    mov qword ptr [rdi + 0x8], rcx
; X64-NEXT:    mov byte ptr [rdi + 0x10], dl
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_i128_i1_1_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x1, [x0]
; ARM64-NEXT:    ldr x2, [x0, #0x8]
; ARM64-NEXT:    ldrb w3, [x0, #0x10]
; ARM64-NEXT:    mov w4, w3
; ARM64-NEXT:    str x1, [x0]
; ARM64-NEXT:    str x2, [x0, #0x8]
; ARM64-NEXT:    strb w3, [x0, #0x10]
; ARM64-NEXT:    mov w0, w4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = load %struct.i128_i1, ptr %0
  %2 = extractvalue %struct.i128_i1 %1, 1
  store %struct.i128_i1 %1, ptr %0
  ret i1 %2
}

define i64 @params({i8, {i8, i8}, i8} %s, i64, [2 x i64] %a, [2 x i64] %b) {
; X64-LABEL: <params>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    push r13
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:    sub rsp, 0x18
; X64-NEXT:    mov rax, qword ptr [rbp + 0x10]
; X64-NEXT:    mov rbx, qword ptr [rbp + 0x18]
; X64-NEXT:    mov r8, qword ptr [rbp + 0x20]
; X64-NEXT:    mov r10d, edi
; X64-NEXT:    movzx r10d, r10b
; X64-NEXT:    mov r11d, esi
; X64-NEXT:    mov r12d, edx
; X64-NEXT:    mov r13d, r11d
; X64-NEXT:    movzx r13d, r13b
; X64-NEXT:    movzx r12d, r12b
; X64-NEXT:    movzx ecx, cl
; X64-NEXT:    mov rdx, r9
; X64-NEXT:    mov rsi, rbx
; X64-NEXT:    lea r10, [r10 + r13]
; X64-NEXT:    lea r10, [r10 + r12]
; X64-NEXT:    lea r10, [r10 + rcx]
; X64-NEXT:    lea r10, [r10 + rdx]
; X64-NEXT:    lea r10, [r10 + rax]
; X64-NEXT:    lea r10, [r10 + rsi]
; X64-NEXT:    lea r10, [r10 + r8]
; X64-NEXT:    mov rax, r10
; X64-NEXT:    add rsp, 0x18
; X64-NEXT:    pop r13
; X64-NEXT:    pop r12
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <params>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x17, sp, #0xa0
; ARM64-NEXT:    ldr x4, [x17]
; ARM64-NEXT:    ldr x9, [x17, #0x8]
; ARM64-NEXT:    mov w7, w0
; ARM64-NEXT:    ubfx x7, x7, #0, #8
; ARM64-NEXT:    mov w8, w1
; ARM64-NEXT:    mov w10, w2
; ARM64-NEXT:    mov w11, w8
; ARM64-NEXT:    ubfx x11, x11, #0, #8
; ARM64-NEXT:    ubfx x10, x10, #0, #8
; ARM64-NEXT:    ubfx x3, x3, #0, #8
; ARM64-NEXT:    mov x0, x5
; ARM64-NEXT:    mov x1, x4
; ARM64-NEXT:    add x11, x11, x7
; ARM64-NEXT:    add x10, x10, x11
; ARM64-NEXT:    add x3, x3, x10
; ARM64-NEXT:    add x0, x0, x3
; ARM64-NEXT:    add x6, x6, x0
; ARM64-NEXT:    add x1, x1, x6
; ARM64-NEXT:    add x9, x9, x1
; ARM64-NEXT:    mov x0, x9
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %s0 = extractvalue {i8, {i8, i8}, i8} %s, 0
  %xs0 = zext i8 %s0 to i64
  %s1 = extractvalue {i8, {i8, i8}, i8} %s, 1
  %s1_0 = extractvalue {i8, i8} %s1, 0
  %xs1_0 = zext i8 %s1_0 to i64
  %s1_1 = extractvalue {i8, i8} %s1, 1
  %xs1_1 = zext i8 %s1_1 to i64
  %s2 = extractvalue {i8, {i8, i8}, i8} %s, 2
  %xs2 = zext i8 %s2 to i64
  %a0 = extractvalue [2 x i64] %a, 0
  %a1 = extractvalue [2 x i64] %a, 1
  %b0 = extractvalue [2 x i64] %b, 0
  %b1 = extractvalue [2 x i64] %b, 1
  %add0 = add i64 %xs0, %xs1_0
  %add1 = add i64 %add0, %xs1_1
  %add2 = add i64 %add1, %xs2
  %add3 = add i64 %add2, %a0
  %add4 = add i64 %add3, %a1
  %add5 = add i64 %add4, %b0
  %add6 = add i64 %add5, %b1
  ret i64 %add6
}

define void @extract_nested_1(ptr %p) {
; X64-LABEL: <extract_nested_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov edx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov ebx, dword ptr [rdi + 0xc]
; X64-NEXT:    mov dword ptr [rdi], eax
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_nested_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr w1, [x0]
; ARM64-NEXT:    ldr w2, [x0, #0x4]
; ARM64-NEXT:    ldr w3, [x0, #0x8]
; ARM64-NEXT:    ldr w4, [x0, #0xc]
; ARM64-NEXT:    str w1, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load {{i32, i32}, {i32, i32}}, ptr %p
  %ev = extractvalue {{i32, i32}, {i32, i32}} %l, 0, 0
  store i32 %ev, ptr %p
  ret void
}

define void @extract_nested_2(ptr %p) {
; X64-LABEL: <extract_nested_2>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov edx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov ebx, dword ptr [rdi + 0xc]
; X64-NEXT:    mov dword ptr [rdi], ecx
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_nested_2>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr w1, [x0]
; ARM64-NEXT:    ldr w2, [x0, #0x4]
; ARM64-NEXT:    ldr w3, [x0, #0x8]
; ARM64-NEXT:    ldr w4, [x0, #0xc]
; ARM64-NEXT:    str w2, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load {{i32, i32}, {i32, i32}}, ptr %p
  %ev = extractvalue {{i32, i32}, {i32, i32}} %l, 0, 1
  store i32 %ev, ptr %p
  ret void
}

define void @extract_nested_3(ptr %p) {
; X64-LABEL: <extract_nested_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov edx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov ebx, dword ptr [rdi + 0xc]
; X64-NEXT:    mov dword ptr [rdi], edx
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_nested_3>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr w1, [x0]
; ARM64-NEXT:    ldr w2, [x0, #0x4]
; ARM64-NEXT:    ldr w3, [x0, #0x8]
; ARM64-NEXT:    ldr w4, [x0, #0xc]
; ARM64-NEXT:    str w3, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load {{i32, i32}, {i32, i32}}, ptr %p
  %ev = extractvalue {{i32, i32}, {i32, i32}} %l, 1, 0
  store i32 %ev, ptr %p
  ret void
}

define void @extract_nested_4(ptr %p) {
; X64-LABEL: <extract_nested_4>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov edx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov ebx, dword ptr [rdi + 0xc]
; X64-NEXT:    mov dword ptr [rdi], ebx
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_nested_4>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr w1, [x0]
; ARM64-NEXT:    ldr w2, [x0, #0x4]
; ARM64-NEXT:    ldr w3, [x0, #0x8]
; ARM64-NEXT:    ldr w4, [x0, #0xc]
; ARM64-NEXT:    str w4, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load {{i32, i32}, {i32, i32}}, ptr %p
  %ev = extractvalue {{i32, i32}, {i32, i32}} %l, 1, 1
  store i32 %ev, ptr %p
  ret void
}

define void @extract_nested_5(ptr %p) {
; X64-LABEL: <extract_nested_5>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov edx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov ebx, dword ptr [rdi + 0xc]
; X64-NEXT:    mov esi, dword ptr [rdi + 0x10]
; X64-NEXT:    mov r8d, dword ptr [rdi + 0x14]
; X64-NEXT:    mov r9d, dword ptr [rdi + 0x18]
; X64-NEXT:    mov dword ptr [rdi], esi
; X64-NEXT:    mov dword ptr [rdi + 0x4], r8d
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <extract_nested_5>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr w1, [x0]
; ARM64-NEXT:    ldr w2, [x0, #0x4]
; ARM64-NEXT:    ldr w3, [x0, #0x8]
; ARM64-NEXT:    ldr w4, [x0, #0xc]
; ARM64-NEXT:    ldr w5, [x0, #0x10]
; ARM64-NEXT:    ldr w6, [x0, #0x14]
; ARM64-NEXT:    ldr w7, [x0, #0x18]
; ARM64-NEXT:    str w5, [x0]
; ARM64-NEXT:    str w6, [x0, #0x4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %l = load {{i32, i32}, {[2 x {i32, i32}], i32}}, ptr %p
  %ev = extractvalue {{i32, i32}, {[2 x {i32, i32}], i32}} %l, 1, 0, 1
  store {i32, i32} %ev, ptr %p
  ret void
}

