; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --version 5
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm --target=x86_64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always

define <2 x float> @fadd_v2f32_1(<2 x float> %0) {
; X64-LABEL: fadd_v2f32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movabs rax, 0x3f8000003f800000
; X64-NEXT:    movq xmm1, rax
; X64-NEXT:    addps xmm0, xmm1
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: fadd_v2f32_1>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x0, #0x3f8000003f800000 // =4575657222473777152
; ARM64-NEXT:    fmov d1, x0
; ARM64-NEXT:    fadd v0.2s, v0.2s, v1.2s
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = fadd <2 x float> %0, <float 1.0, float 1.0>
  ret <2 x float> %r
}

define <2 x float> @fadd_v2f32_f32(<2 x float> %0, <2 x float> %1) {
; X64-LABEL: fadd_v2f32_f32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    addps xmm0, xmm1
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: fadd_v2f32_f32>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fadd v0.2s, v0.2s, v1.2s
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = fadd <2 x float> %0, %1
  ret <2 x float> %r
}

define <4 x float> @fadd_v4f32_1(<4 x float> %0) {
; X64-LABEL: fadd_v4f32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movaps xmm1, xmmword ptr <fadd_v4f32_1+0x13>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    addps xmm0, xmm1
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: fadd_v4f32_1>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21
; ARM64-NEXT:    ldr q1, [x0]
; ARM64-NEXT:     R_AARCH64_LDST128_ABS_LO12_NC
; ARM64-NEXT:    fadd v0.4s, v0.4s, v1.4s
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = fadd <4 x float> %0, <float 1.0, float 1.0, float 1.0, float 1.0>
  ret <4 x float> %r
}

define <4 x float> @fadd_v4f32_f32(<4 x float> %0, <4 x float> %1) {
; X64-LABEL: fadd_v4f32_f32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    addps xmm0, xmm1
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: fadd_v4f32_f32>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fadd v0.4s, v0.4s, v1.4s
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = fadd <4 x float> %0, %1
  ret <4 x float> %r
}

define <2 x double> @fadd_v2f64_1(<2 x double> %0) {
; X64-LABEL: fadd_v2f64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movaps xmm1, xmmword ptr <fadd_v2f64_1+0x13>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    addpd xmm0, xmm1
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
;
; ARM64-LABEL: fadd_v2f64_1>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21
; ARM64-NEXT:    ldr q1, [x0]
; ARM64-NEXT:     R_AARCH64_LDST128_ABS_LO12_NC
; ARM64-NEXT:    fadd v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = fadd <2 x double> %0, <double 1.0, double 1.0>
  ret <2 x double> %r
}

define <2 x double> @fadd_v2f64_f64(<2 x double> %0, <2 x double> %1) {
; X64-LABEL: fadd_v2f64_f64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    addpd xmm0, xmm1
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: fadd_v2f64_f64>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fadd v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = fadd <2 x double> %0, %1
  ret <2 x double> %r
}

define <2 x float> @fadd_v2f32_no_salvage_imm(<2 x float> %0) {
; X64-LABEL: fadd_v2f32_no_salvage_imm>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmm1, xmm0
; X64-NEXT:    movabs rax, 0x3f8000003f800000
; X64-NEXT:    movq xmm2, rax
; X64-NEXT:    addps xmm1, xmm2
; X64-NEXT:    addps xmm0, xmm1
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: fadd_v2f32_no_salvage_imm>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x0, #0x3f8000003f800000 // =4575657222473777152
; ARM64-NEXT:    fmov d1, x0
; ARM64-NEXT:    fadd v1.2s, v0.2s, v1.2s
; ARM64-NEXT:    fadd v0.2s, v0.2s, v1.2s
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = fadd <2 x float> %0, <float 1.0, float 1.0>
  %s = fadd <2 x float> %0, %r
  ret <2 x float> %s
}

define <2 x float> @fadd_v2f32_no_salvage_reg(<2 x float> %0, <2 x float> %1) {
; X64-LABEL: fadd_v2f32_no_salvage_reg>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmm2, xmm0
; X64-NEXT:    addps xmm2, xmm1
; X64-NEXT:    addps xmm0, xmm2
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: fadd_v2f32_no_salvage_reg>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fadd v1.2s, v0.2s, v1.2s
; ARM64-NEXT:    fadd v0.2s, v0.2s, v1.2s
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = fadd <2 x float> %0, %1
  %s = fadd <2 x float> %0, %r
  ret <2 x float> %s
}

define <4 x float> @fadd_v4f32_no_salvage_imm(<4 x float> %0) {
; X64-LABEL: fadd_v4f32_no_salvage_imm>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movapd xmm1, xmm0
; X64-NEXT:    movaps xmm2, xmmword ptr <fadd_v4f32_no_salvage_imm+0x17>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    addps xmm1, xmm2
; X64-NEXT:    addps xmm0, xmm1
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: fadd_v4f32_no_salvage_imm>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21
; ARM64-NEXT:    ldr q1, [x0]
; ARM64-NEXT:     R_AARCH64_LDST128_ABS_LO12_NC
; ARM64-NEXT:    fadd v1.4s, v0.4s, v1.4s
; ARM64-NEXT:    fadd v0.4s, v0.4s, v1.4s
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = fadd <4 x float> %0, <float 1.0, float 1.0, float 1.0, float 1.0>
  %s = fadd <4 x float> %0, %r
  ret <4 x float> %s
}

define <4 x float> @fadd_v4f32_no_salvage_reg(<4 x float> %0, <4 x float> %1) {
; X64-LABEL: fadd_v4f32_no_salvage_reg>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movapd xmm2, xmm0
; X64-NEXT:    addps xmm2, xmm1
; X64-NEXT:    addps xmm0, xmm2
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: fadd_v4f32_no_salvage_reg>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fadd v1.4s, v0.4s, v1.4s
; ARM64-NEXT:    fadd v0.4s, v0.4s, v1.4s
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = fadd <4 x float> %0, %1
  %s = fadd <4 x float> %0, %r
  ret <4 x float> %s
}

define <2 x double> @fadd_v2f64_no_salvage_imm(<2 x double> %0) {
; X64-LABEL: fadd_v2f64_no_salvage_imm>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movapd xmm1, xmm0
; X64-NEXT:    movaps xmm2, xmmword ptr <fadd_v2f64_no_salvage_imm+0x17>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    addpd xmm1, xmm2
; X64-NEXT:    addpd xmm0, xmm1
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: fadd_v2f64_no_salvage_imm>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_ADR_PREL_PG_HI21
; ARM64-NEXT:    ldr q1, [x0]
; ARM64-NEXT:     R_AARCH64_LDST128_ABS_LO12_NC
; ARM64-NEXT:    fadd v1.2d, v0.2d, v1.2d
; ARM64-NEXT:    fadd v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = fadd <2 x double> %0, <double 1.0, double 1.0>
  %s = fadd <2 x double> %0, %r
  ret <2 x double> %s
}

define <2 x double> @fadd_v2f64_no_salvage_reg(<2 x double> %0, <2 x double> %1) {
; X64-LABEL: fadd_v2f64_no_salvage_reg>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movapd xmm2, xmm0
; X64-NEXT:    addpd xmm2, xmm1
; X64-NEXT:    addpd xmm0, xmm2
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: fadd_v2f64_no_salvage_reg>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fadd v1.2d, v0.2d, v1.2d
; ARM64-NEXT:    fadd v0.2d, v0.2d, v1.2d
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = fadd <2 x double> %0, %1
  %s = fadd <2 x double> %0, %r
  ret <2 x double> %s
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
