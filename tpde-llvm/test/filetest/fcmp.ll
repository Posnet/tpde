; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always


define i1 @fcmp_f32_false(float %0, float %1) {
; X64-LABEL: fcmp_f32_false>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov eax, 0x0
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp false float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_true(float %0, float %1) {
; X64-LABEL: fcmp_f32_true>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov eax, 0x1
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp true float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_oge(float %0, float %1) {
; X64-LABEL: fcmp_f32_oge>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomiss xmm0, xmm1
; X64:    setae al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp oge float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_ord(float %0, float %1) {
; X64-LABEL: fcmp_f32_ord>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomiss xmm0, xmm1
; X64:    setnp al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp ord float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_oeq(float %0, float %1) {
; X64-LABEL: fcmp_f32_oeq>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmpeqss xmm0, xmm1
; X64:    movd eax, xmm0
; X64:    and eax, 0x1
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp oeq float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_ogt(float %0, float %1) {
; X64-LABEL: fcmp_f32_ogt>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomiss xmm0, xmm1
; X64:    seta al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp ogt float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_olt(float %0, float %1) {
; X64-LABEL: fcmp_f32_olt>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomiss xmm1, xmm0
; X64:    seta al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp olt float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_ole(float %0, float %1) {
; X64-LABEL: fcmp_f32_ole>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomiss xmm1, xmm0
; X64:    setae al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp ole float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_uno(float %0, float %1) {
; X64-LABEL: fcmp_f32_uno>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomiss xmm0, xmm1
; X64:    setp al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp uno float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_ugt(float %0, float %1) {
; X64-LABEL: fcmp_f32_ugt>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomiss xmm1, xmm0
; X64:    setb al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp ugt float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_uge(float %0, float %1) {
; X64-LABEL: fcmp_f32_uge>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomiss xmm1, xmm0
; X64:    setbe al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp uge float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_ult(float %0, float %1) {
; X64-LABEL: fcmp_f32_ult>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomiss xmm0, xmm1
; X64:    setb al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp ult float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_ule(float %0, float %1) {
; X64-LABEL: fcmp_f32_ule>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomiss xmm0, xmm1
; X64:    setbe al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp ule float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_une(float %0, float %1) {
; X64-LABEL: fcmp_f32_une>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmpneqss xmm0, xmm1
; X64:    movd eax, xmm0
; X64:    and eax, 0x1
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp une float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_one(float %0, float %1) {
; X64-LABEL: fcmp_f32_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomiss xmm0, xmm1
; X64:    setne al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp one float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_ueq(float %0, float %1) {
; X64-LABEL: fcmp_f32_ueq>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomiss xmm0, xmm1
; X64:    sete al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp ueq float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_one_nonan(float %0, float %1) {
; X64-LABEL: fcmp_f32_one_nonan>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomiss xmm0, xmm1
; X64:    setne al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = fcmp nnan one float %0, %1
    ret i1 %2
}

define i1 @fcmp_f32_oeq_0(float %0) {
; X64-LABEL: fcmp_f32_oeq_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, 0x0
; X64:    movd xmm1, eax
; X64:    cmpeqss xmm0, xmm1
; X64:    movd eax, xmm0
; X64:    and eax, 0x1
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp oeq float %0, 0.0
    ret i1 %2
}



define i1 @fcmp_f64_false(double %0, double %1) {
; X64-LABEL: fcmp_f64_false>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov eax, 0x0
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp false double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_true(double %0, double %1) {
; X64-LABEL: fcmp_f64_true>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov eax, 0x1
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp true double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_oge(double %0, double %1) {
; X64-LABEL: fcmp_f64_oge>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomisd xmm0, xmm1
; X64:    setae al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp oge double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_ord(double %0, double %1) {
; X64-LABEL: fcmp_f64_ord>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomisd xmm0, xmm1
; X64:    setnp al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp ord double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_oeq(double %0, double %1) {
; X64-LABEL: fcmp_f64_oeq>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmpeqsd xmm0, xmm1
; X64:    movq rax, xmm0
; X64:    and eax, 0x1
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp oeq double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_ogt(double %0, double %1) {
; X64-LABEL: fcmp_f64_ogt>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomisd xmm0, xmm1
; X64:    seta al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp ogt double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_olt(double %0, double %1) {
; X64-LABEL: fcmp_f64_olt>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomisd xmm1, xmm0
; X64:    seta al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp olt double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_ole(double %0, double %1) {
; X64-LABEL: fcmp_f64_ole>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomisd xmm1, xmm0
; X64:    setae al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp ole double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_uno(double %0, double %1) {
; X64-LABEL: fcmp_f64_uno>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomisd xmm0, xmm1
; X64:    setp al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp uno double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_ugt(double %0, double %1) {
; X64-LABEL: fcmp_f64_ugt>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomisd xmm1, xmm0
; X64:    setb al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp ugt double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_uge(double %0, double %1) {
; X64-LABEL: fcmp_f64_uge>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomisd xmm1, xmm0
; X64:    setbe al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp uge double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_ult(double %0, double %1) {
; X64-LABEL: fcmp_f64_ult>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomisd xmm0, xmm1
; X64:    setb al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp ult double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_ule(double %0, double %1) {
; X64-LABEL: fcmp_f64_ule>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomisd xmm0, xmm1
; X64:    setbe al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp ule double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_une(double %0, double %1) {
; X64-LABEL: fcmp_f64_une>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmpneqsd xmm0, xmm1
; X64:    movq rax, xmm0
; X64:    and eax, 0x1
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp une double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_one(double %0, double %1) {
; X64-LABEL: fcmp_f64_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomisd xmm0, xmm1
; X64:    setne al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp one double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_ueq(double %0, double %1) {
; X64-LABEL: fcmp_f64_ueq>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomisd xmm0, xmm1
; X64:    sete al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp ueq double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_one_nonan(double %0, double %1) {
; X64-LABEL: fcmp_f64_one_nonan>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    ucomisd xmm0, xmm1
; X64:    setne al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = fcmp nnan one double %0, %1
    ret i1 %2
}

define i1 @fcmp_f64_oeq_0(double %0) {
; X64-LABEL: fcmp_f64_oeq_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov rax, 0x0
; X64:    movq xmm1, rax
; X64:    cmpeqsd xmm0, xmm1
; X64:    movq rax, xmm0
; X64:    and eax, 0x1
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    <unknown>
  entry:
    %2 = fcmp oeq double %0, 0.0
    ret i1 %2
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
