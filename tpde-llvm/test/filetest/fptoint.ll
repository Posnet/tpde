; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel --section=.text --section=.rodata - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always

define i32 @f32toi32(float %0) {
; X64-LABEL: f32toi32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cvttss2si eax, xmm0
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    nop
;
; ARM64-LABEL: f32toi32>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    fcvtzs w0, s0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = fptosi float %0 to i32
  ret i32 %1
}

define i32 @f32tou32(float %0) {
; X64-LABEL: f32tou32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cvttss2si rax, xmm0
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    nop
;
; ARM64-LABEL: f32tou32>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    fcvtzu w0, s0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = fptoui float %0 to i32
  ret i32 %1
}

define i64 @f32toi64(float %0) {
; X64-LABEL: f32toi64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cvttss2si rax, xmm0
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    nop
;
; ARM64-LABEL: f32toi64>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    fcvtzs x0, s0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = fptosi float %0 to i64
  ret i64 %1
}

define i64 @f32tou64(float %0) {
; X64-LABEL: f32tou64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cvttss2si rax, xmm0
; X64:    mov rcx, rax
; X64:    sar rcx, 0x3f
; X64:    subss xmm0, dword ptr <f32tou64+0x20>
; X64:     R_X86_64_PC32 -0x4
; X64:    cvttss2si rdx, xmm0
; X64:    and rdx, rcx
; X64:    or rdx, rax
; X64:    mov rax, rdx
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    nop dword ptr [rax]
;
; ARM64-LABEL: f32tou64>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    fcvtzu x0, s0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = fptoui float %0 to i64
  ret i64 %1
}


define i32 @f64toi32(double %0) {
; X64-LABEL: f64toi32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cvttsd2si eax, xmm0
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    nop
;
; ARM64-LABEL: f64toi32>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    fcvtzs w0, d0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = fptosi double %0 to i32
  ret i32 %1
}

define i32 @f64tou32(double %0) {
; X64-LABEL: f64tou32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cvttsd2si rax, xmm0
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    nop
;
; ARM64-LABEL: f64tou32>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    fcvtzu w0, d0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = fptoui double %0 to i32
  ret i32 %1
}

define i64 @f64toi64(double %0) {
; X64-LABEL: f64toi64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cvttsd2si rax, xmm0
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    nop
;
; ARM64-LABEL: f64toi64>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    fcvtzs x0, d0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = fptosi double %0 to i64
  ret i64 %1
}

define i64 @f64tou64(double %0) {
; X64-LABEL: f64tou64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cvttsd2si rax, xmm0
; X64:    mov rcx, rax
; X64:    sar rcx, 0x3f
; X64:    subsd xmm0, qword ptr <f64tou64+0x20>
; X64:     R_X86_64_PC32 -0x4
; X64:    cvttsd2si rdx, xmm0
; X64:    and rdx, rcx
; X64:    or rdx, rax
; X64:    mov rax, rdx
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    nop word ptr [rax + rax]
; X64:    nop dword ptr [rax]
; X64:     ...
;
; ARM64-LABEL: f64tou64>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    fcvtzu x0, d0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = fptoui double %0 to i64
  ret i64 %1
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
