; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always


define i8 @freeze_i8(i8 %0) {
; X64-LABEL: freeze_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
entry:
  %1 = freeze i8 %0
  ret i8 %1
}

define i8 @freeze_i8_no_salvage(i8 %0) {
; X64-LABEL: freeze_i8_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    mov eax, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  %1 = freeze i8 %0
  %2 = freeze i8 %0
  ret i8 %2
}


define i64 @freeze_i64(i64 %0) {
; X64-LABEL: freeze_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = freeze i64 %0
  ret i64 %1
}

define i64 @freeze_i64_no_salvage(i64 %0) {
; X64-LABEL: freeze_i64_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  %1 = freeze i64 %0
  %2 = freeze i64 %0
  ret i64 %2
}


define float @freeze_float(float %0) {
; X64-LABEL: freeze_float>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
entry:
  %1 = freeze float %0
  ret float %1
}

define float @freeze_float_no_salvage(float %0) {
; X64-LABEL: freeze_float_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    movupd xmm1, xmm0
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  %1 = freeze float %0
  %2 = freeze float %0
  ret float %2
}


%struct.i128_i1 = type { i128, i1 }

define void @freeze_i128_i1(ptr %0) {
; X64-LABEL: freeze_i128_i1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    mov rax, qword ptr [rdi]
; X64:    mov rcx, qword ptr [rdi + 0x8]
; X64:    movzx edx, byte ptr [rdi + 0x10]
; X64:    mov qword ptr [rdi + 0x8], rcx
; X64:    mov qword ptr [rdi], rax
; X64:    mov byte ptr [rdi + 0x10], dl
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = load %struct.i128_i1, ptr %0
  %2 = freeze %struct.i128_i1 %1
  store %struct.i128_i1 %2, ptr %0
  ret void
}

define void @freeze_i128_i1_no_salvage(ptr %0) {
; X64-LABEL: freeze_i128_i1_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x80
; X64:    mov rax, qword ptr [rdi]
; X64:    mov rcx, qword ptr [rdi + 0x8]
; X64:    movzx edx, byte ptr [rdi + 0x10]
; X64:    mov rbx, rax
; X64:    mov rsi, rcx
; X64:    mov r8d, edx
; X64:    mov qword ptr [rdi + 0x8], rsi
; X64:    mov qword ptr [rdi], rbx
; X64:    mov byte ptr [rdi + 0x10], r8b
; X64:    add rsp, 0x80
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    <unknown>
entry:
  %1 = load %struct.i128_i1, ptr %0
  %2 = freeze %struct.i128_i1 %1
  %3 = freeze %struct.i128_i1 %1
  store %struct.i128_i1 %2, ptr %0
  ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
