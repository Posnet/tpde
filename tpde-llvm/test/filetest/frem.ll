; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define float @frem_f32_1(float %0) {
; X64-LABEL: <frem_f32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, 0x3f800000
; X64-NEXT:    movd xmm1, eax
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 fmodf-0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <frem_f32_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fmov s1, #1.00000000
; ARM64-NEXT:    bl 0x34 <frem_f32_1+0x14>
; ARM64-NEXT:     R_AARCH64_CALL26 fmodf
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = frem float %0, 1.0
    ret float %1
}

define float @frem_f32_5_32(float %0) {
; X64-LABEL: <frem_f32_5_32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, 0x40aa3d71
; X64-NEXT:    movd xmm1, eax
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 fmodf-0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <frem_f32_5_32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x16, #0x3d71 // =15729
; ARM64-NEXT:    movk x16, #0x40aa, lsl #16
; ARM64-NEXT:    fmov s1, w16
; ARM64-NEXT:    bl 0x8c <frem_f32_5_32+0x1c>
; ARM64-NEXT:     R_AARCH64_CALL26 fmodf
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = frem float %0, 0x401547AE20000000
    ret float %1
}

define float @frem_f32_f32(float %0, float %1) {
; X64-LABEL: <frem_f32_f32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 fmodf-0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <frem_f32_f32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    bl 0xd0 <frem_f32_f32+0x10>
; ARM64-NEXT:     R_AARCH64_CALL26 fmodf
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = frem float %0, %1
    ret float %2
}

define double @frem_f64_1(double %0) {
; X64-LABEL: <frem_f64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x3ff0000000000000
; X64-NEXT:    movq xmm1, rax
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 fmod-0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <frem_f64_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fmov d1, #1.00000000
; ARM64-NEXT:    bl 0x114 <frem_f64_1+0x14>
; ARM64-NEXT:     R_AARCH64_CALL26 fmod
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = frem double %0, 1.0
    ret double %1
}

define double @frem_f64_5_32(double %0) {
; X64-LABEL: <frem_f64_5_32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movabs rax, 0x401547ae147ae148
; X64-NEXT:    movq xmm1, rax
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 fmod-0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <frem_f64_5_32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x16, #0xe148 // =57672
; ARM64-NEXT:    movk x16, #0x147a, lsl #16
; ARM64-NEXT:    movk x16, #0x47ae, lsl #32
; ARM64-NEXT:    movk x16, #0x4015, lsl #48
; ARM64-NEXT:    fmov d1, x16
; ARM64-NEXT:    bl 0x174 <frem_f64_5_32+0x24>
; ARM64-NEXT:     R_AARCH64_CALL26 fmod
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = frem double %0, 5.32
    ret double %1
}

define double @frem_f64_f64(double %0, double %1) {
; X64-LABEL: <frem_f64_f64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 fmod-0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <frem_f64_f64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    bl 0x1c0 <frem_f64_f64+0x10>
; ARM64-NEXT:     R_AARCH64_CALL26 fmod
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = frem double %0, %1
    ret double %2
}

define float @frem_f32_no_salvage_imm(float %0) {
; X64-LABEL: <frem_f32_no_salvage_imm>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movd dword ptr [rbp - 0x2c], xmm0
; X64-NEXT:    mov eax, 0x3f800000
; X64-NEXT:    movd xmm1, eax
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 fmodf-0x4
; X64-NEXT:    movd dword ptr [rbp - 0x30], xmm0
; X64-NEXT:    movd xmm0, dword ptr [rbp - 0x2c]
; X64-NEXT:    movd xmm1, dword ptr [rbp - 0x30]
; X64-NEXT:  <L1>:
; X64-NEXT:    call <L1>
; X64-NEXT:     R_X86_64_PLT32 fmodf-0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <frem_f32_no_salvage_imm>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    str s0, [x29, #0xa0]
; ARM64-NEXT:    fmov s1, #1.00000000
; ARM64-NEXT:    bl 0x208 <frem_f32_no_salvage_imm+0x18>
; ARM64-NEXT:     R_AARCH64_CALL26 fmodf
; ARM64-NEXT:    str s0, [x29, #0xa4]
; ARM64-NEXT:    ldr s0, [x29, #0xa0]
; ARM64-NEXT:    ldr s1, [x29, #0xa4]
; ARM64-NEXT:    bl 0x218 <frem_f32_no_salvage_imm+0x28>
; ARM64-NEXT:     R_AARCH64_CALL26 fmodf
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  entry:
    %1 = frem float %0, 1.0
    %2 = frem float %0, %1
    ret float %2
}

define float @frem_f32_no_salvage_reg(float %0, float %1) {
; X64-LABEL: <frem_f32_no_salvage_reg>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movd dword ptr [rbp - 0x2c], xmm0
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 fmodf-0x4
; X64-NEXT:    movd dword ptr [rbp - 0x30], xmm0
; X64-NEXT:    movd xmm0, dword ptr [rbp - 0x2c]
; X64-NEXT:    movd xmm1, dword ptr [rbp - 0x30]
; X64-NEXT:  <L1>:
; X64-NEXT:    call <L1>
; X64-NEXT:     R_X86_64_PLT32 fmodf-0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <frem_f32_no_salvage_reg>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    str s0, [x29, #0xa0]
; ARM64-NEXT:    bl 0x264 <frem_f32_no_salvage_reg+0x14>
; ARM64-NEXT:     R_AARCH64_CALL26 fmodf
; ARM64-NEXT:    str s0, [x29, #0xa4]
; ARM64-NEXT:    ldr s0, [x29, #0xa0]
; ARM64-NEXT:    ldr s1, [x29, #0xa4]
; ARM64-NEXT:    bl 0x274 <frem_f32_no_salvage_reg+0x24>
; ARM64-NEXT:     R_AARCH64_CALL26 fmodf
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  entry:
    %2 = frem float %0, %1
    %3 = frem float %0, %2
    ret float %3
}

define double @frem_f64_no_salvage_imm(double %0) {
; X64-LABEL: <frem_f64_no_salvage_imm>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movq qword ptr [rbp - 0x30], xmm0
; X64-NEXT:    movabs rax, 0x3ff0000000000000
; X64-NEXT:    movq xmm1, rax
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 fmod-0x4
; X64-NEXT:    movq qword ptr [rbp - 0x38], xmm0
; X64-NEXT:    movq xmm0, qword ptr [rbp - 0x30]
; X64-NEXT:    movq xmm1, qword ptr [rbp - 0x38]
; X64-NEXT:  <L1>:
; X64-NEXT:    call <L1>
; X64-NEXT:     R_X86_64_PLT32 fmod-0x4
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <frem_f64_no_salvage_imm>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    str d0, [x29, #0xa0]
; ARM64-NEXT:    fmov d1, #1.00000000
; ARM64-NEXT:    bl 0x2c8 <frem_f64_no_salvage_imm+0x18>
; ARM64-NEXT:     R_AARCH64_CALL26 fmod
; ARM64-NEXT:    str d0, [x29, #0xa8]
; ARM64-NEXT:    ldr d0, [x29, #0xa0]
; ARM64-NEXT:    ldr d1, [x29, #0xa8]
; ARM64-NEXT:    bl 0x2d8 <frem_f64_no_salvage_imm+0x28>
; ARM64-NEXT:     R_AARCH64_CALL26 fmod
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  entry:
    %1 = frem double %0, 1.0
    %2 = frem double %0, %1
    ret double %2
}

define double @frem_f64_no_salvage_reg(double %0, double %1) {
; X64-LABEL: <frem_f64_no_salvage_reg>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movq qword ptr [rbp - 0x30], xmm0
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 fmod-0x4
; X64-NEXT:    movq qword ptr [rbp - 0x38], xmm0
; X64-NEXT:    movq xmm0, qword ptr [rbp - 0x30]
; X64-NEXT:    movq xmm1, qword ptr [rbp - 0x38]
; X64-NEXT:  <L1>:
; X64-NEXT:    call <L1>
; X64-NEXT:     R_X86_64_PLT32 fmod-0x4
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <frem_f64_no_salvage_reg>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    str d0, [x29, #0xa0]
; ARM64-NEXT:    bl 0x324 <frem_f64_no_salvage_reg+0x14>
; ARM64-NEXT:     R_AARCH64_CALL26 fmod
; ARM64-NEXT:    str d0, [x29, #0xa8]
; ARM64-NEXT:    ldr d0, [x29, #0xa0]
; ARM64-NEXT:    ldr d1, [x29, #0xa8]
; ARM64-NEXT:    bl 0x334 <frem_f64_no_salvage_reg+0x24>
; ARM64-NEXT:     R_AARCH64_CALL26 fmod
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  entry:
    %2 = frem double %0, %1
    %3 = frem double %0, %2
    ret double %3
}

