; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always

define float @frem_f32_1(float %0) {
; X64-LABEL: frem_f32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, 0x3f800000
; X64:    movd xmm1, eax
; X64:  <L0>:
; X64:    call <L0>
; X64:     R_X86_64_PLT32 fmodf-0x4
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %1 = frem float %0, 1.0
    ret float %1
}

define float @frem_f32_5_32(float %0) {
; X64-LABEL: frem_f32_5_32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, 0x40aa3d71
; X64:    movd xmm1, eax
; X64:  <L0>:
; X64:    call <L0>
; X64:     R_X86_64_PLT32 fmodf-0x4
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %1 = frem float %0, 0x401547AE20000000
    ret float %1
}

define float @frem_f32_f32(float %0, float %1) {
; X64-LABEL: frem_f32_f32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:  <L0>:
; X64:    call <L0>
; X64:     R_X86_64_PLT32 fmodf-0x4
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = frem float %0, %1
    ret float %2
}

define double @frem_f64_1(double %0) {
; X64-LABEL: frem_f64_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    movabs rax, 0x3ff0000000000000
; X64:    movq xmm1, rax
; X64:  <L0>:
; X64:    call <L0>
; X64:     R_X86_64_PLT32 fmod-0x4
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = frem double %0, 1.0
    ret double %1
}

define double @frem_f64_5_32(double %0) {
; X64-LABEL: frem_f64_5_32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    movabs rax, 0x401547ae147ae148
; X64:    movq xmm1, rax
; X64:  <L0>:
; X64:    call <L0>
; X64:     R_X86_64_PLT32 fmod-0x4
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = frem double %0, 5.32
    ret double %1
}

define double @frem_f64_f64(double %0, double %1) {
; X64-LABEL: frem_f64_f64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:  <L0>:
; X64:    call <L0>
; X64:     R_X86_64_PLT32 fmod-0x4
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = frem double %0, %1
    ret double %2
}

define float @frem_f32_no_salvage_imm(float %0) {
; X64-LABEL: frem_f32_no_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    movd dword ptr [rbp - 0x4], xmm0
; X64:    mov eax, 0x3f800000
; X64:    movd xmm1, eax
; X64:  <L0>:
; X64:    call <L0>
; X64:     R_X86_64_PLT32 fmodf-0x4
; X64:    movd dword ptr [rbp - 0x8], xmm0
; X64:    movd xmm0, dword ptr [rbp - 0x4]
; X64:    movd xmm1, dword ptr [rbp - 0x8]
; X64:  <L1>:
; X64:    call <L1>
; X64:     R_X86_64_PLT32 fmodf-0x4
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = frem float %0, 1.0
    %2 = frem float %0, %1
    ret float %2
}

define float @frem_f32_no_salvage_reg(float %0, float %1) {
; X64-LABEL: frem_f32_no_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    movd dword ptr [rbp - 0x4], xmm0
; X64:  <L0>:
; X64:    call <L0>
; X64:     R_X86_64_PLT32 fmodf-0x4
; X64:    movd dword ptr [rbp - 0xc], xmm0
; X64:    movd xmm0, dword ptr [rbp - 0x4]
; X64:    movd xmm1, dword ptr [rbp - 0xc]
; X64:  <L1>:
; X64:    call <L1>
; X64:     R_X86_64_PLT32 fmodf-0x4
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %2 = frem float %0, %1
    %3 = frem float %0, %2
    ret float %3
}

define double @frem_f64_no_salvage_imm(double %0) {
; X64-LABEL: frem_f64_no_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movq qword ptr [rbp - 0x8], xmm0
; X64:    movabs rax, 0x3ff0000000000000
; X64:    movq xmm1, rax
; X64:  <L0>:
; X64:    call <L0>
; X64:     R_X86_64_PLT32 fmod-0x4
; X64:    movq qword ptr [rbp - 0x10], xmm0
; X64:    movq xmm0, qword ptr [rbp - 0x8]
; X64:    movq xmm1, qword ptr [rbp - 0x10]
; X64:  <L1>:
; X64:    call <L1>
; X64:     R_X86_64_PLT32 fmod-0x4
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = frem double %0, 1.0
    %2 = frem double %0, %1
    ret double %2
}

define double @frem_f64_no_salvage_reg(double %0, double %1) {
; X64-LABEL: frem_f64_no_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movq qword ptr [rbp - 0x8], xmm0
; X64:  <L0>:
; X64:    call <L0>
; X64:     R_X86_64_PLT32 fmod-0x4
; X64:    movq qword ptr [rbp - 0x18], xmm0
; X64:    movq xmm0, qword ptr [rbp - 0x8]
; X64:    movq xmm1, qword ptr [rbp - 0x18]
; X64:  <L1>:
; X64:    call <L1>
; X64:     R_X86_64_PLT32 fmod-0x4
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %2 = frem double %0, %1
    %3 = frem double %0, %2
    ret double %3
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
