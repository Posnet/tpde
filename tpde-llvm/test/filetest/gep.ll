; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

%struct.two_ints = type { i32, i32 }
%struct.three_floats = type { float, float, float }

define ptr @gep_ptr_no_idx(ptr %0) {
; X64-LABEL: <gep_ptr_no_idx>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_no_idx>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = getelementptr inbounds ptr, ptr %0
  ret ptr %1
}

define ptr @gep_ptr_zero(ptr %0) {
; X64-LABEL: <gep_ptr_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 0
    ret ptr %1
}

define ptr @gep_ptr_zero_no_salvage(ptr %0) {
; X64-LABEL: <gep_ptr_zero_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_zero_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 0
    %2 = getelementptr inbounds ptr, ptr %0, i64 0
    ret ptr %2
}

define ptr @gep_i16_zero(ptr %0) {
; X64-LABEL: <gep_i16_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i16_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 0
    ret ptr %1
}

define ptr @gep_i16_zero_no_salvage(ptr %0) {
; X64-LABEL: <gep_i16_zero_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i16_zero_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 0
    %2 = getelementptr inbounds i16, ptr %0, i64 0
    ret ptr %2
}

define ptr @gep_sti_zero(ptr %0) {
; X64-LABEL: <gep_sti_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_sti_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 0, i32 0
    ret ptr %1
}

define ptr @gep_sti_zero_no_salvage(ptr %0) {
; X64-LABEL: <gep_sti_zero_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_sti_zero_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 0, i32 0
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i64 0, i32 0
    ret ptr %2
}



define ptr @gep_ptr_one(ptr %0) {
; X64-LABEL: <gep_ptr_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0x8]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0x8
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 1
    ret ptr %1
}

define ptr @gep_ptr_one_no_salvage(ptr %0) {
; X64-LABEL: <gep_ptr_one_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rdi + 0x8]
; X64-NEXT:    lea rdi, [rdi + 0x8]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_one_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x1, x0, #0x8
; ARM64-NEXT:    add x0, x0, #0x8
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 1
    %2 = getelementptr inbounds ptr, ptr %0, i64 1
    ret ptr %2
}

define ptr @gep_i16_one(ptr %0) {
; X64-LABEL: <gep_i16_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0x2]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i16_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 1
    ret ptr %1
}

define ptr @gep_i16_one_no_salvage(ptr %0) {
; X64-LABEL: <gep_i16_one_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rdi + 0x2]
; X64-NEXT:    lea rdi, [rdi + 0x2]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i16_one_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x1, x0, #0x2
; ARM64-NEXT:    add x0, x0, #0x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 1
    %2 = getelementptr inbounds i16, ptr %0, i64 1
    ret ptr %2
}

define ptr @gep_sti_one(ptr %0) {
; X64-LABEL: <gep_sti_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0x8]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_sti_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0x8
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 1, i32 0
    ret ptr %1
}

define ptr @gep_sti_one_no_salvage(ptr %0) {
; X64-LABEL: <gep_sti_one_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rdi + 0x8]
; X64-NEXT:    lea rdi, [rdi + 0x8]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_sti_one_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x1, x0, #0x8
; ARM64-NEXT:    add x0, x0, #0x8
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 1, i32 0
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i64 1, i32 0
    ret ptr %2
}

define ptr @gep_sti_zero_one(ptr %0) {
; X64-LABEL: <gep_sti_zero_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0x4]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_sti_zero_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0x4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 0, i32 1
    ret ptr %1
}

define ptr @gep_sti_zero_one_no_salvage(ptr %0) {
; X64-LABEL: <gep_sti_zero_one_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rdi + 0x4]
; X64-NEXT:    lea rdi, [rdi + 0x4]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_sti_zero_one_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x1, x0, #0x4
; ARM64-NEXT:    add x0, x0, #0x4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 0, i32 1
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i64 0, i32 1
    ret ptr %2
}

define ptr @gep_sti_one_one(ptr %0) {
; X64-LABEL: <gep_sti_one_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0xc]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_sti_one_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0xc
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 1, i32 1
    ret ptr %1
}

define ptr @gep_sti_one_one_no_salvage(ptr %0) {
; X64-LABEL: <gep_sti_one_one_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rdi + 0xc]
; X64-NEXT:    lea rdi, [rdi + 0xc]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_sti_one_one_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x1, x0, #0xc
; ARM64-NEXT:    add x0, x0, #0xc
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 1, i32 1
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i64 1, i32 1
    ret ptr %2
}



define ptr @gep_ptr_neg_one(ptr %0) {
; X64-LABEL: <gep_ptr_neg_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi - 0x8]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_neg_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub x0, x0, #0x8
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 -1
    ret ptr %1
}

define ptr @gep_ptr_neg_one_no_salvage(ptr %0) {
; X64-LABEL: <gep_ptr_neg_one_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rdi - 0x8]
; X64-NEXT:    lea rdi, [rdi - 0x8]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_neg_one_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub x1, x0, #0x8
; ARM64-NEXT:    sub x0, x0, #0x8
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 -1
    %2 = getelementptr inbounds ptr, ptr %0, i64 -1
    ret ptr %2
}

define ptr @gep_i16_neg_one(ptr %0) {
; X64-LABEL: <gep_i16_neg_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi - 0x2]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i16_neg_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub x0, x0, #0x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 -1
    ret ptr %1
}

define ptr @gep_i16_neg_one_no_salvage(ptr %0) {
; X64-LABEL: <gep_i16_neg_one_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rdi - 0x2]
; X64-NEXT:    lea rdi, [rdi - 0x2]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i16_neg_one_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub x1, x0, #0x2
; ARM64-NEXT:    sub x0, x0, #0x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 -1
    %2 = getelementptr inbounds i16, ptr %0, i64 -1
    ret ptr %2
}

define ptr @gep_sti_neg_one(ptr %0) {
; X64-LABEL: <gep_sti_neg_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi - 0x8]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_sti_neg_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub x0, x0, #0x8
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 -1, i32 0
    ret ptr %1
}

define ptr @gep_sti_neg_one_no_salvage(ptr %0) {
; X64-LABEL: <gep_sti_neg_one_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rdi - 0x8]
; X64-NEXT:    lea rdi, [rdi - 0x8]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_sti_neg_one_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub x1, x0, #0x8
; ARM64-NEXT:    sub x0, x0, #0x8
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 -1, i32 0
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i64 -1, i32 0
    ret ptr %2
}

define ptr @gep_sti_neg_one_one(ptr %0) {
; X64-LABEL: <gep_sti_neg_one_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi - 0x4]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_sti_neg_one_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub x0, x0, #0x4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 -1, i32 1
    ret ptr %1
}

define ptr @gep_sti_neg_one_one_no_salvage(ptr %0) {
; X64-LABEL: <gep_sti_neg_one_one_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rdi - 0x4]
; X64-NEXT:    lea rdi, [rdi - 0x4]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_sti_neg_one_one_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub x1, x0, #0x4
; ARM64-NEXT:    sub x0, x0, #0x4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 -1, i32 1
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i64 -1, i32 1
    ret ptr %2
}



define ptr @gep_i16_ffff(ptr %0) {
; X64-LABEL: <gep_i16_ffff>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0x1fffe]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i16_ffff>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x0, x0
; ARM64-NEXT:    mov x1, #0x1fffe // =131070
; ARM64-NEXT:    add x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 u0xffff
    ret ptr %1
}

define ptr @gep_i16_ffff_no_salvage(ptr %0) {
; X64-LABEL: <gep_i16_ffff_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rdi + 0x1fffe]
; X64-NEXT:    lea rdi, [rdi + 0x1fffe]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i16_ffff_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x1, x0
; ARM64-NEXT:    mov x2, #0x1fffe // =131070
; ARM64-NEXT:    add x1, x1, x2
; ARM64-NEXT:    mov x0, x0
; ARM64-NEXT:    mov x1, #0x1fffe // =131070
; ARM64-NEXT:    add x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 u0xffff
    %2 = getelementptr inbounds i16, ptr %0, i64 u0xffff
    ret ptr %2
}



define ptr @gep_i8_varoff_i32(ptr %0, i32 %1) {
; X64-LABEL: <gep_i8_varoff_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsxd rsi, esi
; X64-NEXT:    lea rdi, [rdi + rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i8_varoff_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtw x1, w1
; ARM64-NEXT:    add x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i8, ptr %0, i32 %1
    ret ptr %2
}

define ptr @gep_i8_varoff_i32_no_salvage(ptr %0, i32 %1) {
; X64-LABEL: <gep_i8_varoff_i32_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsxd rax, esi
; X64-NEXT:    lea rax, [rdi + rax]
; X64-NEXT:    movsxd rsi, esi
; X64-NEXT:    lea rdi, [rdi + rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i8_varoff_i32_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtw x2, w1
; ARM64-NEXT:    add x2, x0, x2
; ARM64-NEXT:    sxtw x1, w1
; ARM64-NEXT:    add x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i8, ptr %0, i32 %1
    %3 = getelementptr inbounds i8, ptr %0, i32 %1
    ret ptr %3
}

define ptr @gep_i16_varoff_i32(ptr %0, i32 %1) {
; X64-LABEL: <gep_i16_varoff_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsxd rsi, esi
; X64-NEXT:    lea rdi, [rdi + 2*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i16_varoff_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtw x1, w1
; ARM64-NEXT:    add x0, x0, x1, lsl #1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i16, ptr %0, i32 %1
    ret ptr %2
}

define ptr @gep_i16_varoff_i32_no_salvage(ptr %0, i32 %1) {
; X64-LABEL: <gep_i16_varoff_i32_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsxd rax, esi
; X64-NEXT:    lea rax, [rdi + 2*rax]
; X64-NEXT:    movsxd rsi, esi
; X64-NEXT:    lea rdi, [rdi + 2*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i16_varoff_i32_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtw x2, w1
; ARM64-NEXT:    add x2, x0, x2, lsl #1
; ARM64-NEXT:    sxtw x1, w1
; ARM64-NEXT:    add x0, x0, x1, lsl #1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i16, ptr %0, i32 %1
    %3 = getelementptr inbounds i16, ptr %0, i32 %1
    ret ptr %3
}

define ptr @gep_i32_varoff_i32(ptr %0, i32 %1) {
; X64-LABEL: <gep_i32_varoff_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsxd rsi, esi
; X64-NEXT:    lea rdi, [rdi + 4*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i32_varoff_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtw x1, w1
; ARM64-NEXT:    add x0, x0, x1, lsl #2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i32, ptr %0, i32 %1
    ret ptr %2
}

define ptr @gep_i64_varoff_i32(ptr %0, i32 %1) {
; X64-LABEL: <gep_i64_varoff_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsxd rsi, esi
; X64-NEXT:    lea rdi, [rdi + 8*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i64_varoff_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtw x1, w1
; ARM64-NEXT:    add x0, x0, x1, lsl #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i64, ptr %0, i32 %1
    ret ptr %2
}

define ptr @gep_sti_varoff_i32_zero(ptr %0, i32 %1) {
; X64-LABEL: <gep_sti_varoff_i32_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsxd rsi, esi
; X64-NEXT:    lea rdi, [rdi + 8*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_sti_varoff_i32_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtw x1, w1
; ARM64-NEXT:    add x0, x0, x1, lsl #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i32 %1
    ret ptr %2
}

define ptr @gep_i128_varoff_i32(ptr %0, i32 %1) {
; X64-LABEL: <gep_i128_varoff_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsxd rsi, esi
; X64-NEXT:    shl rsi, 0x4
; X64-NEXT:    lea rdi, [rdi + rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i128_varoff_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtw x1, w1
; ARM64-NEXT:    add x0, x0, x1, lsl #4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i128, ptr %0, i32 %1
    ret ptr %2
}



define ptr @gep_i8_varoff_i64(ptr %0, i64 %1) {
; X64-LABEL: <gep_i8_varoff_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i8_varoff_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i8, ptr %0, i64 %1
    ret ptr %2
}

define ptr @gep_i8_varoff_i64_no_salvage(ptr %0, i64 %1) {
; X64-LABEL: <gep_i8_varoff_i64_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rdi + rsi]
; X64-NEXT:    lea rdi, [rdi + rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i8_varoff_i64_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x2, x0, x1
; ARM64-NEXT:    add x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i8, ptr %0, i64 %1
    %3 = getelementptr inbounds i8, ptr %0, i64 %1
    ret ptr %3
}

define ptr @gep_i64_varoff_i64(ptr %0, i64 %1) {
; X64-LABEL: <gep_i64_varoff_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 8*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i64_varoff_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, x1, lsl #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i64, ptr %0, i64 %1
    ret ptr %2
}

define ptr @gep_i64_varoff_i64_no_salvage(ptr %0, i64 %1) {
; X64-LABEL: <gep_i64_varoff_i64_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rdi + 8*rsi]
; X64-NEXT:    lea rdi, [rdi + 8*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i64_varoff_i64_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x2, x0, x1, lsl #3
; ARM64-NEXT:    add x0, x0, x1, lsl #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i64, ptr %0, i64 %1
    %3 = getelementptr inbounds i64, ptr %0, i64 %1
    ret ptr %3
}

define ptr @gep_sti_varoff_i64_zero(ptr %0, i64 %1) {
; X64-LABEL: <gep_sti_varoff_i64_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 8*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_sti_varoff_i64_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, x1, lsl #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i64 %1
    ret ptr %2
}

define ptr @gep_i2048_varoff_i64(ptr %0, i64 %1) {
; X64-LABEL: <gep_i2048_varoff_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    shl rax, 0x8
; X64-NEXT:    lea rdi, [rdi + rax]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i2048_varoff_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, x1, lsl #8
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i2048, ptr %0, i64 %1
    ret ptr %2
}


define ptr @gep_i8_varoff_i8(ptr %0, i8 %1) {
; X64-LABEL: <gep_i8_varoff_i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rsi, sil
; X64-NEXT:    lea rdi, [rdi + rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i8_varoff_i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb x1, w1
; ARM64-NEXT:    add x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i8, ptr %0, i8 %1
    ret ptr %2
}

define ptr @gep_i8_varoff_i8_no_salvage(ptr %0, i8 %1) {
; X64-LABEL: <gep_i8_varoff_i8_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rax, sil
; X64-NEXT:    lea rax, [rdi + rax]
; X64-NEXT:    movsx rsi, sil
; X64-NEXT:    lea rdi, [rdi + rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i8_varoff_i8_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb x2, w1
; ARM64-NEXT:    add x2, x0, x2
; ARM64-NEXT:    sxtb x1, w1
; ARM64-NEXT:    add x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i8, ptr %0, i8 %1
    %3 = getelementptr inbounds i8, ptr %0, i8 %1
    ret ptr %3
}

define ptr @gep_i32_varoff_i8(ptr %0, i8 %1) {
; X64-LABEL: <gep_i32_varoff_i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rsi, sil
; X64-NEXT:    lea rdi, [rdi + 4*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i32_varoff_i8>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb x1, w1
; ARM64-NEXT:    add x0, x0, x1, lsl #2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i32, ptr %0, i8 %1
    ret ptr %2
}

define ptr @gep_stf_varoff_i8_zero(ptr %0, i8 %1) {
; X64-LABEL: <gep_stf_varoff_i8_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rsi, sil
; X64-NEXT:    imul rsi, rsi, 0xc
; X64-NEXT:    lea rdi, [rdi + rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_varoff_i8_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb x1, w1
; ARM64-NEXT:    mov x2, #0xc // =12
; ARM64-NEXT:    mul x2, x1, x2
; ARM64-NEXT:    add x0, x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i8 %1
    ret ptr %2
}

define ptr @gep_i8_varoff_i16(ptr %0, i16 %1) {
; X64-LABEL: <gep_i8_varoff_i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rsi, si
; X64-NEXT:    lea rdi, [rdi + rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i8_varoff_i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth x1, w1
; ARM64-NEXT:    add x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i8, ptr %0, i16 %1
    ret ptr %2
}

define ptr @gep_i32_varoff_i16(ptr %0, i16 %1) {
; X64-LABEL: <gep_i32_varoff_i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rsi, si
; X64-NEXT:    lea rdi, [rdi + 4*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i32_varoff_i16>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth x1, w1
; ARM64-NEXT:    add x0, x0, x1, lsl #2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i32, ptr %0, i16 %1
    ret ptr %2
}

define ptr @gep_stf_varoff_i16_zero(ptr %0, i16 %1) {
; X64-LABEL: <gep_stf_varoff_i16_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rsi, si
; X64-NEXT:    imul rsi, rsi, 0xc
; X64-NEXT:    lea rdi, [rdi + rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_varoff_i16_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth x1, w1
; ARM64-NEXT:    mov x2, #0xc // =12
; ARM64-NEXT:    mul x2, x1, x2
; ARM64-NEXT:    add x0, x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i16 %1
    ret ptr %2
}

define ptr @gep_i512_varoff_i32(ptr %0, i32 %1) {
; X64-LABEL: <gep_i512_varoff_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsxd rsi, esi
; X64-NEXT:    shl rsi, 0x6
; X64-NEXT:    lea rdi, [rdi + rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_i512_varoff_i32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtw x1, w1
; ARM64-NEXT:    add x0, x0, x1, lsl #6
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds i512, ptr %0, i32 %1
    ret ptr %2
}

define ptr @gep_stf_varoff_i32_zero(ptr %0, i32 %1) {
; X64-LABEL: <gep_stf_varoff_i32_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsxd rsi, esi
; X64-NEXT:    imul rsi, rsi, 0xc
; X64-NEXT:    lea rdi, [rdi + rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_varoff_i32_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtw x1, w1
; ARM64-NEXT:    mov x2, #0xc // =12
; ARM64-NEXT:    mul x2, x1, x2
; ARM64-NEXT:    add x0, x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i32 %1
    ret ptr %2
}

define ptr @gep_stf_varoff_i64_zero(ptr %0, i64 %1) {
; X64-LABEL: <gep_stf_varoff_i64_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    imul rax, rsi, 0xc
; X64-NEXT:    lea rdi, [rdi + rax]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_varoff_i64_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x2, #0xc // =12
; ARM64-NEXT:    mul x2, x1, x2
; ARM64-NEXT:    add x0, x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i64 %1
    ret ptr %2
}


define ptr @gep_stf_varoff_i8_one(ptr %0, i8 %1) {
; X64-LABEL: <gep_stf_varoff_i8_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rsi, sil
; X64-NEXT:    imul rsi, rsi, 0xc
; X64-NEXT:    lea rdi, [rdi + rsi + 0x4]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_varoff_i8_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb x1, w1
; ARM64-NEXT:    mov x2, #0xc // =12
; ARM64-NEXT:    mul x2, x1, x2
; ARM64-NEXT:    add x0, x0, x2
; ARM64-NEXT:    add x0, x0, #0x4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i8 %1, i32 1
    ret ptr %2
}

define ptr @gep_stf_varoff_i16_one(ptr %0, i16 %1) {
; X64-LABEL: <gep_stf_varoff_i16_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsx rsi, si
; X64-NEXT:    imul rsi, rsi, 0xc
; X64-NEXT:    lea rdi, [rdi + rsi + 0x4]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_varoff_i16_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth x1, w1
; ARM64-NEXT:    mov x2, #0xc // =12
; ARM64-NEXT:    mul x2, x1, x2
; ARM64-NEXT:    add x0, x0, x2
; ARM64-NEXT:    add x0, x0, #0x4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i16 %1, i32 1
    ret ptr %2
}

define ptr @gep_stf_varoff_i32_one(ptr %0, i32 %1) {
; X64-LABEL: <gep_stf_varoff_i32_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movsxd rsi, esi
; X64-NEXT:    imul rsi, rsi, 0xc
; X64-NEXT:    lea rdi, [rdi + rsi + 0x4]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_varoff_i32_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtw x1, w1
; ARM64-NEXT:    mov x2, #0xc // =12
; ARM64-NEXT:    mul x2, x1, x2
; ARM64-NEXT:    add x0, x0, x2
; ARM64-NEXT:    add x0, x0, #0x4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i32 %1, i32 1
    ret ptr %2
}

define ptr @gep_stf_varoff_i64_one(ptr %0, i64 %1) {
; X64-LABEL: <gep_stf_varoff_i64_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    imul rax, rsi, 0xc
; X64-NEXT:    lea rdi, [rdi + rax + 0x4]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_varoff_i64_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x2, #0xc // =12
; ARM64-NEXT:    mul x2, x1, x2
; ARM64-NEXT:    add x0, x0, x2
; ARM64-NEXT:    add x0, x0, #0x4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i64 %1, i32 1
    ret ptr %2
}


define ptr @gep_ptr_no_idx_fuse_zero(ptr %0) {
; X64-LABEL: <gep_ptr_no_idx_fuse_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_no_idx_fuse_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = getelementptr inbounds ptr, ptr %0
  %2 = getelementptr inbounds ptr, ptr %1, i64 0
  ret ptr %2
}

define ptr @gep_ptr_zero_fuse_no_idx(ptr %0) {
; X64-LABEL: <gep_ptr_zero_fuse_no_idx>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_zero_fuse_no_idx>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %1 = getelementptr inbounds ptr, ptr %0, i64 0
  %2 = getelementptr inbounds ptr, ptr %1
  ret ptr %2
}

define ptr @gep_ptr_zero_fuse_zero(ptr %0) {
; X64-LABEL: <gep_ptr_zero_fuse_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_zero_fuse_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 0
    %2 = getelementptr inbounds ptr, ptr %1, i64 0
    ret ptr %2
}

define ptr @gep_ptr_one_fuse_zero(ptr %0) {
; X64-LABEL: <gep_ptr_one_fuse_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0x8]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_one_fuse_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0x8
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 1
    %2 = getelementptr inbounds ptr, ptr %1, i64 0
    ret ptr %2
}

define ptr @gep_ptr_zero_fuse_one(ptr %0) {
; X64-LABEL: <gep_ptr_zero_fuse_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0x8]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_zero_fuse_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0x8
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 0
    %2 = getelementptr inbounds ptr, ptr %1, i64 1
    ret ptr %2
}


define ptr @gep_stf_zero_fuse_zero(ptr %0) {
; X64-LABEL: <gep_stf_zero_fuse_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_zero_fuse_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 0
    %2 = getelementptr inbounds %struct.three_floats, ptr %1, i64 0
    ret ptr %2
}

define ptr @gep_stf_one_fuse_zero(ptr %0) {
; X64-LABEL: <gep_stf_one_fuse_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0xc]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_one_fuse_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0xc
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1
    %2 = getelementptr inbounds %struct.three_floats, ptr %1, i64 0
    ret ptr %2
}

define ptr @gep_stf_zero_fuse_one(ptr %0) {
; X64-LABEL: <gep_stf_zero_fuse_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0xc]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_zero_fuse_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0xc
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 0
    %2 = getelementptr inbounds %struct.three_floats, ptr %1, i64 1
    ret ptr %2
}

define ptr @gep_stf_one_zero_fuse_zero(ptr %0) {
; X64-LABEL: <gep_stf_one_zero_fuse_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0xc]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_one_zero_fuse_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0xc
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 0
    %2 = getelementptr inbounds float, ptr %1, i64 0
    ret ptr %2
}

define ptr @gep_stf_one_zero_fuse_one(ptr %0) {
; X64-LABEL: <gep_stf_one_zero_fuse_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0x10]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_one_zero_fuse_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0x10
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 0
    %2 = getelementptr inbounds float, ptr %1, i64 1
    ret ptr %2
}

define ptr @gep_stf_one_zero_fuse_one_no_salvage(ptr %0) {
; X64-LABEL: <gep_stf_one_zero_fuse_one_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rdi + 0x10]
; X64-NEXT:    lea rdi, [rdi + 0x10]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_one_zero_fuse_one_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x1, x0, #0x10
; ARM64-NEXT:    add x0, x0, #0x10
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 0
    %2 = getelementptr inbounds float, ptr %1, i64 1
    %3 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 0
    %4 = getelementptr inbounds float, ptr %3, i64 1
    ret ptr %4
}

define ptr @gep_stf_one_one_fuse_zero(ptr %0) {
; X64-LABEL: <gep_stf_one_one_fuse_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0x10]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_one_one_fuse_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0x10
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 1
    %2 = getelementptr inbounds float, ptr %1, i64 0
    ret ptr %2
}

define ptr @gep_stf_one_one_fuse_one(ptr %0) {
; X64-LABEL: <gep_stf_one_one_fuse_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0x14]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_one_one_fuse_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0x14
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 1
    %2 = getelementptr inbounds float, ptr %1, i64 1
    ret ptr %2
}

define ptr @gep_stf_one_one_fuse_one_no_salvage(ptr %0) {
; X64-LABEL: <gep_stf_one_one_fuse_one_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rax, [rdi + 0x14]
; X64-NEXT:    lea rdi, [rdi + 0x10]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_one_one_fuse_one_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x1, x0, #0x14
; ARM64-NEXT:    add x0, x0, #0x10
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 1
    %2 = getelementptr inbounds float, ptr %1, i64 1
    %3 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 0
    %4 = getelementptr inbounds float, ptr %3, i64 1
    ret ptr %4
}

define ptr @gep_fuse_diff_type_1(ptr %p, i64 %n) {
; X64-LABEL: <gep_fuse_diff_type_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 8*rsi + 0xc]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_fuse_diff_type_1>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, x1, lsl #3
; ARM64-NEXT:    add x0, x0, #0xc
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %gep1 = getelementptr inbounds i8, ptr %p, i64 12
  %gep2 = getelementptr inbounds [2 x i32], ptr %gep1, i64 %n
  ret ptr %gep2
}

define ptr @gep_fuse_diff_type_2(ptr %p, i64 %n) {
; X64-LABEL: <gep_fuse_diff_type_2>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    imul rax, rsi, 0xc
; X64-NEXT:    lea rdi, [rdi + rax + 0xc]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_fuse_diff_type_2>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x2, #0xc // =12
; ARM64-NEXT:    mul x2, x1, x2
; ARM64-NEXT:    add x0, x0, x2
; ARM64-NEXT:    add x0, x0, #0xc
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %gep1 = getelementptr inbounds i8, ptr %p, i64 12
  %gep2 = getelementptr inbounds [3 x i32], ptr %gep1, i64 %n
  ret ptr %gep2
}



define ptr @gep_ptr_varoff_fuse_zero(ptr %0, i64 %1) {
; X64-LABEL: <gep_ptr_varoff_fuse_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 8*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_varoff_fuse_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, x1, lsl #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds ptr, ptr %0, i64 %1
    %3 = getelementptr inbounds ptr, ptr %2, i64 0
    ret ptr %3
}

define ptr @gep_ptr_varoff_fuse_one(ptr %0, i64 %1) {
; X64-LABEL: <gep_ptr_varoff_fuse_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 8*rsi + 0x8]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_varoff_fuse_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, x1, lsl #3
; ARM64-NEXT:    add x0, x0, #0x8
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds ptr, ptr %0, i64 %1
    %3 = getelementptr inbounds ptr, ptr %2, i64 1
    ret ptr %3
}

define ptr @gep_stf_varoff_fuse_zero(ptr %0, i64 %1) {
; X64-LABEL: <gep_stf_varoff_fuse_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    imul rax, rsi, 0xc
; X64-NEXT:    lea rdi, [rdi + rax]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_varoff_fuse_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x2, #0xc // =12
; ARM64-NEXT:    mul x2, x1, x2
; ARM64-NEXT:    add x0, x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i64 %1
    %3 = getelementptr inbounds %struct.three_floats, ptr %2, i64 0
    ret ptr %3
}

define ptr @gep_stf_varoff_zero_fuse_zero(ptr %0, i64 %1) {
; X64-LABEL: <gep_stf_varoff_zero_fuse_zero>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    imul rax, rsi, 0xc
; X64-NEXT:    lea rdi, [rdi + rax]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_varoff_zero_fuse_zero>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x2, #0xc // =12
; ARM64-NEXT:    mul x2, x1, x2
; ARM64-NEXT:    add x0, x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i64 %1, i32 0
    %3 = getelementptr inbounds float, ptr %2, i64 0
    ret ptr %3
}

define ptr @gep_stf_varoff_zero_fuse_one(ptr %0, i64 %1) {
; X64-LABEL: <gep_stf_varoff_zero_fuse_one>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    imul rax, rsi, 0xc
; X64-NEXT:    lea rdi, [rdi + rax + 0x4]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_varoff_zero_fuse_one>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x2, #0xc // =12
; ARM64-NEXT:    mul x2, x1, x2
; ARM64-NEXT:    add x0, x0, x2
; ARM64-NEXT:    add x0, x0, #0x4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i64 %1, i32 0
    %3 = getelementptr inbounds float, ptr %2, i64 1
    ret ptr %3
}

define ptr @gep_stf_varoff_zero_fuse_one_no_salvage(ptr %0, i64 %1) {
; X64-LABEL: <gep_stf_varoff_zero_fuse_one_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    imul rax, rsi, 0xc
; X64-NEXT:    lea rax, [rdi + rax + 0x4]
; X64-NEXT:    imul rax, rsi, 0xc
; X64-NEXT:    lea rdi, [rdi + rax + 0x4]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_stf_varoff_zero_fuse_one_no_salvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, #0xc // =12
; ARM64-NEXT:    mul x3, x1, x3
; ARM64-NEXT:    add x2, x0, x3
; ARM64-NEXT:    add x2, x2, #0x4
; ARM64-NEXT:    mov x2, #0xc // =12
; ARM64-NEXT:    mul x2, x1, x2
; ARM64-NEXT:    add x0, x0, x2
; ARM64-NEXT:    add x0, x0, #0x4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i64 %1, i32 0
    %3 = getelementptr inbounds float, ptr %2, i64 1
    %4 = getelementptr inbounds %struct.three_floats, ptr %0, i64 %1, i32 0
    %5 = getelementptr inbounds float, ptr %4, i64 1
    ret ptr %5
}


; COM: zero-sized datatypes

define ptr @gep_zai32_zero_zero_i64(ptr %0) {
; X64-LABEL: <gep_zai32_zero_zero_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_zai32_zero_zero_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds [0 x i32], ptr %0, i64 0, i32 0
    ret ptr %1
}

define ptr @gep_zai32_zero_one_i64(ptr %0) {
; X64-LABEL: <gep_zai32_zero_one_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0x4]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_zai32_zero_one_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0x4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds [0 x i32], ptr %0, i64 0, i32 1
    ret ptr %1
}

define ptr @gep_zai32_one_zero_i64(ptr %0) {
; X64-LABEL: <gep_zai32_one_zero_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_zai32_one_zero_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds [0 x i32], ptr %0, i64 1, i32 0
    ret ptr %1
}

define ptr @gep_zai32_one_one_i64(ptr %0) {
; X64-LABEL: <gep_zai32_one_one_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0x4]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_zai32_one_one_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0x4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %1 = getelementptr inbounds [0 x i32], ptr %0, i64 1, i32 1
    ret ptr %1
}

define ptr @gep_zai32_varoff_zero_i64(ptr %0, i64 %1) {
; X64-LABEL: <gep_zai32_varoff_zero_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_zai32_varoff_zero_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds [0 x i32], ptr %0, i64 %1, i32 0
    ret ptr %2
}

define ptr @gep_zai32_varoff_one_i64(ptr %0, i64 %1) {
; X64-LABEL: <gep_zai32_varoff_one_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, [rdi + 0x4]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_zai32_varoff_one_i64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x0, #0x4
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  entry:
    %2 = getelementptr inbounds [0 x i32], ptr %0, i64 %1, i32 1
    ret ptr %2
}

define dso_local ptr @gep_array(ptr noundef %0) #0 {
; X64-LABEL: <gep_array>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x100
; X64-NEXT:    lea rax, [rbp - 0x100]
; X64-NEXT:    mov rcx, rax
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    add rsp, 0x100
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_array>:
; ARM64:         sub sp, sp, #0x180
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    add x0, x29, #0xb0
; ARM64-NEXT:    mov x1, x0
; ARM64-NEXT:    mov x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0x180
; ARM64-NEXT:    ret
  %dummy = alloca i64, align 8
  %array = alloca [201 x i8], align 1
  %gep = getelementptr inbounds [201 x i8], ptr %array, i64 0, i64 0
  ret ptr %gep
}


define ptr @gep_ptr_i21(ptr %0, i21 %1) {
; X64-LABEL: <gep_ptr_i21>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    shl rsi, 0x2b
; X64-NEXT:    sar rsi, 0x2b
; X64-NEXT:    lea rdi, [rdi + 8*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_i21>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x1, x1, #0, #21
; ARM64-NEXT:    add x0, x0, x1, lsl #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = getelementptr inbounds ptr, ptr %0, i21 %1
  ret ptr %2
}

define ptr @gep_ptr_i37(ptr %0, i37 %1) {
; X64-LABEL: <gep_ptr_i37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    shl rsi, 0x1b
; X64-NEXT:    sar rsi, 0x1b
; X64-NEXT:    lea rdi, [rdi + 8*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_i37>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x1, x1, #0, #37
; ARM64-NEXT:    add x0, x0, x1, lsl #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = getelementptr inbounds ptr, ptr %0, i37 %1
  ret ptr %2
}

define ptr @gep_ptr_i21_nosalvage(ptr %0, i21 %1) {
; X64-LABEL: <gep_ptr_i21_nosalvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    shl rax, 0x2b
; X64-NEXT:    sar rax, 0x2b
; X64-NEXT:    lea rax, [rdi + 8*rax]
; X64-NEXT:    shl rsi, 0x2b
; X64-NEXT:    sar rsi, 0x2b
; X64-NEXT:    lea rdi, [rdi + 8*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_i21_nosalvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x2, x1, #0, #21
; ARM64-NEXT:    add x2, x0, x2, lsl #3
; ARM64-NEXT:    sbfx x1, x1, #0, #21
; ARM64-NEXT:    add x0, x0, x1, lsl #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = getelementptr inbounds ptr, ptr %0, i21 %1
  %3 = getelementptr inbounds ptr, ptr %0, i21 %1
  ret ptr %3
}

define ptr @gep_ptr_i37_nosalvage(ptr %0, i37 %1) {
; X64-LABEL: <gep_ptr_i37_nosalvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    shl rax, 0x1b
; X64-NEXT:    sar rax, 0x1b
; X64-NEXT:    lea rax, [rdi + 8*rax]
; X64-NEXT:    shl rsi, 0x1b
; X64-NEXT:    sar rsi, 0x1b
; X64-NEXT:    lea rdi, [rdi + 8*rsi]
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <gep_ptr_i37_nosalvage>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x2, x1, #0, #37
; ARM64-NEXT:    add x2, x0, x2, lsl #3
; ARM64-NEXT:    sbfx x1, x1, #0, #37
; ARM64-NEXT:    add x0, x0, x1, lsl #3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
entry:
  %2 = getelementptr inbounds ptr, ptr %0, i37 %1
  %3 = getelementptr inbounds ptr, ptr %0, i37 %1
  ret ptr %3
}


