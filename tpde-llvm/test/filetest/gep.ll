; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always

%struct.two_ints = type { i32, i32 }
%struct.three_floats = type { float, float, float }


define ptr @gep_ptr_zero(ptr %0) {
; X64-LABEL: gep_ptr_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 0
    ret ptr %1
}

define ptr @gep_ptr_zero_no_salvage(ptr %0) {
; X64-LABEL: gep_ptr_zero_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 0
    %2 = getelementptr inbounds ptr, ptr %0, i64 0
    ret ptr %2
}

define ptr @gep_i16_zero(ptr %0) {
; X64-LABEL: gep_i16_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 0
    ret ptr %1
}

define ptr @gep_i16_zero_no_salvage(ptr %0) {
; X64-LABEL: gep_i16_zero_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 0
    %2 = getelementptr inbounds i16, ptr %0, i64 0
    ret ptr %2
}

define ptr @gep_sti_zero(ptr %0) {
; X64-LABEL: gep_sti_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 0, i32 0
    ret ptr %1
}

define ptr @gep_sti_zero_no_salvage(ptr %0) {
; X64-LABEL: gep_sti_zero_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 0, i32 0
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i64 0, i32 0
    ret ptr %2
}



define ptr @gep_ptr_one(ptr %0) {
; X64-LABEL: gep_ptr_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0x8]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 1
    ret ptr %1
}

define ptr @gep_ptr_one_no_salvage(ptr %0) {
; X64-LABEL: gep_ptr_one_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rax, [rdi + 0x8]
; X64:    lea rdi, [rdi + 0x8]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 1
    %2 = getelementptr inbounds ptr, ptr %0, i64 1
    ret ptr %2
}

define ptr @gep_i16_one(ptr %0) {
; X64-LABEL: gep_i16_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0x2]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 1
    ret ptr %1
}

define ptr @gep_i16_one_no_salvage(ptr %0) {
; X64-LABEL: gep_i16_one_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rax, [rdi + 0x2]
; X64:    lea rdi, [rdi + 0x2]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 1
    %2 = getelementptr inbounds i16, ptr %0, i64 1
    ret ptr %2
}

define ptr @gep_sti_one(ptr %0) {
; X64-LABEL: gep_sti_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0x8]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 1, i32 0
    ret ptr %1
}

define ptr @gep_sti_one_no_salvage(ptr %0) {
; X64-LABEL: gep_sti_one_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rax, [rdi + 0x8]
; X64:    lea rdi, [rdi + 0x8]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 1, i32 0
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i64 1, i32 0
    ret ptr %2
}

define ptr @gep_sti_zero_one(ptr %0) {
; X64-LABEL: gep_sti_zero_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 0, i32 1
    ret ptr %1
}

define ptr @gep_sti_zero_one_no_salvage(ptr %0) {
; X64-LABEL: gep_sti_zero_one_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rax, [rdi + 0x4]
; X64:    lea rdi, [rdi + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 0, i32 1
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i64 0, i32 1
    ret ptr %2
}

define ptr @gep_sti_one_one(ptr %0) {
; X64-LABEL: gep_sti_one_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0xc]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 1, i32 1
    ret ptr %1
}

define ptr @gep_sti_one_one_no_salvage(ptr %0) {
; X64-LABEL: gep_sti_one_one_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rax, [rdi + 0xc]
; X64:    lea rdi, [rdi + 0xc]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 1, i32 1
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i64 1, i32 1
    ret ptr %2
}



define ptr @gep_ptr_neg_one(ptr %0) {
; X64-LABEL: gep_ptr_neg_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi - 0x8]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 -1
    ret ptr %1
}

define ptr @gep_ptr_neg_one_no_salvage(ptr %0) {
; X64-LABEL: gep_ptr_neg_one_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rax, [rdi - 0x8]
; X64:    lea rdi, [rdi - 0x8]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 -1
    %2 = getelementptr inbounds ptr, ptr %0, i64 -1
    ret ptr %2
}

define ptr @gep_i16_neg_one(ptr %0) {
; X64-LABEL: gep_i16_neg_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi - 0x2]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 -1
    ret ptr %1
}

define ptr @gep_i16_neg_one_no_salvage(ptr %0) {
; X64-LABEL: gep_i16_neg_one_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rax, [rdi - 0x2]
; X64:    lea rdi, [rdi - 0x2]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 -1
    %2 = getelementptr inbounds i16, ptr %0, i64 -1
    ret ptr %2
}

define ptr @gep_sti_neg_one(ptr %0) {
; X64-LABEL: gep_sti_neg_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi - 0x8]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 -1, i32 0
    ret ptr %1
}

define ptr @gep_sti_neg_one_no_salvage(ptr %0) {
; X64-LABEL: gep_sti_neg_one_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rax, [rdi - 0x8]
; X64:    lea rdi, [rdi - 0x8]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 -1, i32 0
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i64 -1, i32 0
    ret ptr %2
}

define ptr @gep_sti_neg_one_one(ptr %0) {
; X64-LABEL: gep_sti_neg_one_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi - 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 -1, i32 1
    ret ptr %1
}

define ptr @gep_sti_neg_one_one_no_salvage(ptr %0) {
; X64-LABEL: gep_sti_neg_one_one_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rax, [rdi - 0x4]
; X64:    lea rdi, [rdi - 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.two_ints, ptr %0, i64 -1, i32 1
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i64 -1, i32 1
    ret ptr %2
}



define ptr @gep_i16_ffff(ptr %0) {
; X64-LABEL: gep_i16_ffff>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0x1fffe]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 u0xffff
    ret ptr %1
}

define ptr @gep_i16_ffff_no_salvage(ptr %0) {
; X64-LABEL: gep_i16_ffff_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rax, [rdi + 0x1fffe]
; X64:    lea rdi, [rdi + 0x1fffe]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds i16, ptr %0, i64 u0xffff
    %2 = getelementptr inbounds i16, ptr %0, i64 u0xffff
    ret ptr %2
}



define ptr @gep_i8_varoff_i32(ptr %0, i32 %1) {
; X64-LABEL: gep_i8_varoff_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsxd rsi, esi
; X64:    lea rdi, [rdi + rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
  entry:
    %2 = getelementptr inbounds i8, ptr %0, i32 %1
    ret ptr %2
}

define ptr @gep_i8_varoff_i32_no_salvage(ptr %0, i32 %1) {
; X64-LABEL: gep_i8_varoff_i32_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsxd rax, esi
; X64:    lea rcx, [rdi + rax]
; X64:    movsxd rsi, esi
; X64:    lea rdi, [rdi + rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds i8, ptr %0, i32 %1
    %3 = getelementptr inbounds i8, ptr %0, i32 %1
    ret ptr %3
}

define ptr @gep_i16_varoff_i32(ptr %0, i32 %1) {
; X64-LABEL: gep_i16_varoff_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsxd rsi, esi
; X64:    lea rdi, [rdi + 2*rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
  entry:
    %2 = getelementptr inbounds i16, ptr %0, i32 %1
    ret ptr %2
}

define ptr @gep_i16_varoff_i32_no_salvage(ptr %0, i32 %1) {
; X64-LABEL: gep_i16_varoff_i32_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsxd rax, esi
; X64:    lea rcx, [rdi + 2*rax]
; X64:    movsxd rsi, esi
; X64:    lea rdi, [rdi + 2*rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds i16, ptr %0, i32 %1
    %3 = getelementptr inbounds i16, ptr %0, i32 %1
    ret ptr %3
}

define ptr @gep_i32_varoff_i32(ptr %0, i32 %1) {
; X64-LABEL: gep_i32_varoff_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsxd rsi, esi
; X64:    lea rdi, [rdi + 4*rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
  entry:
    %2 = getelementptr inbounds i32, ptr %0, i32 %1
    ret ptr %2
}

define ptr @gep_i64_varoff_i32(ptr %0, i32 %1) {
; X64-LABEL: gep_i64_varoff_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsxd rsi, esi
; X64:    lea rdi, [rdi + 8*rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
  entry:
    %2 = getelementptr inbounds i64, ptr %0, i32 %1
    ret ptr %2
}

define ptr @gep_sti_varoff_i32_zero(ptr %0, i32 %1) {
; X64-LABEL: gep_sti_varoff_i32_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsxd rsi, esi
; X64:    lea rdi, [rdi + 8*rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
  entry:
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i32 %1
    ret ptr %2
}

define ptr @gep_i128_varoff_i32(ptr %0, i32 %1) {
; X64-LABEL: gep_i128_varoff_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsxd rsi, esi
; X64:    shl rsi, 0x4
; X64:    lea rdi, [rdi + rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %2 = getelementptr inbounds i128, ptr %0, i32 %1
    ret ptr %2
}



define ptr @gep_i8_varoff_i64(ptr %0, i64 %1) {
; X64-LABEL: gep_i8_varoff_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    lea rdi, [rdi + rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds i8, ptr %0, i64 %1
    ret ptr %2
}

define ptr @gep_i8_varoff_i64_no_salvage(ptr %0, i64 %1) {
; X64-LABEL: gep_i8_varoff_i64_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    lea rax, [rdi + rsi]
; X64:    lea rdi, [rdi + rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds i8, ptr %0, i64 %1
    %3 = getelementptr inbounds i8, ptr %0, i64 %1
    ret ptr %3
}

define ptr @gep_i64_varoff_i64(ptr %0, i64 %1) {
; X64-LABEL: gep_i64_varoff_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    lea rdi, [rdi + 8*rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds i64, ptr %0, i64 %1
    ret ptr %2
}

define ptr @gep_i64_varoff_i64_no_salvage(ptr %0, i64 %1) {
; X64-LABEL: gep_i64_varoff_i64_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    lea rax, [rdi + 8*rsi]
; X64:    lea rdi, [rdi + 8*rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds i64, ptr %0, i64 %1
    %3 = getelementptr inbounds i64, ptr %0, i64 %1
    ret ptr %3
}

define ptr @gep_sti_varoff_i64_zero(ptr %0, i64 %1) {
; X64-LABEL: gep_sti_varoff_i64_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    lea rdi, [rdi + 8*rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds %struct.two_ints, ptr %0, i64 %1
    ret ptr %2
}

define ptr @gep_i2048_varoff_i64(ptr %0, i64 %1) {
; X64-LABEL: gep_i2048_varoff_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    mov rax, rsi
; X64:    shl rax, 0x8
; X64:    lea rdi, [rdi + rax]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %2 = getelementptr inbounds i2048, ptr %0, i64 %1
    ret ptr %2
}


define ptr @gep_i8_varoff_i8(ptr %0, i8 %1) {
; X64-LABEL: gep_i8_varoff_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsx rsi, sil
; X64:    lea rdi, [rdi + rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds i8, ptr %0, i8 %1
    ret ptr %2
}

define ptr @gep_i8_varoff_i8_no_salvage(ptr %0, i8 %1) {
; X64-LABEL: gep_i8_varoff_i8_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsx rax, sil
; X64:    lea rcx, [rdi + rax]
; X64:    movsx rsi, sil
; X64:    lea rdi, [rdi + rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds i8, ptr %0, i8 %1
    %3 = getelementptr inbounds i8, ptr %0, i8 %1
    ret ptr %3
}

define ptr @gep_i32_varoff_i8(ptr %0, i8 %1) {
; X64-LABEL: gep_i32_varoff_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsx rsi, sil
; X64:    lea rdi, [rdi + 4*rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds i32, ptr %0, i8 %1
    ret ptr %2
}

define ptr @gep_stf_varoff_i8_zero(ptr %0, i8 %1) {
; X64-LABEL: gep_stf_varoff_i8_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsx rsi, sil
; X64:    imul rsi, rsi, 0xc
; X64:    lea rdi, [rdi + rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i8 %1
    ret ptr %2
}

define ptr @gep_i8_varoff_i16(ptr %0, i16 %1) {
; X64-LABEL: gep_i8_varoff_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsx rsi, si
; X64:    lea rdi, [rdi + rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds i8, ptr %0, i16 %1
    ret ptr %2
}

define ptr @gep_i32_varoff_i16(ptr %0, i16 %1) {
; X64-LABEL: gep_i32_varoff_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsx rsi, si
; X64:    lea rdi, [rdi + 4*rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds i32, ptr %0, i16 %1
    ret ptr %2
}

define ptr @gep_stf_varoff_i16_zero(ptr %0, i16 %1) {
; X64-LABEL: gep_stf_varoff_i16_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsx rsi, si
; X64:    imul rsi, rsi, 0xc
; X64:    lea rdi, [rdi + rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i16 %1
    ret ptr %2
}

define ptr @gep_i512_varoff_i32(ptr %0, i32 %1) {
; X64-LABEL: gep_i512_varoff_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsxd rsi, esi
; X64:    shl rsi, 0x6
; X64:    lea rdi, [rdi + rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %2 = getelementptr inbounds i512, ptr %0, i32 %1
    ret ptr %2
}

define ptr @gep_stf_varoff_i32_zero(ptr %0, i32 %1) {
; X64-LABEL: gep_stf_varoff_i32_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsxd rsi, esi
; X64:    imul rsi, rsi, 0xc
; X64:    lea rdi, [rdi + rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i32 %1
    ret ptr %2
}

define ptr @gep_stf_varoff_i64_zero(ptr %0, i64 %1) {
; X64-LABEL: gep_stf_varoff_i64_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    imul rax, rsi, 0xc
; X64:    lea rdi, [rdi + rax]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i64 %1
    ret ptr %2
}


define ptr @gep_stf_varoff_i8_one(ptr %0, i8 %1) {
; X64-LABEL: gep_stf_varoff_i8_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsx rsi, sil
; X64:    imul rsi, rsi, 0xc
; X64:    lea rdi, [rdi + rsi + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i8 %1, i32 1
    ret ptr %2
}

define ptr @gep_stf_varoff_i16_one(ptr %0, i16 %1) {
; X64-LABEL: gep_stf_varoff_i16_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsx rsi, si
; X64:    imul rsi, rsi, 0xc
; X64:    lea rdi, [rdi + rsi + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i16 %1, i32 1
    ret ptr %2
}

define ptr @gep_stf_varoff_i32_one(ptr %0, i32 %1) {
; X64-LABEL: gep_stf_varoff_i32_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    movsxd rsi, esi
; X64:    imul rsi, rsi, 0xc
; X64:    lea rdi, [rdi + rsi + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i32 %1, i32 1
    ret ptr %2
}

define ptr @gep_stf_varoff_i64_one(ptr %0, i64 %1) {
; X64-LABEL: gep_stf_varoff_i64_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    imul rax, rsi, 0xc
; X64:    lea rdi, [rdi + rax + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i64 %1, i32 1
    ret ptr %2
}



define ptr @gep_ptr_zero_fuse_zero(ptr %0) {
; X64-LABEL: gep_ptr_zero_fuse_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 0
    %2 = getelementptr inbounds ptr, ptr %1, i64 0
    ret ptr %2
}

define ptr @gep_ptr_one_fuse_zero(ptr %0) {
; X64-LABEL: gep_ptr_one_fuse_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0x8]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 1
    %2 = getelementptr inbounds ptr, ptr %1, i64 0
    ret ptr %2
}

define ptr @gep_ptr_zero_fuse_one(ptr %0) {
; X64-LABEL: gep_ptr_zero_fuse_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0x8]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds ptr, ptr %0, i64 0
    %2 = getelementptr inbounds ptr, ptr %1, i64 1
    ret ptr %2
}


define ptr @gep_stf_zero_fuse_zero(ptr %0) {
; X64-LABEL: gep_stf_zero_fuse_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 0
    %2 = getelementptr inbounds %struct.three_floats, ptr %1, i64 0
    ret ptr %2
}

define ptr @gep_stf_one_fuse_zero(ptr %0) {
; X64-LABEL: gep_stf_one_fuse_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0xc]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1
    %2 = getelementptr inbounds %struct.three_floats, ptr %1, i64 0
    ret ptr %2
}

define ptr @gep_stf_zero_fuse_one(ptr %0) {
; X64-LABEL: gep_stf_zero_fuse_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0xc]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 0
    %2 = getelementptr inbounds %struct.three_floats, ptr %1, i64 1
    ret ptr %2
}

define ptr @gep_stf_one_zero_fuse_zero(ptr %0) {
; X64-LABEL: gep_stf_one_zero_fuse_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0xc]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 0
    %2 = getelementptr inbounds float, ptr %1, i64 0
    ret ptr %2
}

; COM: This is currently not fused
define ptr @gep_stf_one_zero_fuse_one(ptr %0) {
; X64-LABEL: gep_stf_one_zero_fuse_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0xc]
; X64:    lea rdi, [rdi + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 0
    %2 = getelementptr inbounds float, ptr %1, i64 1
    ret ptr %2
}

define ptr @gep_stf_one_zero_fuse_one_no_salvage(ptr %0) {
; X64-LABEL: gep_stf_one_zero_fuse_one_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    lea rax, [rdi + 0xc]
; X64:    lea rax, [rax + 0x4]
; X64:    lea rdi, [rdi + 0xc]
; X64:    lea rdi, [rdi + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 0
    %2 = getelementptr inbounds float, ptr %1, i64 1
    %3 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 0
    %4 = getelementptr inbounds float, ptr %3, i64 1
    ret ptr %4
}

define ptr @gep_stf_one_one_fuse_zero(ptr %0) {
; X64-LABEL: gep_stf_one_one_fuse_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0x10]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 1
    %2 = getelementptr inbounds float, ptr %1, i64 0
    ret ptr %2
}

; COM: Also not fused currently
define ptr @gep_stf_one_one_fuse_one(ptr %0) {
; X64-LABEL: gep_stf_one_one_fuse_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0x10]
; X64:    lea rdi, [rdi + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 1
    %2 = getelementptr inbounds float, ptr %1, i64 1
    ret ptr %2
}

define ptr @gep_stf_one_one_fuse_one_no_salvage(ptr %0) {
; X64-LABEL: gep_stf_one_one_fuse_one_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    lea rax, [rdi + 0x10]
; X64:    lea rax, [rax + 0x4]
; X64:    lea rdi, [rdi + 0xc]
; X64:    lea rdi, [rdi + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 1
    %2 = getelementptr inbounds float, ptr %1, i64 1
    %3 = getelementptr inbounds %struct.three_floats, ptr %0, i64 1, i32 0
    %4 = getelementptr inbounds float, ptr %3, i64 1
    ret ptr %4
}



define ptr @gep_ptr_varoff_fuse_zero(ptr %0, i64 %1) {
; X64-LABEL: gep_ptr_varoff_fuse_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    lea rdi, [rdi + 8*rsi]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds ptr, ptr %0, i64 %1
    %3 = getelementptr inbounds ptr, ptr %2, i64 0
    ret ptr %3
}

; COM: also not fused! very sad...
define ptr @gep_ptr_varoff_fuse_one(ptr %0, i64 %1) {
; X64-LABEL: gep_ptr_varoff_fuse_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    lea rdi, [rdi + 8*rsi]
; X64:    lea rdi, [rdi + 0x8]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds ptr, ptr %0, i64 %1
    %3 = getelementptr inbounds ptr, ptr %2, i64 1
    ret ptr %3
}

define ptr @gep_stf_varoff_fuse_zero(ptr %0, i64 %1) {
; X64-LABEL: gep_stf_varoff_fuse_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    imul rax, rsi, 0xc
; X64:    lea rdi, [rdi + rax]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i64 %1
    %3 = getelementptr inbounds %struct.three_floats, ptr %2, i64 0
    ret ptr %3
}

define ptr @gep_stf_varoff_zero_fuse_zero(ptr %0, i64 %1) {
; X64-LABEL: gep_stf_varoff_zero_fuse_zero>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    imul rax, rsi, 0xc
; X64:    lea rdi, [rdi + rax]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i64 %1, i32 0
    %3 = getelementptr inbounds float, ptr %2, i64 0
    ret ptr %3
}

; COM: someone should really work on this fusing stuff...
define ptr @gep_stf_varoff_zero_fuse_one(ptr %0, i64 %1) {
; X64-LABEL: gep_stf_varoff_zero_fuse_one>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    imul rax, rsi, 0xc
; X64:    lea rdi, [rdi + rax]
; X64:    lea rdi, [rdi + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i64 %1, i32 0
    %3 = getelementptr inbounds float, ptr %2, i64 1
    ret ptr %3
}

define ptr @gep_stf_varoff_zero_fuse_one_no_salvage(ptr %0, i64 %1) {
; X64-LABEL: gep_stf_varoff_zero_fuse_one_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    imul rax, rsi, 0xc
; X64:    lea rcx, [rdi + rax]
; X64:    lea rcx, [rcx + 0x4]
; X64:    imul rax, rsi, 0xc
; X64:    lea rdi, [rdi + rax]
; X64:    lea rdi, [rdi + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds %struct.three_floats, ptr %0, i64 %1, i32 0
    %3 = getelementptr inbounds float, ptr %2, i64 1
    %4 = getelementptr inbounds %struct.three_floats, ptr %0, i64 %1, i32 0
    %5 = getelementptr inbounds float, ptr %4, i64 1
    ret ptr %5
}


; COM: zero-sized datatypes

define ptr @gep_zai32_zero_zero_i64(ptr %0) {
; X64-LABEL: gep_zai32_zero_zero_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds [0 x i32], ptr %0, i64 0, i32 0
    ret ptr %1
}

define ptr @gep_zai32_zero_one_i64(ptr %0) {
; X64-LABEL: gep_zai32_zero_one_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds [0 x i32], ptr %0, i64 0, i32 1
    ret ptr %1
}

define ptr @gep_zai32_one_zero_i64(ptr %0) {
; X64-LABEL: gep_zai32_one_zero_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds [0 x i32], ptr %0, i64 1, i32 0
    ret ptr %1
}

define ptr @gep_zai32_one_one_i64(ptr %0) {
; X64-LABEL: gep_zai32_one_one_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    lea rdi, [rdi + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = getelementptr inbounds [0 x i32], ptr %0, i64 1, i32 1
    ret ptr %1
}

define ptr @gep_zai32_varoff_zero_i64(ptr %0, i64 %1) {
; X64-LABEL: gep_zai32_varoff_zero_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = getelementptr inbounds [0 x i32], ptr %0, i64 %1, i32 0
    ret ptr %2
}

define ptr @gep_zai32_varoff_one_i64(ptr %0, i64 %1) {
; X64-LABEL: gep_zai32_varoff_one_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    lea rdi, [rdi + 0x4]
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    <unknown>
  entry:
    %2 = getelementptr inbounds [0 x i32], ptr %0, i64 %1, i32 1
    ret ptr %2
}


;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
