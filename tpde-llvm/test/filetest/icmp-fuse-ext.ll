; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define i8 @icmp_fuse_zext8(i32, i32) {
; X64-LABEL: <icmp_fuse_zext8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    setl dil
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: <icmp_fuse_zext8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %c = icmp slt i32 %0, %1
  %r = zext i1 %c to i8
  ret i8 %r
}

define i32 @icmp_fuse_zext32(i32, i32) {
; X64-LABEL: <icmp_fuse_zext32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    setl dil
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: <icmp_fuse_zext32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %c = icmp slt i32 %0, %1
  %r = zext i1 %c to i32
  ret i32 %r
}

define i64 @icmp_fuse_zexti64(i32, i32) {
; X64-LABEL: <icmp_fuse_zexti64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    setl dil
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: <icmp_fuse_zexti64>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %c = icmp slt i32 %0, %1
  %r = zext i1 %c to i64
  ret i64 %r
}

define i128 @icmp_fuse_zexti128(i32, i32) {
; X64-LABEL: <icmp_fuse_zexti128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    setl dil
; X64-NEXT:    and edi, 0x1
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x48], rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x48]
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: <icmp_fuse_zexti128>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    ubfx x0, x0, #0, #1
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %c = icmp slt i32 %0, %1
  %r = zext i1 %c to i128
  ret i128 %r
}

define i8 @icmp_fuse_sext8(i32, i32) {
; X64-LABEL: <icmp_fuse_sext8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    setl dil
; X64-NEXT:    neg rdi
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: <icmp_fuse_sext8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    csetm x0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %c = icmp slt i32 %0, %1
  %r = sext i1 %c to i8
  ret i8 %r
}

define i32 @icmp_fuse_sext32(i32, i32) {
; X64-LABEL: <icmp_fuse_sext32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    setl dil
; X64-NEXT:    neg rdi
; X64-NEXT:    mov eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: <icmp_fuse_sext32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    csetm x0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %c = icmp slt i32 %0, %1
  %r = sext i1 %c to i32
  ret i32 %r
}

define i37 @icmp_fuse_sext37(i32, i32) {
; X64-LABEL: <icmp_fuse_sext37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    setl dil
; X64-NEXT:    neg rdi
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: <icmp_fuse_sext37>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    csetm x0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %c = icmp slt i32 %0, %1
  %r = sext i1 %c to i37
  ret i37 %r
}

define i64 @icmp_fuse_sexti64(i32, i32) {
; X64-LABEL: <icmp_fuse_sexti64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    setl dil
; X64-NEXT:    neg rdi
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: <icmp_fuse_sexti64>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    csetm x0, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %c = icmp slt i32 %0, %1
  %r = sext i1 %c to i64
  ret i64 %r
}

define i128 @icmp_fuse_sexti128(i32, i32) {
; X64-LABEL: <icmp_fuse_sexti128>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    setl dil
; X64-NEXT:    shl rdi, 0x3f
; X64-NEXT:    sar rdi, 0x3f
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    sar rax, 0x3f
; X64-NEXT:    mov qword ptr [rbp - 0x48], rax
; X64-NEXT:    mov rax, rdi
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x48]
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: <icmp_fuse_sexti128>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    sbfx x0, x0, #0, #1
; ARM64-NEXT:    asr x1, x0, #63
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %c = icmp slt i32 %0, %1
  %r = sext i1 %c to i128
  ret i128 %r
}

define i64 @icmp_ext_nofuse(i32, i32) {
; X64-LABEL: <icmp_ext_nofuse>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    setl dil
; X64-NEXT:    mov eax, edi
; X64-NEXT:    and eax, 0x1
; X64-NEXT:    shl rdi, 0x3f
; X64-NEXT:    sar rdi, 0x3f
; X64-NEXT:    xor rax, rdi
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <icmp_ext_nofuse>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    cset w0, lt
; ARM64-NEXT:    ubfx x1, x0, #0, #1
; ARM64-NEXT:    sbfx x0, x0, #0, #1
; ARM64-NEXT:    eor x0, x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %c = icmp slt i32 %0, %1
  %z = zext i1 %c to i64
  %s = sext i1 %c to i64
  %r = xor i64 %z, %s
  ret i64 %r
}
