; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always


define void @icmp_eq_i8_0(i8 %0) {
; X64-LABEL: icmp_eq_i8_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    cmp edi, 0x0
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp eq i8 %0, 0
    ret void
}

define void @icmp_ne_i8_0(i8 %0) {
; X64-LABEL: icmp_ne_i8_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    cmp edi, 0x0
; X64:    mov edi, 0x0
; X64:    setne dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp ne i8 %0, 0
    ret void
}

define void @icmp_eq_i8_1(i8 %0) {
; X64-LABEL: icmp_eq_i8_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp eq i8 %0, 1
    ret void
}

define void @icmp_eq_i8_-1(i8 %0) {
; X64-LABEL: icmp_eq_i8_-1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    cmp edi, 0xff
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp eq i8 %0, -1
    ret void
}

define void @icmp_eq_i8_i8(i8 %0, i8 %1) {
; X64-LABEL: icmp_eq_i8_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    movzx esi, sil
; X64:    cmp edi, esi
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = icmp eq i8 %0, %1
    ret void
}

define void @icmp_sgt_i8_i8(i8 %0, i8 %1) {
; X64-LABEL: icmp_sgt_i8_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movsx edi, dil
; X64:    movsx esi, sil
; X64:    cmp edi, esi
; X64:    mov edi, 0x0
; X64:    setg dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = icmp sgt i8 %0, %1
    ret void
}

define void @icmp_ugt_i8_1(i8 %0) {
; X64-LABEL: icmp_ugt_i8_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    seta dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp ugt i8 %0, 1
    ret void
}

define void @icmp_uge_i8_1(i8 %0) {
; X64-LABEL: icmp_uge_i8_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setae dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp uge i8 %0, 1
    ret void
}

define void @icmp_ult_i8_1(i8 %0) {
; X64-LABEL: icmp_ult_i8_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setb dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp ult i8 %0, 1
    ret void
}

define void @icmp_ule_i8_1(i8 %0) {
; X64-LABEL: icmp_ule_i8_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setbe dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp ule i8 %0, 1
    ret void
}

define void @icmp_sgt_i8_1(i8 %0) {
; X64-LABEL: icmp_sgt_i8_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movsx edi, dil
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setg dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp sgt i8 %0, 1
    ret void
}

define void @icmp_sge_i8_1(i8 %0) {
; X64-LABEL: icmp_sge_i8_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movsx edi, dil
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setge dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp sge i8 %0, 1
    ret void
}

define void @icmp_slt_i8_1(i8 %0) {
; X64-LABEL: icmp_slt_i8_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movsx edi, dil
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setl dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp slt i8 %0, 1
    ret void
}

define void @icmp_sle_i8_1(i8 %0) {
; X64-LABEL: icmp_sle_i8_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movsx edi, dil
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setle dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp sle i8 %0, 1
    ret void
}

define i1 @icmp_sle_i8_-1(i8 %0) {
; X64-LABEL: icmp_sle_i8_-1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movsx edi, dil
; X64:    cmp edi, -0x1
; X64:    mov edi, 0x0
; X64:    setle dil
; X64:    mov eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
entry:
  %1 = icmp sle i8 %0, -1
  ret i1 %1
}



define void @icmp_eq_i16_0(i16 %0) {
; X64-LABEL: icmp_eq_i16_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    cmp edi, 0x0
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp eq i16 %0, 0
    ret void
}

define void @icmp_ne_i16_0(i16 %0) {
; X64-LABEL: icmp_ne_i16_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    cmp edi, 0x0
; X64:    mov edi, 0x0
; X64:    setne dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp ne i16 %0, 0
    ret void
}

define void @icmp_eq_i16_1(i16 %0) {
; X64-LABEL: icmp_eq_i16_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp eq i16 %0, 1
    ret void
}

define void @icmp_eq_i16_-1(i16 %0) {
; X64-LABEL: icmp_eq_i16_-1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    cmp edi, 0xffff
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %1 = icmp eq i16 %0, -1
    ret void
}

define void @icmp_eq_i16_f000(i16 %0) {
; X64-LABEL: icmp_eq_i16_f000>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    cmp edi, 0xf000
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %1 = icmp eq i16 %0, u0xf000
    ret void
}


define void @icmp_eq_i16_1001(i16 %0) {
; X64-LABEL: icmp_eq_i16_1001>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    cmp edi, 0x1001
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %1 = icmp eq i16 %0, u0x1001
    ret void
}

define void @icmp_eq_i16_i16(i16 %0, i16 %1) {
; X64-LABEL: icmp_eq_i16_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    movzx esi, si
; X64:    cmp edi, esi
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = icmp eq i16 %0, %1
    ret void
}

define void @icmp_sgt_i16_i16(i16 %0, i16 %1) {
; X64-LABEL: icmp_sgt_i16_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movsx edi, di
; X64:    movsx esi, si
; X64:    cmp edi, esi
; X64:    mov edi, 0x0
; X64:    setg dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = icmp sgt i16 %0, %1
    ret void
}

define void @icmp_ugt_i16_1(i16 %0) {
; X64-LABEL: icmp_ugt_i16_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    seta dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp ugt i16 %0, 1
    ret void
}

define void @icmp_uge_i16_1(i16 %0) {
; X64-LABEL: icmp_uge_i16_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setae dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp uge i16 %0, 1
    ret void
}

define void @icmp_ult_i16_1(i16 %0) {
; X64-LABEL: icmp_ult_i16_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setb dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp ult i16 %0, 1
    ret void
}

define void @icmp_ule_i16_1(i16 %0) {
; X64-LABEL: icmp_ule_i16_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setbe dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp ule i16 %0, 1
    ret void
}

define void @icmp_sgt_i16_1(i16 %0) {
; X64-LABEL: icmp_sgt_i16_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movsx edi, di
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setg dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp sgt i16 %0, 1
    ret void
}

define void @icmp_sge_i16_1(i16 %0) {
; X64-LABEL: icmp_sge_i16_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movsx edi, di
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setge dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp sge i16 %0, 1
    ret void
}

define void @icmp_slt_i16_1(i16 %0) {
; X64-LABEL: icmp_slt_i16_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movsx edi, di
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setl dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp slt i16 %0, 1
    ret void
}

define void @icmp_sle_i16_1(i16 %0) {
; X64-LABEL: icmp_sle_i16_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movsx edi, di
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setle dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp sle i16 %0, 1
    ret void
}



define void @icmp_eq_i32_0(i32 %0) {
; X64-LABEL: icmp_eq_i32_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cmp edi, 0x0
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp eq i32 %0, 0
    ret void
}

define void @icmp_ne_i32_0(i32 %0) {
; X64-LABEL: icmp_ne_i32_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cmp edi, 0x0
; X64:    mov edi, 0x0
; X64:    setne dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp ne i32 %0, 0
    ret void
}

define void @icmp_eq_i32_1(i32 %0) {
; X64-LABEL: icmp_eq_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp eq i32 %0, 1
    ret void
}

define void @icmp_eq_i32_-1(i32 %0) {
; X64-LABEL: icmp_eq_i32_-1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cmp edi, -0x1
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp eq i32 %0, -1
    ret void
}

define void @icmp_eq_i32_f000(i32 %0) {
; X64-LABEL: icmp_eq_i32_f000>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cmp edi, 0xf000
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp eq i32 %0, u0xf000
    ret void
}


define void @icmp_eq_i32_1001(i32 %0) {
; X64-LABEL: icmp_eq_i32_1001>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cmp edi, 0x1001
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp eq i32 %0, u0x1001
    ret void
}

define void @icmp_eq_i32_i32(i32 %0, i32 %1) {
; X64-LABEL: icmp_eq_i32_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp edi, esi
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = icmp eq i32 %0, %1
    ret void
}

define void @icmp_sgt_i32_i32(i32 %0, i32 %1) {
; X64-LABEL: icmp_sgt_i32_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp edi, esi
; X64:    mov edi, 0x0
; X64:    setg dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = icmp sgt i32 %0, %1
    ret void
}

define void @icmp_ugt_i32_1(i32 %0) {
; X64-LABEL: icmp_ugt_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    seta dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp ugt i32 %0, 1
    ret void
}

define void @icmp_uge_i32_1(i32 %0) {
; X64-LABEL: icmp_uge_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setae dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp uge i32 %0, 1
    ret void
}

define void @icmp_ult_i32_1(i32 %0) {
; X64-LABEL: icmp_ult_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setb dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp ult i32 %0, 1
    ret void
}

define void @icmp_ule_i32_1(i32 %0) {
; X64-LABEL: icmp_ule_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setbe dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp ule i32 %0, 1
    ret void
}

define void @icmp_sgt_i32_1(i32 %0) {
; X64-LABEL: icmp_sgt_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setg dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp sgt i32 %0, 1
    ret void
}

define void @icmp_sge_i32_1(i32 %0) {
; X64-LABEL: icmp_sge_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setge dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp sge i32 %0, 1
    ret void
}

define void @icmp_slt_i32_1(i32 %0) {
; X64-LABEL: icmp_slt_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setl dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp slt i32 %0, 1
    ret void
}

define void @icmp_sle_i32_1(i32 %0) {
; X64-LABEL: icmp_sle_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    cmp edi, 0x1
; X64:    mov edi, 0x0
; X64:    setle dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp sle i32 %0, 1
    ret void
}



define void @icmp_eq_i64_0(i64 %0) {
; X64-LABEL: icmp_eq_i64_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0x0
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp eq i64 %0, 0
    ret void
}

define void @icmp_ne_i64_0(i64 %0) {
; X64-LABEL: icmp_ne_i64_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0x0
; X64:    mov edi, 0x0
; X64:    setne dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp ne i64 %0, 0
    ret void
}

define void @icmp_eq_i64_1(i64 %0) {
; X64-LABEL: icmp_eq_i64_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp eq i64 %0, 1
    ret void
}

define void @icmp_eq_i64_-1(i64 %0) {
; X64-LABEL: icmp_eq_i64_-1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, -0x1
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp eq i64 %0, -1
    ret void
}

define void @icmp_eq_i64_f000(i64 %0) {
; X64-LABEL: icmp_eq_i64_f000>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0xf000
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp eq i64 %0, u0xf000
    ret void
}

define void @icmp_eq_i64_1001(i64 %0) {
; X64-LABEL: icmp_eq_i64_1001>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0x1001
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = icmp eq i64 %0, u0x1001
    ret void
}

define void @icmp_eq_i64_i64(i64 %0, i64 %1) {
; X64-LABEL: icmp_eq_i64_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, rsi
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %2 = icmp eq i64 %0, %1
    ret void
}

define void @icmp_sgt_i64_i64(i64 %0, i64 %1) {
; X64-LABEL: icmp_sgt_i64_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, rsi
; X64:    mov edi, 0x0
; X64:    setg dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %2 = icmp sgt i64 %0, %1
    ret void
}

define void @icmp_ugt_i64_1(i64 %0) {
; X64-LABEL: icmp_ugt_i64_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    seta dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp ugt i64 %0, 1
    ret void
}

define void @icmp_uge_i64_1(i64 %0) {
; X64-LABEL: icmp_uge_i64_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    setae dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp uge i64 %0, 1
    ret void
}

define void @icmp_ult_i64_1(i64 %0) {
; X64-LABEL: icmp_ult_i64_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    setb dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp ult i64 %0, 1
    ret void
}

define void @icmp_ule_i64_1(i64 %0) {
; X64-LABEL: icmp_ule_i64_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    setbe dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp ule i64 %0, 1
    ret void
}

define void @icmp_sgt_i64_1(i64 %0) {
; X64-LABEL: icmp_sgt_i64_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    setg dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp sgt i64 %0, 1
    ret void
}

define void @icmp_sge_i64_1(i64 %0) {
; X64-LABEL: icmp_sge_i64_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    setge dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp sge i64 %0, 1
    ret void
}

define void @icmp_slt_i64_1(i64 %0) {
; X64-LABEL: icmp_slt_i64_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    setl dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp slt i64 %0, 1
    ret void
}

define void @icmp_sle_i64_1(i64 %0) {
; X64-LABEL: icmp_sle_i64_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    setle dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp sle i64 %0, 1
    ret void
}



define void @icmp_eq_i37_0(i37 %0) {
; X64-LABEL: icmp_eq_i37_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    cmp rdi, 0x0
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
  entry:
    %1 = icmp eq i37 %0, 0
    ret void
}

define void @icmp_ne_i37_0(i37 %0) {
; X64-LABEL: icmp_ne_i37_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    cmp rdi, 0x0
; X64:    mov edi, 0x0
; X64:    setne dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
  entry:
    %1 = icmp ne i37 %0, 0
    ret void
}

define void @icmp_eq_i37_1(i37 %0) {
; X64-LABEL: icmp_eq_i37_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
  entry:
    %1 = icmp eq i37 %0, 1
    ret void
}

define void @icmp_eq_i37_-1(i37 %0) {
; X64-LABEL: icmp_eq_i37_-1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    movabs rax, 0x1fffffffff
; X64:    cmp rdi, rax
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp eq i37 %0, -1
    ret void
}

define void @icmp_eq_i37_f000(i37 %0) {
; X64-LABEL: icmp_eq_i37_f000>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    cmp rdi, 0xf000
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp eq i37 %0, u0xf000
    ret void
}

define void @icmp_eq_i37_1001(i37 %0) {
; X64-LABEL: icmp_eq_i37_1001>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    cmp rdi, 0x1001
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp eq i37 %0, u0x1001
    ret void
}

define void @icmp_eq_i37_i37(i37 %0, i37 %1) {
; X64-LABEL: icmp_eq_i37_i37>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    movabs rax, 0x1fffffffff
; X64:    and rsi, rax
; X64:    cmp rdi, rsi
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %2 = icmp eq i37 %0, %1
    ret void
}

define void @icmp_sgt_i37_i37(i37 %0, i37 %1) {
; X64-LABEL: icmp_sgt_i37_i37>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    shl rdi, 0x1b
; X64:    sar rdi, 0x1b
; X64:    shl rsi, 0x1b
; X64:    sar rsi, 0x1b
; X64:    cmp rdi, rsi
; X64:    mov edi, 0x0
; X64:    setg dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %2 = icmp sgt i37 %0, %1
    ret void
}

define void @icmp_ugt_i37_1(i37 %0) {
; X64-LABEL: icmp_ugt_i37_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    seta dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
  entry:
    %1 = icmp ugt i37 %0, 1
    ret void
}

define void @icmp_uge_i37_1(i37 %0) {
; X64-LABEL: icmp_uge_i37_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    setae dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
  entry:
    %1 = icmp uge i37 %0, 1
    ret void
}

define void @icmp_ult_i37_1(i37 %0) {
; X64-LABEL: icmp_ult_i37_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    setb dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
  entry:
    %1 = icmp ult i37 %0, 1
    ret void
}

define void @icmp_ule_i37_1(i37 %0) {
; X64-LABEL: icmp_ule_i37_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    setbe dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
  entry:
    %1 = icmp ule i37 %0, 1
    ret void
}

define void @icmp_sgt_i37_1(i37 %0) {
; X64-LABEL: icmp_sgt_i37_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    shl rdi, 0x1b
; X64:    sar rdi, 0x1b
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    setg dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp sgt i37 %0, 1
    ret void
}

define void @icmp_sge_i37_1(i37 %0) {
; X64-LABEL: icmp_sge_i37_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    shl rdi, 0x1b
; X64:    sar rdi, 0x1b
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    setge dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp sge i37 %0, 1
    ret void
}

define void @icmp_slt_i37_1(i37 %0) {
; X64-LABEL: icmp_slt_i37_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    shl rdi, 0x1b
; X64:    sar rdi, 0x1b
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    setl dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp slt i37 %0, 1
    ret void
}

define void @icmp_sle_i37_1(i37 %0) {
; X64-LABEL: icmp_sle_i37_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    shl rdi, 0x1b
; X64:    sar rdi, 0x1b
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    setle dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp sle i37 %0, 1
    ret void
}


define void @icmp_eq_i64_no_salvage_imm(i64 %0) {
; X64-LABEL: icmp_eq_i64_no_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0x1
; X64:    mov eax, 0x0
; X64:    sete al
; X64:    cmp rdi, 0x2
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp eq i64 %0, 1
    %2 = icmp eq i64 %0, 2
    ret void
}

define void @icmp_eq_i64_no_salvage_reg(i64 %0, i64 %1) {
; X64-LABEL: icmp_eq_i64_no_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, rsi
; X64:    mov eax, 0x0
; X64:    sete al
; X64:    cmp rdi, rsi
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = icmp eq i64 %0, %1
    %3 = icmp eq i64 %0, %1
    ret void
}

define void @icmp_eq_i64_reorder_imm(i64 %0) {
; X64-LABEL: icmp_eq_i64_reorder_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    cmp rdi, 0x1
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = icmp eq i64 1, %0
    ret void
}


define void @icmp_eq_i128_0(i128 %0) {
; X64-LABEL: icmp_eq_i128_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov rax, rdi
; X64:    mov rcx, rsi
; X64:    mov edx, 0x0
; X64:    mov ebx, 0x0
; X64:    xor rax, rdx
; X64:    xor rcx, rbx
; X64:    or rax, rcx
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x40
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %2 = icmp eq i128 %0, 0
    ret void
}

define void @icmp_eq_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: icmp_eq_i128_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov rax, rdi
; X64:    mov rbx, rsi
; X64:    xor rax, rdx
; X64:    xor rbx, rcx
; X64:    or rax, rbx
; X64:    mov edi, 0x0
; X64:    sete dil
; X64:    add rsp, 0x50
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = icmp eq i128 %0, %1
    ret void
}

define void @icmp_ne_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: icmp_ne_i128_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov rax, rdi
; X64:    mov rbx, rsi
; X64:    xor rax, rdx
; X64:    xor rbx, rcx
; X64:    or rax, rbx
; X64:    mov edi, 0x0
; X64:    setne dil
; X64:    add rsp, 0x50
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %2 = icmp ne i128 %0, %1
    ret void
}

define void @icmp_ugt_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: icmp_ugt_i128_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    cmp rdx, rdi
; X64:    sbb rcx, rsi
; X64:    mov edx, 0x0
; X64:    setb dl
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %2 = icmp ugt i128 %0, %1
    ret void
}

define void @icmp_uge_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: icmp_uge_i128_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    cmp rdi, rdx
; X64:    sbb rsi, rcx
; X64:    mov edi, 0x0
; X64:    setae dil
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = icmp uge i128 %0, %1
    ret void
}

define void @icmp_ult_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: icmp_ult_i128_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    cmp rdi, rdx
; X64:    sbb rsi, rcx
; X64:    mov edi, 0x0
; X64:    setb dil
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = icmp ult i128 %0, %1
    ret void
}

define void @icmp_ule_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: icmp_ule_i128_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    cmp rdx, rdi
; X64:    sbb rcx, rsi
; X64:    mov edx, 0x0
; X64:    setae dl
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %2 = icmp ule i128 %0, %1
    ret void
}

define void @icmp_sgt_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: icmp_sgt_i128_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    cmp rdx, rdi
; X64:    sbb rcx, rsi
; X64:    mov edx, 0x0
; X64:    setl dl
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %2 = icmp sgt i128 %0, %1
    ret void
}

define void @icmp_sge_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: icmp_sge_i128_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    cmp rdi, rdx
; X64:    sbb rsi, rcx
; X64:    mov edi, 0x0
; X64:    setge dil
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = icmp sge i128 %0, %1
    ret void
}

define void @icmp_slt_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: icmp_slt_i128_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    cmp rdi, rdx
; X64:    sbb rsi, rcx
; X64:    mov edi, 0x0
; X64:    setl dil
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = icmp slt i128 %0, %1
    ret void
}

define void @icmp_sle_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: icmp_sle_i128_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    cmp rdx, rdi
; X64:    sbb rcx, rsi
; X64:    mov edx, 0x0
; X64:    setge dl
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %2 = icmp sle i128 %0, %1
    ret void
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
