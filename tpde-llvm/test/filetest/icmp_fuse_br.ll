; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always


define i8 @icmp_eq_i8_0_br(i8 %0) {
; X64-LABEL: icmp_eq_i8_0_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    cmp edi, 0x0
; X64-NEXT:    jne <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
  entry:
    %1 = icmp eq i8 %0, 0
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_eq_i32_0_br(i32 %0) {
; X64-LABEL: icmp_eq_i32_0_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x0
; X64-NEXT:    jne <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
  entry:
    %1 = icmp eq i32 %0, 0
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_ne_i32_0_br(i32 %0) {
; X64-LABEL: icmp_ne_i32_0_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x0
; X64-NEXT:    je <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
  entry:
    %1 = icmp ne i32 %0, 0
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_ne_i64_0_br(i64 %0) {
; X64-LABEL: icmp_ne_i64_0_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp rdi, 0x0
; X64-NEXT:    je <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
  entry:
    %1 = icmp ne i64 %0, 0
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_eq_i8_1_br(i8 %0) {
; X64-LABEL: icmp_eq_i8_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    movzx edi, dil
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jne <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
  entry:
    %1 = icmp eq i8 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_eq_i32_1_br(i32 %0) {
; X64-LABEL: icmp_eq_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jne <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
  entry:
    %1 = icmp eq i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_ne_i32_1_br(i32 %0) {
; X64-LABEL: icmp_ne_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    je <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
  entry:
    %1 = icmp ne i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}


define i8 @icmp_ugt_i32_1_br(i32 %0) {
; X64-LABEL: icmp_ugt_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jbe <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
  entry:
    %1 = icmp ugt i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_uge_i32_1_br(i32 %0) {
; X64-LABEL: icmp_uge_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jb <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
  entry:
    %1 = icmp uge i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_ult_i32_1_br(i32 %0) {
; X64-LABEL: icmp_ult_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jae <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
  entry:
    %1 = icmp ult i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_ule_i32_1_br(i32 %0) {
; X64-LABEL: icmp_ule_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    ja <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
  entry:
    %1 = icmp ule i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_sgt_i32_1_br(i32 %0) {
; X64-LABEL: icmp_sgt_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jle <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
  entry:
    %1 = icmp sgt i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_sge_i32_1_br(i32 %0) {
; X64-LABEL: icmp_sge_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jl <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
  entry:
    %1 = icmp sge i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_slt_i32_1_br(i32 %0) {
; X64-LABEL: icmp_slt_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jge <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
  entry:
    %1 = icmp slt i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}

define i8 @icmp_sle_i32_1_br(i32 %0) {
; X64-LABEL: icmp_sle_i32_1_br>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cmp edi, 0x1
; X64-NEXT:    jg <L0>
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
  entry:
    %1 = icmp sle i32 %0, 1
    br i1 %1, label %block1, label %block2
block1:
    ret i8 1
block2:
    ret i8 2
}



define i8 @icmp_eq_i32_0_br_no_salvage(i32 %0) {
; X64-LABEL: icmp_eq_i32_0_br_no_salvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x28
; X64-NEXT:    cmp edi, 0x0
; X64-NEXT:    mov ebx, 0x0
; X64-NEXT:    sete bl
; X64-NEXT:    test ebx, 0x1
; X64-NEXT:    je <L0>
; X64-NEXT:    and ebx, 0x1
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    add rsp, 0x28
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    add byte ptr [rax], al
  entry:
    %1 = icmp eq i32 %0, 0
    br i1 %1, label %block1, label %block2
block1:
    %2 = zext i1 %1 to i8
    ret i8 %2
block2:
    ret i8 2
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
