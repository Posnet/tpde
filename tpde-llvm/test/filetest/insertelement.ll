; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define <16 x i8> @ins_v16i8_0(<16 x i8> %v, i8 %e) {
; X64-LABEL: <ins_v16i8_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movapd xmmword ptr [rbp - 0x60], xmm0
; X64-NEXT:    mov byte ptr [rbp - 0x60], dil
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x60]
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: <ins_v16i8_0>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov v0.b[0], w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %r = insertelement <16 x i8> %v, i8 %e, i32 0
  ret <16 x i8> %r
}

define <16 x i8> @ins_v16i8_11(<16 x i8> %v, i8 %e) {
; X64-LABEL: <ins_v16i8_11>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movapd xmmword ptr [rbp - 0x60], xmm0
; X64-NEXT:    mov byte ptr [rbp - 0x55], dil
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x60]
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: <ins_v16i8_11>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov v0.b[11], w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %r = insertelement <16 x i8> %v, i8 %e, i32 11
  ret <16 x i8> %r
}

define <16 x i8> @ins_v16i8_dyn(<16 x i8> %v, i8 %e, i32 %i) {
; X64-LABEL: <ins_v16i8_dyn>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movapd xmmword ptr [rbp - 0x60], xmm0
; X64-NEXT:    and rsi, 0xf
; X64-NEXT:    mov byte ptr [rbp + rsi - 0x60], dil
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x60]
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: <ins_v16i8_dyn>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    str q0, [x29, #0xc0]
; ARM64-NEXT:    and x1, x1, #0xf
; ARM64-NEXT:    add x1, x29, x1
; ARM64-NEXT:    strb w0, [x1, #0xc0]
; ARM64-NEXT:    ldr q0, [x29, #0xc0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %r = insertelement <16 x i8> %v, i8 %e, i32 %i
  ret <16 x i8> %r
}

define <4 x i32> @ins_v4i32_0(<4 x i32> %v, i32 %e) {
; X64-LABEL: <ins_v4i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movapd xmmword ptr [rbp - 0x60], xmm0
; X64-NEXT:    mov dword ptr [rbp - 0x60], edi
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x60]
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: <ins_v4i32_0>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov v0.s[0], w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %r = insertelement <4 x i32> %v, i32 %e, i32 0
  ret <4 x i32> %r
}

define <4 x i32> @ins_v4i32_3(<4 x i32> %v, i32 %e) {
; X64-LABEL: <ins_v4i32_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movapd xmmword ptr [rbp - 0x60], xmm0
; X64-NEXT:    mov dword ptr [rbp - 0x54], edi
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x60]
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: <ins_v4i32_3>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov v0.s[3], w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %r = insertelement <4 x i32> %v, i32 %e, i32 3
  ret <4 x i32> %r
}

define <4 x i32> @ins_v4i32_chain(i32 %a, i32 %b, i32 %c, i32 %d) {
; X64-LABEL: <ins_v4i32_chain>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    pxor xmm0, xmm0
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    mov dword ptr [rbp - 0x50], edi
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x50]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x60], xmm0
; X64-NEXT:    mov dword ptr [rbp - 0x5c], esi
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x60]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    mov dword ptr [rbp - 0x48], edx
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x50]
; X64-NEXT:    movapd xmmword ptr [rbp - 0x60], xmm0
; X64-NEXT:    mov dword ptr [rbp - 0x54], ecx
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x60]
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: <ins_v4i32_chain>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    movi v0.16b, #0x0
; ARM64-NEXT:    str q0, [x29, #0xb0]
; ARM64-NEXT:    ldr q0, [x29, #0xb0]
; ARM64-NEXT:    mov v0.s[0], w0
; ARM64-NEXT:    mov v0.s[1], w1
; ARM64-NEXT:    mov v0.s[2], w2
; ARM64-NEXT:    mov v0.s[3], w3
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %r0 = insertelement <4 x i32> poison, i32 %a, i32 0
  %r1 = insertelement <4 x i32> %r0, i32 %b, i32 1
  %r2 = insertelement <4 x i32> %r1, i32 %c, i32 2
  %r3 = insertelement <4 x i32> %r2, i32 %d, i32 3
  ret <4 x i32> %r3
}

define <4 x i32> @ins_v4i32_dyn(<4 x i32> %v, i32 %e, i32 %i) {
; X64-LABEL: <ins_v4i32_dyn>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movapd xmmword ptr [rbp - 0x60], xmm0
; X64-NEXT:    and rsi, 0x3
; X64-NEXT:    mov dword ptr [rbp + 4*rsi - 0x60], edi
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x60]
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: <ins_v4i32_dyn>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    str q0, [x29, #0xc0]
; ARM64-NEXT:    and x1, x1, #0x3
; ARM64-NEXT:    add x1, x29, x1, lsl #2
; ARM64-NEXT:    str w0, [x1, #0xc0]
; ARM64-NEXT:    ldr q0, [x29, #0xc0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %r = insertelement <4 x i32> %v, i32 %e, i32 %i
  ret <4 x i32> %r
}

define <2 x double> @ins_v2f64_0(<2 x double> %v, double %e) {
; X64-LABEL: <ins_v2f64_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    movsd qword ptr [rbp - 0x50], xmm1
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x50]
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: <ins_v2f64_0>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov v0.d[0], v1.d[0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %r = insertelement <2 x double> %v, double %e, i32 0
  ret <2 x double> %r
}

define <2 x double> @ins_v2f64_1(<2 x double> %v, double %e) {
; X64-LABEL: <ins_v2f64_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    movsd qword ptr [rbp - 0x48], xmm1
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x50]
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: <ins_v2f64_1>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov v0.d[1], v1.d[0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %r = insertelement <2 x double> %v, double %e, i32 1
  ret <2 x double> %r
}

define <2 x double> @ins_v2f64_dyn(<2 x double> %v, double %e, i32 %i) {
; X64-LABEL: <ins_v2f64_dyn>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movapd xmmword ptr [rbp - 0x60], xmm0
; X64-NEXT:    and rdi, 0x1
; X64-NEXT:    movsd qword ptr [rbp + 8*rdi - 0x60], xmm1
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x60]
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: <ins_v2f64_dyn>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    str q0, [x29, #0xc0]
; ARM64-NEXT:    and x0, x0, #0x1
; ARM64-NEXT:    add x0, x29, x0, lsl #3
; ARM64-NEXT:    str d1, [x0, #0xc0]
; ARM64-NEXT:    ldr q0, [x29, #0xc0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %r = insertelement <2 x double> %v, double %e, i32 %i
  ret <2 x double> %r
}

define <2 x double> @ins_v2f64_const(<2 x double> %v) {
; X64-LABEL: <ins_v2f64_const>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movapd xmmword ptr [rbp - 0x50], xmm0
; X64-NEXT:    movabs rax, 0x3ff0000000000000
; X64-NEXT:    movq xmm0, rax
; X64-NEXT:    movsd qword ptr [rbp - 0x48], xmm0
; X64-NEXT:    movapd xmm0, xmmword ptr [rbp - 0x50]
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <ins_v2f64_const>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fmov d1, #1.00000000
; ARM64-NEXT:    mov v0.d[1], v1.d[0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %r = insertelement <2 x double> %v, double 1.0, i32 1
  ret <2 x double> %r
}
