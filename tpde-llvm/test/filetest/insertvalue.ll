; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel --section=.text --section=.rodata - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always

%struct.i8_i32 = type { i8, i32 }
%struct.ptr_i32 = type { ptr, i32 }
%struct.f32_ptr = type { float, ptr }
%struct.i128_i1 = type { i128, i1 }

define void @insert_i8_i32_0(ptr %0, i8 %1) {
; X64-LABEL: insert_i8_i32_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    movzx eax, byte ptr [rdi]
; X64:    mov ecx, dword ptr [rdi + 0x4]
; X64:    mov byte ptr [rdi], sil
; X64:    mov dword ptr [rdi + 0x4], ecx
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: insert_i8_i32_0>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldrb w2, [x0]
; ARM64:    add x4, x0, #0x4
; ARM64:    ldr w3, [x4]
; ARM64:    strb w1, [x0]
; ARM64:    add x2, x0, #0x4
; ARM64:    str w3, [x2]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.i8_i32, ptr %0
  %3 = insertvalue %struct.i8_i32 %2, i8 %1, 0
  store %struct.i8_i32 %3, ptr %0
  ret void
}

define void @insert_i8_i32_1(ptr %0, i32 %1) {
; X64-LABEL: insert_i8_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    movzx eax, byte ptr [rdi]
; X64:    mov ecx, dword ptr [rdi + 0x4]
; X64:    mov byte ptr [rdi], al
; X64:    mov dword ptr [rdi + 0x4], esi
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: insert_i8_i32_1>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldrb w2, [x0]
; ARM64:    add x4, x0, #0x4
; ARM64:    ldr w3, [x4]
; ARM64:    strb w2, [x0]
; ARM64:    add x3, x0, #0x4
; ARM64:    str w1, [x3]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.i8_i32, ptr %0
  %3 = insertvalue %struct.i8_i32 %2, i32 %1, 1
  store %struct.i8_i32 %3, ptr %0
  ret void
}

define void @insert_i8_i32_0_nosalvage(ptr %0, i8 %1) {
; X64-LABEL: insert_i8_i32_0_nosalvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    movzx eax, byte ptr [rdi]
; X64:    mov ecx, dword ptr [rdi + 0x4]
; X64:    mov edx, ecx
; X64:    mov byte ptr [rdi], al
; X64:    mov dword ptr [rdi + 0x4], ecx
; X64:    mov byte ptr [rdi], sil
; X64:    mov dword ptr [rdi + 0x4], edx
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: insert_i8_i32_0_nosalvage>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldrb w2, [x0]
; ARM64:    add x4, x0, #0x4
; ARM64:    ldr w3, [x4]
; ARM64:    mov w4, w3
; ARM64:    strb w2, [x0]
; ARM64:    add x5, x0, #0x4
; ARM64:    str w3, [x5]
; ARM64:    strb w1, [x0]
; ARM64:    add x2, x0, #0x4
; ARM64:    str w4, [x2]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.i8_i32, ptr %0
  %3 = insertvalue %struct.i8_i32 %2, i8 %1, 0
  store %struct.i8_i32 %2, ptr %0
  store %struct.i8_i32 %3, ptr %0
  ret void
}

define void @insert_i8_i32_1_nosalvage(ptr %0, i32 %1) {
; X64-LABEL: insert_i8_i32_1_nosalvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    movzx eax, byte ptr [rdi]
; X64:    mov ecx, dword ptr [rdi + 0x4]
; X64:    mov edx, eax
; X64:    mov byte ptr [rdi], al
; X64:    mov dword ptr [rdi + 0x4], ecx
; X64:    mov byte ptr [rdi], dl
; X64:    mov dword ptr [rdi + 0x4], esi
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: insert_i8_i32_1_nosalvage>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldrb w2, [x0]
; ARM64:    add x4, x0, #0x4
; ARM64:    ldr w3, [x4]
; ARM64:    mov w4, w2
; ARM64:    strb w2, [x0]
; ARM64:    add x5, x0, #0x4
; ARM64:    str w3, [x5]
; ARM64:    strb w4, [x0]
; ARM64:    add x2, x0, #0x4
; ARM64:    str w1, [x2]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.i8_i32, ptr %0
  %3 = insertvalue %struct.i8_i32 %2, i32 %1, 1
  store %struct.i8_i32 %2, ptr %0
  store %struct.i8_i32 %3, ptr %0
  ret void
}


define void @insert_ptr_i32_0(ptr %0, ptr %1) {
; X64-LABEL: insert_ptr_i32_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    mov rax, qword ptr [rdi]
; X64:    mov ecx, dword ptr [rdi + 0x8]
; X64:    mov qword ptr [rdi], rsi
; X64:    mov dword ptr [rdi + 0x8], ecx
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: insert_ptr_i32_0>:
; ARM64:    sub sp, sp, #0xd0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldr x2, [x0]
; ARM64:    add x4, x0, #0x8
; ARM64:    ldr w3, [x4]
; ARM64:    str x1, [x0]
; ARM64:    add x2, x0, #0x8
; ARM64:    str w3, [x2]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xd0
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.ptr_i32, ptr %0
  %3 = insertvalue %struct.ptr_i32 %2, ptr %1, 0
  store %struct.ptr_i32 %3, ptr %0
  ret void
}

define void @insert_ptr_i32_1(ptr %0, i32 %1) {
; X64-LABEL: insert_ptr_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    mov rax, qword ptr [rdi]
; X64:    mov ecx, dword ptr [rdi + 0x8]
; X64:    mov qword ptr [rdi], rax
; X64:    mov dword ptr [rdi + 0x8], esi
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: insert_ptr_i32_1>:
; ARM64:    sub sp, sp, #0xd0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldr x2, [x0]
; ARM64:    add x4, x0, #0x8
; ARM64:    ldr w3, [x4]
; ARM64:    str x2, [x0]
; ARM64:    add x3, x0, #0x8
; ARM64:    str w1, [x3]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xd0
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.ptr_i32, ptr %0
  %3 = insertvalue %struct.ptr_i32 %2, i32 %1, 1
  store %struct.ptr_i32 %3, ptr %0
  ret void
}

define void @insert_ptr_i32_0_nosalvage(ptr %0, ptr %1) {
; X64-LABEL: insert_ptr_i32_0_nosalvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    mov rax, qword ptr [rdi]
; X64:    mov ecx, dword ptr [rdi + 0x8]
; X64:    mov edx, ecx
; X64:    mov qword ptr [rdi], rax
; X64:    mov dword ptr [rdi + 0x8], ecx
; X64:    mov qword ptr [rdi], rsi
; X64:    mov dword ptr [rdi + 0x8], edx
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: insert_ptr_i32_0_nosalvage>:
; ARM64:    sub sp, sp, #0xd0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldr x2, [x0]
; ARM64:    add x4, x0, #0x8
; ARM64:    ldr w3, [x4]
; ARM64:    mov w4, w3
; ARM64:    str x2, [x0]
; ARM64:    add x5, x0, #0x8
; ARM64:    str w3, [x5]
; ARM64:    str x1, [x0]
; ARM64:    add x2, x0, #0x8
; ARM64:    str w4, [x2]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xd0
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.ptr_i32, ptr %0
  %3 = insertvalue %struct.ptr_i32 %2, ptr %1, 0
  store %struct.ptr_i32 %2, ptr %0
  store %struct.ptr_i32 %3, ptr %0
  ret void
}

define void @insert_ptr_i32_poison(ptr %0, ptr %1, i32 %2) {
; X64-LABEL: insert_ptr_i32_poison>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    mov eax, 0x0
; X64:    mov qword ptr [rdi], rsi
; X64:    mov dword ptr [rdi + 0x8], edx
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: insert_ptr_i32_poison>:
; ARM64:    sub sp, sp, #0xe0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov w3, #0x0 // =0
; ARM64:    str x1, [x0]
; ARM64:    add x3, x0, #0x8
; ARM64:    str w2, [x3]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xe0
; ARM64:    ret
; ARM64:     ...
entry:
  %3 = insertvalue %struct.ptr_i32 poison, ptr %1, 0
  %4 = insertvalue %struct.ptr_i32 %3, i32 %2, 1
  store %struct.ptr_i32 %4, ptr %0
  ret void
}

define ptr @insert_ptr_i32_poison_nosalvage(ptr %0, ptr %1, i32 %2) {
; X64-LABEL: insert_ptr_i32_poison_nosalvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    mov rax, rsi
; X64:    mov ecx, 0x0
; X64:    mov qword ptr [rdi], rax
; X64:    mov dword ptr [rdi + 0x8], edx
; X64:    mov rax, rsi
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: insert_ptr_i32_poison_nosalvage>:
; ARM64:    sub sp, sp, #0xe0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x3, x1
; ARM64:    mov w4, #0x0 // =0
; ARM64:    str x3, [x0]
; ARM64:    add x4, x0, #0x8
; ARM64:    str w2, [x4]
; ARM64:    mov x0, x1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xe0
; ARM64:    ret
; ARM64:     ...
entry:
  %3 = insertvalue %struct.ptr_i32 poison, ptr %1, 0
  %4 = insertvalue %struct.ptr_i32 %3, i32 %2, 1
  store %struct.ptr_i32 %4, ptr %0
  ret ptr %1
}

define i32 @insert_ptr_i32_poison_nosalvage1(ptr %0, ptr %1, i32 %2) {
; X64-LABEL: insert_ptr_i32_poison_nosalvage1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    mov eax, 0x0
; X64:    mov eax, edx
; X64:    mov qword ptr [rdi], rsi
; X64:    mov dword ptr [rdi + 0x8], eax
; X64:    mov eax, edx
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: insert_ptr_i32_poison_nosalvage1>:
; ARM64:    sub sp, sp, #0xe0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov w3, #0x0 // =0
; ARM64:    mov w3, w2
; ARM64:    str x1, [x0]
; ARM64:    add x4, x0, #0x8
; ARM64:    str w3, [x4]
; ARM64:    mov w0, w2
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xe0
; ARM64:    ret
; ARM64:     ...
entry:
  %3 = insertvalue %struct.ptr_i32 poison, ptr %1, 0
  %4 = insertvalue %struct.ptr_i32 %3, i32 %2, 1
  store %struct.ptr_i32 %4, ptr %0
  ret i32 %2
}

define void @insert_ptr_i32_1_nosalvage(ptr %0, i32 %1) {
; X64-LABEL: insert_ptr_i32_1_nosalvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    mov rax, qword ptr [rdi]
; X64:    mov ecx, dword ptr [rdi + 0x8]
; X64:    mov rdx, rax
; X64:    mov qword ptr [rdi], rax
; X64:    mov dword ptr [rdi + 0x8], ecx
; X64:    mov qword ptr [rdi], rdx
; X64:    mov dword ptr [rdi + 0x8], esi
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: insert_ptr_i32_1_nosalvage>:
; ARM64:    sub sp, sp, #0xd0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldr x2, [x0]
; ARM64:    add x4, x0, #0x8
; ARM64:    ldr w3, [x4]
; ARM64:    mov x4, x2
; ARM64:    str x2, [x0]
; ARM64:    add x5, x0, #0x8
; ARM64:    str w3, [x5]
; ARM64:    str x4, [x0]
; ARM64:    add x2, x0, #0x8
; ARM64:    str w1, [x2]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xd0
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.ptr_i32, ptr %0
  %3 = insertvalue %struct.ptr_i32 %2, i32 %1, 1
  store %struct.ptr_i32 %2, ptr %0
  store %struct.ptr_i32 %3, ptr %0
  ret void
}


define void @insert_f32_ptr_0(ptr %0, float %1) {
; X64-LABEL: insert_f32_ptr_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    movss xmm1, dword ptr [rdi]
; X64:    mov rax, qword ptr [rdi + 0x8]
; X64:    movss dword ptr [rdi], xmm0
; X64:    mov qword ptr [rdi + 0x8], rax
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: insert_f32_ptr_0>:
; ARM64:    sub sp, sp, #0xd0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldr s1, [x0]
; ARM64:    add x2, x0, #0x8
; ARM64:    ldr x1, [x2]
; ARM64:    str s0, [x0]
; ARM64:    add x2, x0, #0x8
; ARM64:    str x1, [x2]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xd0
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.f32_ptr, ptr %0
  %3 = insertvalue %struct.f32_ptr %2, float %1, 0
  store %struct.f32_ptr %3, ptr %0
  ret void
}

define void @insert_f32_ptr_1(ptr %0, ptr %1) {
; X64-LABEL: insert_f32_ptr_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    movss xmm0, dword ptr [rdi]
; X64:    mov rax, qword ptr [rdi + 0x8]
; X64:    movss dword ptr [rdi], xmm0
; X64:    mov qword ptr [rdi + 0x8], rsi
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: insert_f32_ptr_1>:
; ARM64:    sub sp, sp, #0xd0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldr s0, [x0]
; ARM64:    add x3, x0, #0x8
; ARM64:    ldr x2, [x3]
; ARM64:    str s0, [x0]
; ARM64:    add x2, x0, #0x8
; ARM64:    str x1, [x2]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xd0
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.f32_ptr, ptr %0
  %3 = insertvalue %struct.f32_ptr %2, ptr %1, 1
  store %struct.f32_ptr %3, ptr %0
  ret void
}

define void @insert_f32_ptr_0_nosalvage(ptr %0, float %1) {
; X64-LABEL: insert_f32_ptr_0_nosalvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    movss xmm1, dword ptr [rdi]
; X64:    mov rax, qword ptr [rdi + 0x8]
; X64:    mov rcx, rax
; X64:    movss dword ptr [rdi], xmm1
; X64:    mov qword ptr [rdi + 0x8], rax
; X64:    movss dword ptr [rdi], xmm0
; X64:    mov qword ptr [rdi + 0x8], rcx
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: insert_f32_ptr_0_nosalvage>:
; ARM64:    sub sp, sp, #0xd0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldr s1, [x0]
; ARM64:    add x2, x0, #0x8
; ARM64:    ldr x1, [x2]
; ARM64:    mov x2, x1
; ARM64:    str s1, [x0]
; ARM64:    add x3, x0, #0x8
; ARM64:    str x1, [x3]
; ARM64:    str s0, [x0]
; ARM64:    add x1, x0, #0x8
; ARM64:    str x2, [x1]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xd0
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.f32_ptr, ptr %0
  %3 = insertvalue %struct.f32_ptr %2, float %1, 0
  store %struct.f32_ptr %2, ptr %0
  store %struct.f32_ptr %3, ptr %0
  ret void
}

define void @insert_f32_ptr_1_nosalvage(ptr %0, ptr %1) {
; X64-LABEL: insert_f32_ptr_1_nosalvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    movss xmm0, dword ptr [rdi]
; X64:    mov rax, qword ptr [rdi + 0x8]
; X64:    movupd xmm1, xmm0
; X64:    movss dword ptr [rdi], xmm0
; X64:    mov qword ptr [rdi + 0x8], rax
; X64:    movss dword ptr [rdi], xmm1
; X64:    mov qword ptr [rdi + 0x8], rsi
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: insert_f32_ptr_1_nosalvage>:
; ARM64:    sub sp, sp, #0xd0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldr s0, [x0]
; ARM64:    add x3, x0, #0x8
; ARM64:    ldr x2, [x3]
; ARM64:    mov v1.16b, v0.16b
; ARM64:    str s0, [x0]
; ARM64:    add x3, x0, #0x8
; ARM64:    str x2, [x3]
; ARM64:    str s1, [x0]
; ARM64:    add x2, x0, #0x8
; ARM64:    str x1, [x2]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xd0
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.f32_ptr, ptr %0
  %3 = insertvalue %struct.f32_ptr %2, ptr %1, 1
  store %struct.f32_ptr %2, ptr %0
  store %struct.f32_ptr %3, ptr %0
  ret void
}


define void @insert_i128_i1_0(ptr %0, i128 %1) {
; X64-LABEL: insert_i128_i1_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x78
; X64:    mov rax, qword ptr [rdi]
; X64:    mov rcx, qword ptr [rdi + 0x8]
; X64:    movzx ebx, byte ptr [rdi + 0x10]
; X64:    mov qword ptr [rdi + 0x8], rdx
; X64:    mov qword ptr [rdi], rsi
; X64:    mov byte ptr [rdi + 0x10], bl
; X64:    add rsp, 0x78
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: insert_i128_i1_0>:
; ARM64:    sub sp, sp, #0x100
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldp x1, x4, [x0]
; ARM64:    mov x5, x1
; ARM64:    add x6, x0, #0x10
; ARM64:    ldrb w1, [x6]
; ARM64:    stp x2, x3, [x0]
; ARM64:    add x4, x0, #0x10
; ARM64:    strb w1, [x4]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0x100
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.i128_i1, ptr %0
  %3 = insertvalue %struct.i128_i1 %2, i128 %1, 0
  store %struct.i128_i1 %3, ptr %0
  ret void
}

define void @insert_i128_i1_1(ptr %0, i1 %1) {
; X64-LABEL: insert_i128_i1_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x80
; X64:    mov rax, qword ptr [rdi]
; X64:    mov rcx, qword ptr [rdi + 0x8]
; X64:    movzx edx, byte ptr [rdi + 0x10]
; X64:    mov qword ptr [rdi + 0x8], rcx
; X64:    mov qword ptr [rdi], rax
; X64:    mov byte ptr [rdi + 0x10], sil
; X64:    add rsp, 0x80
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: insert_i128_i1_1>:
; ARM64:    sub sp, sp, #0xf0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldp x2, x3, [x0]
; ARM64:    mov x4, x2
; ARM64:    add x5, x0, #0x10
; ARM64:    ldrb w2, [x5]
; ARM64:    stp x4, x3, [x0]
; ARM64:    add x2, x0, #0x10
; ARM64:    strb w1, [x2]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xf0
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.i128_i1, ptr %0
  %3 = insertvalue %struct.i128_i1 %2, i1 %1, 1
  store %struct.i128_i1 %3, ptr %0
  ret void
}

define void @insert_i128_i1_0_nosalvage(ptr %0, i128 %1) {
; X64-LABEL: insert_i128_i1_0_nosalvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x78
; X64:    mov rax, qword ptr [rdi]
; X64:    mov rcx, qword ptr [rdi + 0x8]
; X64:    movzx ebx, byte ptr [rdi + 0x10]
; X64:    mov r8d, ebx
; X64:    mov qword ptr [rdi + 0x8], rcx
; X64:    mov qword ptr [rdi], rax
; X64:    mov byte ptr [rdi + 0x10], bl
; X64:    mov qword ptr [rdi + 0x8], rdx
; X64:    mov qword ptr [rdi], rsi
; X64:    mov byte ptr [rdi + 0x10], r8b
; X64:    add rsp, 0x78
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: insert_i128_i1_0_nosalvage>:
; ARM64:    sub sp, sp, #0x100
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldp x1, x4, [x0]
; ARM64:    mov x5, x1
; ARM64:    add x6, x0, #0x10
; ARM64:    ldrb w1, [x6]
; ARM64:    mov w6, w1
; ARM64:    stp x5, x4, [x0]
; ARM64:    add x7, x0, #0x10
; ARM64:    strb w1, [x7]
; ARM64:    stp x2, x3, [x0]
; ARM64:    add x1, x0, #0x10
; ARM64:    strb w6, [x1]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0x100
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.i128_i1, ptr %0
  %3 = insertvalue %struct.i128_i1 %2, i128 %1, 0
  store %struct.i128_i1 %2, ptr %0
  store %struct.i128_i1 %3, ptr %0
  ret void
}

define void @insert_i128_i1_1_nosalvage(ptr %0, i1 %1) {
; X64-LABEL: insert_i128_i1_1_nosalvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x78
; X64:    mov rax, qword ptr [rdi]
; X64:    mov rcx, qword ptr [rdi + 0x8]
; X64:    movzx edx, byte ptr [rdi + 0x10]
; X64:    mov rbx, rax
; X64:    mov r8, rcx
; X64:    mov qword ptr [rdi + 0x8], rcx
; X64:    mov qword ptr [rdi], rax
; X64:    mov byte ptr [rdi + 0x10], dl
; X64:    mov qword ptr [rdi + 0x8], r8
; X64:    mov qword ptr [rdi], rbx
; X64:    mov byte ptr [rdi + 0x10], sil
; X64:    add rsp, 0x78
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: insert_i128_i1_1_nosalvage>:
; ARM64:    sub sp, sp, #0xf0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldp x2, x3, [x0]
; ARM64:    mov x4, x2
; ARM64:    add x5, x0, #0x10
; ARM64:    ldrb w2, [x5]
; ARM64:    mov x5, x4
; ARM64:    mov x6, x3
; ARM64:    stp x4, x3, [x0]
; ARM64:    add x7, x0, #0x10
; ARM64:    strb w2, [x7]
; ARM64:    stp x5, x6, [x0]
; ARM64:    add x2, x0, #0x10
; ARM64:    strb w1, [x2]
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xf0
; ARM64:    ret
; ARM64:     ...
entry:
  %2 = load %struct.i128_i1, ptr %0
  %3 = insertvalue %struct.i128_i1 %2, i1 %1, 1
  store %struct.i128_i1 %2, ptr %0
  store %struct.i128_i1 %3, ptr %0
  ret void
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
