; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

%struct.i8_i32 = type { i8, i32 }
%struct.ptr_i32 = type { ptr, i32 }
%struct.f32_ptr = type { float, ptr }
%struct.i128_i1 = type { i128, i1 }

define void @insert_i8_i32_0(ptr %0, i8 %1) {
; X64-LABEL: <insert_i8_i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov byte ptr [rdi], sil
; X64-NEXT:    mov dword ptr [rdi + 0x4], ecx
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_i8_i32_0>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w2, [x0]
; ARM64-NEXT:    ldr w3, [x0, #0x4]
; ARM64-NEXT:    strb w1, [x0]
; ARM64-NEXT:    str w3, [x0, #0x4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.i8_i32, ptr %0
  %3 = insertvalue %struct.i8_i32 %2, i8 %1, 0
  store %struct.i8_i32 %3, ptr %0
  ret void
}

define void @insert_i8_i32_1(ptr %0, i32 %1) {
; X64-LABEL: <insert_i8_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov byte ptr [rdi], al
; X64-NEXT:    mov dword ptr [rdi + 0x4], esi
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_i8_i32_1>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w2, [x0]
; ARM64-NEXT:    ldr w3, [x0, #0x4]
; ARM64-NEXT:    strb w2, [x0]
; ARM64-NEXT:    str w1, [x0, #0x4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.i8_i32, ptr %0
  %3 = insertvalue %struct.i8_i32 %2, i32 %1, 1
  store %struct.i8_i32 %3, ptr %0
  ret void
}

define void @insert_i8_i32_0_nosalvage(ptr %0, i8 %1) {
; X64-LABEL: <insert_i8_i32_0_nosalvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    mov byte ptr [rdi], al
; X64-NEXT:    mov dword ptr [rdi + 0x4], ecx
; X64-NEXT:    mov byte ptr [rdi], sil
; X64-NEXT:    mov dword ptr [rdi + 0x4], edx
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_i8_i32_0_nosalvage>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w2, [x0]
; ARM64-NEXT:    ldr w3, [x0, #0x4]
; ARM64-NEXT:    mov w4, w3
; ARM64-NEXT:    strb w2, [x0]
; ARM64-NEXT:    str w3, [x0, #0x4]
; ARM64-NEXT:    strb w1, [x0]
; ARM64-NEXT:    str w4, [x0, #0x4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.i8_i32, ptr %0
  %3 = insertvalue %struct.i8_i32 %2, i8 %1, 0
  store %struct.i8_i32 %2, ptr %0
  store %struct.i8_i32 %3, ptr %0
  ret void
}

define void @insert_i8_i32_1_nosalvage(ptr %0, i32 %1) {
; X64-LABEL: <insert_i8_i32_1_nosalvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x50
; X64-NEXT:    movzx eax, byte ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov edx, eax
; X64-NEXT:    mov byte ptr [rdi], al
; X64-NEXT:    mov dword ptr [rdi + 0x4], ecx
; X64-NEXT:    mov byte ptr [rdi], dl
; X64-NEXT:    mov dword ptr [rdi + 0x4], esi
; X64-NEXT:    add rsp, 0x50
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_i8_i32_1_nosalvage>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldrb w2, [x0]
; ARM64-NEXT:    ldr w3, [x0, #0x4]
; ARM64-NEXT:    mov w4, w2
; ARM64-NEXT:    strb w2, [x0]
; ARM64-NEXT:    str w3, [x0, #0x4]
; ARM64-NEXT:    strb w4, [x0]
; ARM64-NEXT:    str w1, [x0, #0x4]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.i8_i32, ptr %0
  %3 = insertvalue %struct.i8_i32 %2, i32 %1, 1
  store %struct.i8_i32 %2, ptr %0
  store %struct.i8_i32 %3, ptr %0
  ret void
}


define void @insert_ptr_i32_0(ptr %0, ptr %1) {
; X64-LABEL: <insert_ptr_i32_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov qword ptr [rdi], rsi
; X64-NEXT:    mov dword ptr [rdi + 0x8], ecx
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_ptr_i32_0>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x2, [x0]
; ARM64-NEXT:    ldr w3, [x0, #0x8]
; ARM64-NEXT:    str x1, [x0]
; ARM64-NEXT:    str w3, [x0, #0x8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.ptr_i32, ptr %0
  %3 = insertvalue %struct.ptr_i32 %2, ptr %1, 0
  store %struct.ptr_i32 %3, ptr %0
  ret void
}

define void @insert_ptr_i32_1(ptr %0, i32 %1) {
; X64-LABEL: <insert_ptr_i32_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov qword ptr [rdi], rax
; X64-NEXT:    mov dword ptr [rdi + 0x8], esi
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_ptr_i32_1>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x2, [x0]
; ARM64-NEXT:    ldr w3, [x0, #0x8]
; ARM64-NEXT:    str x2, [x0]
; ARM64-NEXT:    str w1, [x0, #0x8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.ptr_i32, ptr %0
  %3 = insertvalue %struct.ptr_i32 %2, i32 %1, 1
  store %struct.ptr_i32 %3, ptr %0
  ret void
}

define void @insert_ptr_i32_0_nosalvage(ptr %0, ptr %1) {
; X64-LABEL: <insert_ptr_i32_0_nosalvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov edx, ecx
; X64-NEXT:    mov qword ptr [rdi], rax
; X64-NEXT:    mov dword ptr [rdi + 0x8], ecx
; X64-NEXT:    mov qword ptr [rdi], rsi
; X64-NEXT:    mov dword ptr [rdi + 0x8], edx
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_ptr_i32_0_nosalvage>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x2, [x0]
; ARM64-NEXT:    ldr w3, [x0, #0x8]
; ARM64-NEXT:    mov w4, w3
; ARM64-NEXT:    str x2, [x0]
; ARM64-NEXT:    str w3, [x0, #0x8]
; ARM64-NEXT:    str x1, [x0]
; ARM64-NEXT:    str w4, [x0, #0x8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.ptr_i32, ptr %0
  %3 = insertvalue %struct.ptr_i32 %2, ptr %1, 0
  store %struct.ptr_i32 %2, ptr %0
  store %struct.ptr_i32 %3, ptr %0
  ret void
}

define void @insert_ptr_i32_poison(ptr %0, ptr %1, i32 %2) {
; X64-LABEL: <insert_ptr_i32_poison>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rdi], rsi
; X64-NEXT:    mov dword ptr [rdi + 0x8], edx
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_ptr_i32_poison>:
; ARM64:         sub sp, sp, #0xe0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, #0x0 // =0
; ARM64-NEXT:    str x1, [x0]
; ARM64-NEXT:    str w2, [x0, #0x8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xe0
; ARM64-NEXT:    ret
entry:
  %3 = insertvalue %struct.ptr_i32 poison, ptr %1, 0
  %4 = insertvalue %struct.ptr_i32 %3, i32 %2, 1
  store %struct.ptr_i32 %4, ptr %0
  ret void
}

define ptr @insert_ptr_i32_poison_nosalvage(ptr %0, ptr %1, i32 %2) {
; X64-LABEL: <insert_ptr_i32_poison_nosalvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov qword ptr [rdi], rax
; X64-NEXT:    mov dword ptr [rdi + 0x8], edx
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_ptr_i32_poison_nosalvage>:
; ARM64:         sub sp, sp, #0xe0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x3, x1
; ARM64-NEXT:    mov w4, #0x0 // =0
; ARM64-NEXT:    str x3, [x0]
; ARM64-NEXT:    str w2, [x0, #0x8]
; ARM64-NEXT:    mov x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xe0
; ARM64-NEXT:    ret
entry:
  %3 = insertvalue %struct.ptr_i32 poison, ptr %1, 0
  %4 = insertvalue %struct.ptr_i32 %3, i32 %2, 1
  store %struct.ptr_i32 %4, ptr %0
  ret ptr %1
}

define i32 @insert_ptr_i32_poison_nosalvage1(ptr %0, ptr %1, i32 %2) {
; X64-LABEL: <insert_ptr_i32_poison_nosalvage1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov ecx, edx
; X64-NEXT:    mov qword ptr [rdi], rsi
; X64-NEXT:    mov dword ptr [rdi + 0x8], ecx
; X64-NEXT:    mov eax, edx
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_ptr_i32_poison_nosalvage1>:
; ARM64:         sub sp, sp, #0xe0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w3, #0x0 // =0
; ARM64-NEXT:    mov w4, w2
; ARM64-NEXT:    str x1, [x0]
; ARM64-NEXT:    str w4, [x0, #0x8]
; ARM64-NEXT:    mov w0, w2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xe0
; ARM64-NEXT:    ret
entry:
  %3 = insertvalue %struct.ptr_i32 poison, ptr %1, 0
  %4 = insertvalue %struct.ptr_i32 %3, i32 %2, 1
  store %struct.ptr_i32 %4, ptr %0
  ret i32 %2
}

define void @insert_ptr_i32_1_nosalvage(ptr %0, i32 %1) {
; X64-LABEL: <insert_ptr_i32_1_nosalvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov rdx, rax
; X64-NEXT:    mov qword ptr [rdi], rax
; X64-NEXT:    mov dword ptr [rdi + 0x8], ecx
; X64-NEXT:    mov qword ptr [rdi], rdx
; X64-NEXT:    mov dword ptr [rdi + 0x8], esi
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_ptr_i32_1_nosalvage>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x2, [x0]
; ARM64-NEXT:    ldr w3, [x0, #0x8]
; ARM64-NEXT:    mov x4, x2
; ARM64-NEXT:    str x2, [x0]
; ARM64-NEXT:    str w3, [x0, #0x8]
; ARM64-NEXT:    str x4, [x0]
; ARM64-NEXT:    str w1, [x0, #0x8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.ptr_i32, ptr %0
  %3 = insertvalue %struct.ptr_i32 %2, i32 %1, 1
  store %struct.ptr_i32 %2, ptr %0
  store %struct.ptr_i32 %3, ptr %0
  ret void
}


define void @insert_f32_ptr_0(ptr %0, float %1) {
; X64-LABEL: <insert_f32_ptr_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movss xmm1, dword ptr [rdi]
; X64-NEXT:    mov rax, qword ptr [rdi + 0x8]
; X64-NEXT:    movss dword ptr [rdi], xmm0
; X64-NEXT:    mov qword ptr [rdi + 0x8], rax
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_f32_ptr_0>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr s1, [x0]
; ARM64-NEXT:    ldr x1, [x0, #0x8]
; ARM64-NEXT:    str s0, [x0]
; ARM64-NEXT:    str x1, [x0, #0x8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.f32_ptr, ptr %0
  %3 = insertvalue %struct.f32_ptr %2, float %1, 0
  store %struct.f32_ptr %3, ptr %0
  ret void
}

define void @insert_f32_ptr_1(ptr %0, ptr %1) {
; X64-LABEL: <insert_f32_ptr_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movss xmm0, dword ptr [rdi]
; X64-NEXT:    mov rax, qword ptr [rdi + 0x8]
; X64-NEXT:    movss dword ptr [rdi], xmm0
; X64-NEXT:    mov qword ptr [rdi + 0x8], rsi
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_f32_ptr_1>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr s0, [x0]
; ARM64-NEXT:    ldr x2, [x0, #0x8]
; ARM64-NEXT:    str s0, [x0]
; ARM64-NEXT:    str x1, [x0, #0x8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.f32_ptr, ptr %0
  %3 = insertvalue %struct.f32_ptr %2, ptr %1, 1
  store %struct.f32_ptr %3, ptr %0
  ret void
}

define void @insert_f32_ptr_0_nosalvage(ptr %0, float %1) {
; X64-LABEL: <insert_f32_ptr_0_nosalvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movss xmm1, dword ptr [rdi]
; X64-NEXT:    mov rax, qword ptr [rdi + 0x8]
; X64-NEXT:    mov rcx, rax
; X64-NEXT:    movss dword ptr [rdi], xmm1
; X64-NEXT:    mov qword ptr [rdi + 0x8], rax
; X64-NEXT:    movss dword ptr [rdi], xmm0
; X64-NEXT:    mov qword ptr [rdi + 0x8], rcx
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_f32_ptr_0_nosalvage>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr s1, [x0]
; ARM64-NEXT:    ldr x1, [x0, #0x8]
; ARM64-NEXT:    mov x2, x1
; ARM64-NEXT:    str s1, [x0]
; ARM64-NEXT:    str x1, [x0, #0x8]
; ARM64-NEXT:    str s0, [x0]
; ARM64-NEXT:    str x2, [x0, #0x8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.f32_ptr, ptr %0
  %3 = insertvalue %struct.f32_ptr %2, float %1, 0
  store %struct.f32_ptr %2, ptr %0
  store %struct.f32_ptr %3, ptr %0
  ret void
}

define void @insert_f32_ptr_1_nosalvage(ptr %0, ptr %1) {
; X64-LABEL: <insert_f32_ptr_1_nosalvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x60
; X64-NEXT:    movss xmm0, dword ptr [rdi]
; X64-NEXT:    mov rax, qword ptr [rdi + 0x8]
; X64-NEXT:    movapd xmm1, xmm0
; X64-NEXT:    movss dword ptr [rdi], xmm0
; X64-NEXT:    mov qword ptr [rdi + 0x8], rax
; X64-NEXT:    movss dword ptr [rdi], xmm1
; X64-NEXT:    mov qword ptr [rdi + 0x8], rsi
; X64-NEXT:    add rsp, 0x60
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_f32_ptr_1_nosalvage>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr s0, [x0]
; ARM64-NEXT:    ldr x2, [x0, #0x8]
; ARM64-NEXT:    mov v1.16b, v0.16b
; ARM64-NEXT:    str s0, [x0]
; ARM64-NEXT:    str x2, [x0, #0x8]
; ARM64-NEXT:    str s1, [x0]
; ARM64-NEXT:    str x1, [x0, #0x8]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.f32_ptr, ptr %0
  %3 = insertvalue %struct.f32_ptr %2, ptr %1, 1
  store %struct.f32_ptr %2, ptr %0
  store %struct.f32_ptr %3, ptr %0
  ret void
}


define void @insert_i128_i1_0(ptr %0, i128 %1) {
; X64-LABEL: <insert_i128_i1_0>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x78
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov rcx, qword ptr [rdi + 0x8]
; X64-NEXT:    movzx ebx, byte ptr [rdi + 0x10]
; X64-NEXT:    mov qword ptr [rdi], rsi
; X64-NEXT:    mov qword ptr [rdi + 0x8], rdx
; X64-NEXT:    mov byte ptr [rdi + 0x10], bl
; X64-NEXT:    add rsp, 0x78
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_i128_i1_0>:
; ARM64:         sub sp, sp, #0x100
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x1, [x0]
; ARM64-NEXT:    ldr x4, [x0, #0x8]
; ARM64-NEXT:    ldrb w5, [x0, #0x10]
; ARM64-NEXT:    str x2, [x0]
; ARM64-NEXT:    str x3, [x0, #0x8]
; ARM64-NEXT:    strb w5, [x0, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0x100
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.i128_i1, ptr %0
  %3 = insertvalue %struct.i128_i1 %2, i128 %1, 0
  store %struct.i128_i1 %3, ptr %0
  ret void
}

define void @insert_i128_i1_1(ptr %0, i1 %1) {
; X64-LABEL: <insert_i128_i1_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x80
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov rcx, qword ptr [rdi + 0x8]
; X64-NEXT:    movzx edx, byte ptr [rdi + 0x10]
; X64-NEXT:    mov qword ptr [rdi], rax
; X64-NEXT:    mov qword ptr [rdi + 0x8], rcx
; X64-NEXT:    mov byte ptr [rdi + 0x10], sil
; X64-NEXT:    add rsp, 0x80
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_i128_i1_1>:
; ARM64:         sub sp, sp, #0xf0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x2, [x0]
; ARM64-NEXT:    ldr x3, [x0, #0x8]
; ARM64-NEXT:    ldrb w4, [x0, #0x10]
; ARM64-NEXT:    str x2, [x0]
; ARM64-NEXT:    str x3, [x0, #0x8]
; ARM64-NEXT:    strb w1, [x0, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xf0
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.i128_i1, ptr %0
  %3 = insertvalue %struct.i128_i1 %2, i1 %1, 1
  store %struct.i128_i1 %3, ptr %0
  ret void
}

define void @insert_i128_i1_0_nosalvage(ptr %0, i128 %1) {
; X64-LABEL: <insert_i128_i1_0_nosalvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x78
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov rcx, qword ptr [rdi + 0x8]
; X64-NEXT:    movzx ebx, byte ptr [rdi + 0x10]
; X64-NEXT:    mov r8d, ebx
; X64-NEXT:    mov qword ptr [rdi], rax
; X64-NEXT:    mov qword ptr [rdi + 0x8], rcx
; X64-NEXT:    mov byte ptr [rdi + 0x10], bl
; X64-NEXT:    mov qword ptr [rdi], rsi
; X64-NEXT:    mov qword ptr [rdi + 0x8], rdx
; X64-NEXT:    mov byte ptr [rdi + 0x10], r8b
; X64-NEXT:    add rsp, 0x78
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_i128_i1_0_nosalvage>:
; ARM64:         sub sp, sp, #0x100
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x1, [x0]
; ARM64-NEXT:    ldr x4, [x0, #0x8]
; ARM64-NEXT:    ldrb w5, [x0, #0x10]
; ARM64-NEXT:    mov w6, w5
; ARM64-NEXT:    str x1, [x0]
; ARM64-NEXT:    str x4, [x0, #0x8]
; ARM64-NEXT:    strb w5, [x0, #0x10]
; ARM64-NEXT:    str x2, [x0]
; ARM64-NEXT:    str x3, [x0, #0x8]
; ARM64-NEXT:    strb w6, [x0, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0x100
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.i128_i1, ptr %0
  %3 = insertvalue %struct.i128_i1 %2, i128 %1, 0
  store %struct.i128_i1 %2, ptr %0
  store %struct.i128_i1 %3, ptr %0
  ret void
}

define void @insert_i128_i1_1_nosalvage(ptr %0, i1 %1) {
; X64-LABEL: <insert_i128_i1_1_nosalvage>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x78
; X64-NEXT:    mov rax, qword ptr [rdi]
; X64-NEXT:    mov rcx, qword ptr [rdi + 0x8]
; X64-NEXT:    movzx edx, byte ptr [rdi + 0x10]
; X64-NEXT:    mov rbx, rax
; X64-NEXT:    mov r8, rcx
; X64-NEXT:    mov qword ptr [rdi], rax
; X64-NEXT:    mov qword ptr [rdi + 0x8], rcx
; X64-NEXT:    mov byte ptr [rdi + 0x10], dl
; X64-NEXT:    mov qword ptr [rdi], rbx
; X64-NEXT:    mov qword ptr [rdi + 0x8], r8
; X64-NEXT:    mov byte ptr [rdi + 0x10], sil
; X64-NEXT:    add rsp, 0x78
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_i128_i1_1_nosalvage>:
; ARM64:         sub sp, sp, #0xf0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr x2, [x0]
; ARM64-NEXT:    ldr x3, [x0, #0x8]
; ARM64-NEXT:    ldrb w4, [x0, #0x10]
; ARM64-NEXT:    mov x5, x2
; ARM64-NEXT:    mov x6, x3
; ARM64-NEXT:    str x2, [x0]
; ARM64-NEXT:    str x3, [x0, #0x8]
; ARM64-NEXT:    strb w4, [x0, #0x10]
; ARM64-NEXT:    str x5, [x0]
; ARM64-NEXT:    str x6, [x0, #0x8]
; ARM64-NEXT:    strb w1, [x0, #0x10]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xf0
; ARM64-NEXT:    ret
entry:
  %2 = load %struct.i128_i1, ptr %0
  %3 = insertvalue %struct.i128_i1 %2, i1 %1, 1
  store %struct.i128_i1 %2, ptr %0
  store %struct.i128_i1 %3, ptr %0
  ret void
}

define void @insert_nested_1(ptr %p, i32 %v) {
; X64-LABEL: <insert_nested_1>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x58
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov edx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov ebx, dword ptr [rdi + 0xc]
; X64-NEXT:    mov dword ptr [rdi], esi
; X64-NEXT:    mov dword ptr [rdi + 0x4], ecx
; X64-NEXT:    mov dword ptr [rdi + 0x8], edx
; X64-NEXT:    mov dword ptr [rdi + 0xc], ebx
; X64-NEXT:    add rsp, 0x58
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_nested_1>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr w2, [x0]
; ARM64-NEXT:    ldr w3, [x0, #0x4]
; ARM64-NEXT:    ldr w4, [x0, #0x8]
; ARM64-NEXT:    ldr w5, [x0, #0xc]
; ARM64-NEXT:    str w1, [x0]
; ARM64-NEXT:    str w3, [x0, #0x4]
; ARM64-NEXT:    str w4, [x0, #0x8]
; ARM64-NEXT:    str w5, [x0, #0xc]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %l = load {{i32, i32}, {i32, i32}}, ptr %p
  %iv = insertvalue {{i32, i32}, {i32, i32}} %l, i32 %v, 0, 0
  store {{i32, i32}, {i32, i32}} %iv, ptr %p
  ret void
}

define void @insert_nested_2(ptr %p, i32 %v) {
; X64-LABEL: <insert_nested_2>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x58
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov edx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov ebx, dword ptr [rdi + 0xc]
; X64-NEXT:    mov dword ptr [rdi], eax
; X64-NEXT:    mov dword ptr [rdi + 0x4], esi
; X64-NEXT:    mov dword ptr [rdi + 0x8], edx
; X64-NEXT:    mov dword ptr [rdi + 0xc], ebx
; X64-NEXT:    add rsp, 0x58
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_nested_2>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr w2, [x0]
; ARM64-NEXT:    ldr w3, [x0, #0x4]
; ARM64-NEXT:    ldr w4, [x0, #0x8]
; ARM64-NEXT:    ldr w5, [x0, #0xc]
; ARM64-NEXT:    str w2, [x0]
; ARM64-NEXT:    str w1, [x0, #0x4]
; ARM64-NEXT:    str w4, [x0, #0x8]
; ARM64-NEXT:    str w5, [x0, #0xc]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %l = load {{i32, i32}, {i32, i32}}, ptr %p
  %iv = insertvalue {{i32, i32}, {i32, i32}} %l, i32 %v, 0, 1
  store {{i32, i32}, {i32, i32}} %iv, ptr %p
  ret void
}

define void @insert_nested_3(ptr %p, i32 %v) {
; X64-LABEL: <insert_nested_3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x58
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov edx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov ebx, dword ptr [rdi + 0xc]
; X64-NEXT:    mov dword ptr [rdi], eax
; X64-NEXT:    mov dword ptr [rdi + 0x4], ecx
; X64-NEXT:    mov dword ptr [rdi + 0x8], esi
; X64-NEXT:    mov dword ptr [rdi + 0xc], ebx
; X64-NEXT:    add rsp, 0x58
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_nested_3>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr w2, [x0]
; ARM64-NEXT:    ldr w3, [x0, #0x4]
; ARM64-NEXT:    ldr w4, [x0, #0x8]
; ARM64-NEXT:    ldr w5, [x0, #0xc]
; ARM64-NEXT:    str w2, [x0]
; ARM64-NEXT:    str w3, [x0, #0x4]
; ARM64-NEXT:    str w1, [x0, #0x8]
; ARM64-NEXT:    str w5, [x0, #0xc]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %l = load {{i32, i32}, {i32, i32}}, ptr %p
  %iv = insertvalue {{i32, i32}, {i32, i32}} %l, i32 %v, 1, 0
  store {{i32, i32}, {i32, i32}} %iv, ptr %p
  ret void
}

define void @insert_nested_4(ptr %p, i32 %v) {
; X64-LABEL: <insert_nested_4>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x58
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov edx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov ebx, dword ptr [rdi + 0xc]
; X64-NEXT:    mov dword ptr [rdi], eax
; X64-NEXT:    mov dword ptr [rdi + 0x4], ecx
; X64-NEXT:    mov dword ptr [rdi + 0x8], edx
; X64-NEXT:    mov dword ptr [rdi + 0xc], esi
; X64-NEXT:    add rsp, 0x58
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_nested_4>:
; ARM64:         sub sp, sp, #0xd0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr w2, [x0]
; ARM64-NEXT:    ldr w3, [x0, #0x4]
; ARM64-NEXT:    ldr w4, [x0, #0x8]
; ARM64-NEXT:    ldr w5, [x0, #0xc]
; ARM64-NEXT:    str w2, [x0]
; ARM64-NEXT:    str w3, [x0, #0x4]
; ARM64-NEXT:    str w4, [x0, #0x8]
; ARM64-NEXT:    str w1, [x0, #0xc]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xd0
; ARM64-NEXT:    ret
  %l = load {{i32, i32}, {i32, i32}}, ptr %p
  %iv = insertvalue {{i32, i32}, {i32, i32}} %l, i32 %v, 1, 1
  store {{i32, i32}, {i32, i32}} %iv, ptr %p
  ret void
}

define void @insert_nested_5(ptr %p, {i32, i32} %v) {
; X64-LABEL: <insert_nested_5>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    nop dword ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x78
; X64-NEXT:    mov eax, dword ptr [rdi]
; X64-NEXT:    mov ecx, dword ptr [rdi + 0x4]
; X64-NEXT:    mov ebx, dword ptr [rdi + 0x8]
; X64-NEXT:    mov r8d, dword ptr [rdi + 0xc]
; X64-NEXT:    mov r9d, dword ptr [rdi + 0x10]
; X64-NEXT:    mov r10d, dword ptr [rdi + 0x14]
; X64-NEXT:    mov r11d, dword ptr [rdi + 0x18]
; X64-NEXT:    mov dword ptr [rdi], eax
; X64-NEXT:    mov dword ptr [rdi + 0x4], ecx
; X64-NEXT:    mov dword ptr [rdi + 0x8], ebx
; X64-NEXT:    mov dword ptr [rdi + 0xc], r8d
; X64-NEXT:    mov dword ptr [rdi + 0x10], esi
; X64-NEXT:    mov dword ptr [rdi + 0x14], edx
; X64-NEXT:    mov dword ptr [rdi + 0x18], r11d
; X64-NEXT:    add rsp, 0x78
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_nested_5>:
; ARM64:         sub sp, sp, #0xf0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    ldr w3, [x0]
; ARM64-NEXT:    ldr w4, [x0, #0x4]
; ARM64-NEXT:    ldr w5, [x0, #0x8]
; ARM64-NEXT:    ldr w6, [x0, #0xc]
; ARM64-NEXT:    ldr w7, [x0, #0x10]
; ARM64-NEXT:    ldr w8, [x0, #0x14]
; ARM64-NEXT:    ldr w9, [x0, #0x18]
; ARM64-NEXT:    str w3, [x0]
; ARM64-NEXT:    str w4, [x0, #0x4]
; ARM64-NEXT:    str w5, [x0, #0x8]
; ARM64-NEXT:    str w6, [x0, #0xc]
; ARM64-NEXT:    str w1, [x0, #0x10]
; ARM64-NEXT:    str w2, [x0, #0x14]
; ARM64-NEXT:    str w9, [x0, #0x18]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xf0
; ARM64-NEXT:    ret
  %l = load {{i32, i32}, {[2 x {i32, i32}], i32}}, ptr %p
  %iv = insertvalue {{i32, i32}, {[2 x {i32, i32}], i32}} %l, {i32, i32} %v, 1, 0, 1
  store {{i32, i32}, {[2 x {i32, i32}], i32}} %iv, ptr %p
  ret void
}

; Note: legalization converts this to a sequence of insertvalue instructions.
define void @insert_many_nested() {
; X64-LABEL: <insert_many_nested>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    push r13
; X64-NEXT:    push r14
; X64-NEXT:    push r15
; X64-NEXT:    sub rsp, 0x378
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea rax, [rax + 0x4]
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    lea rcx, [rcx + 0x4]
; X64-NEXT:    mov rdx, 0x1
; X64-NEXT:    mov ebx, 0x0
; X64-NEXT:    mov esi, 0x0
; X64-NEXT:    mov rdi, 0x9
; X64-NEXT:    mov ebx, 0x0
; X64-NEXT:    lea rbx, [rbx + 0x4]
; X64-NEXT:    mov rsi, 0x9
; X64-NEXT:    imul rbx, rsi
; X64-NEXT:    mov rsi, 0x1
; X64-NEXT:    mov r8d, 0x0
; X64-NEXT:    mov r9d, 0x0
; X64-NEXT:    mov r10, 0x9
; X64-NEXT:    mov r8d, 0x0
; X64-NEXT:    mov r9d, 0x0
; X64-NEXT:    mov r11d, 0x0
; X64-NEXT:    mov r8d, 0x0
; X64-NEXT:    mov r9d, 0x0
; X64-NEXT:    mov r11d, 0x0
; X64-NEXT:    mov r12d, 0x0
; X64-NEXT:    mov r13d, 0x0
; X64-NEXT:    mov r14d, 0x0
; X64-NEXT:    mov r15d, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x38], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0xf0], rcx
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x100], rdx
; X64-NEXT:    mov edx, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0xd8], rbx
; X64-NEXT:    mov ebx, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0xe8], rsi
; X64-NEXT:    mov esi, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0xf8], rdi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x1e0], r8
; X64-NEXT:    mov r8, qword ptr [rbp - 0x38]
; X64-NEXT:    mov r9, qword ptr [rbp - 0x1e0]
; X64-NEXT:    mov qword ptr [rbp - 0x170], r9
; X64-NEXT:    mov r9d, 0x133ee23
; X64-NEXT:    mov r11, qword ptr [rbp - 0x170]
; X64-NEXT:    mov qword ptr [rbp - 0xe0], r10
; X64-NEXT:    mov r10d, 0x2
; X64-NEXT:    mov r12d, 0xe
; X64-NEXT:    mov r13d, 0x0
; X64-NEXT:    mov r14d, 0x0
; X64-NEXT:    mov r15, qword ptr [rbp - 0x100]
; X64-NEXT:    mov qword ptr [rbp - 0x1e0], r11
; X64-NEXT:    mov r11, qword ptr [rbp - 0xf8]
; X64-NEXT:    mov byte ptr [rbp - 0x1c0], r12b
; X64-NEXT:    mov r12, qword ptr [rbp - 0xf0]
; X64-NEXT:    mov byte ptr [rbp - 0x1b8], r13b
; X64-NEXT:    mov r13, qword ptr [rbp - 0xe8]
; X64-NEXT:    mov byte ptr [rbp - 0x1b0], r14b
; X64-NEXT:    mov r14, qword ptr [rbp - 0xe0]
; X64-NEXT:    mov qword ptr [rbp - 0x1a8], r15
; X64-NEXT:    mov r15, qword ptr [rbp - 0xd8]
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x1c0]
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x1b8]
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x1b0]
; X64-NEXT:    mov rax, qword ptr [rbp - 0x1a8]
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    lea rax, [rax + 0x4]
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    lea rcx, [rcx + 0x4]
; X64-NEXT:    mov rdx, 0x1
; X64-NEXT:    mov ebx, 0x0
; X64-NEXT:    mov esi, 0x0
; X64-NEXT:    mov rdi, 0x9
; X64-NEXT:    mov ebx, 0x0
; X64-NEXT:    lea rbx, [rbx + 0x4]
; X64-NEXT:    mov rsi, 0x9
; X64-NEXT:    imul rbx, rsi
; X64-NEXT:    mov rsi, 0x1
; X64-NEXT:    mov r8d, 0x0
; X64-NEXT:    mov r9d, 0x0
; X64-NEXT:    mov r10, 0x9
; X64-NEXT:    mov r8d, 0x0
; X64-NEXT:    lea r8, [r8 + 0x4]
; X64-NEXT:    mov r9, 0x51
; X64-NEXT:    imul r8, r9
; X64-NEXT:    mov r9, 0x1
; X64-NEXT:    mov r11d, 0x0
; X64-NEXT:    mov r12d, 0x0
; X64-NEXT:    mov r13, 0x9
; X64-NEXT:    mov r11d, 0x0
; X64-NEXT:    mov r12d, 0x0
; X64-NEXT:    mov r14d, 0x0
; X64-NEXT:    mov r15d, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x40], rax
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x240], rcx
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x2a0], rdx
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x240]
; X64-NEXT:    mov r11, qword ptr [rbp - 0x2a0]
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov r12d, 0x0
; X64-NEXT:    mov r14d, 0x0
; X64-NEXT:    mov r15d, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x228], rbx
; X64-NEXT:    mov ebx, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x238], rsi
; X64-NEXT:    mov esi, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x248], rdi
; X64-NEXT:    mov edi, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x210], r8
; X64-NEXT:    mov r8d, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x220], r9
; X64-NEXT:    mov r9d, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x230], r10
; X64-NEXT:    mov r10d, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x250], r11
; X64-NEXT:    mov r11d, 0x0
; X64-NEXT:    mov dword ptr [rbp - 0x310], r12d
; X64-NEXT:    mov r12d, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x218], r13
; X64-NEXT:    mov r13d, 0x0
; X64-NEXT:    mov byte ptr [rbp - 0x308], r14b
; X64-NEXT:    mov r14d, 0x0
; X64-NEXT:    mov byte ptr [rbp - 0x300], r15b
; X64-NEXT:    mov r15d, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x3a0], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x40]
; X64-NEXT:    mov qword ptr [rbp - 0x318], rcx
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x310]
; X64-NEXT:    mov qword ptr [rbp - 0x240], rdx
; X64-NEXT:    movzx edx, byte ptr [rbp - 0x308]
; X64-NEXT:    mov byte ptr [rbp - 0x2f8], bl
; X64-NEXT:    movzx ebx, byte ptr [rbp - 0x300]
; X64-NEXT:    mov byte ptr [rbp - 0x2f0], sil
; X64-NEXT:    movzx esi, byte ptr [rbp - 0x2f8]
; X64-NEXT:    mov qword ptr [rbp - 0x2e8], rdi
; X64-NEXT:    movzx edi, byte ptr [rbp - 0x2f0]
; X64-NEXT:    mov qword ptr [rbp - 0x2e0], r8
; X64-NEXT:    mov r8, qword ptr [rbp - 0x2e8]
; X64-NEXT:    mov qword ptr [rbp - 0x2d8], r9
; X64-NEXT:    mov r9, qword ptr [rbp - 0x2e0]
; X64-NEXT:    mov qword ptr [rbp - 0x2d0], r10
; X64-NEXT:    mov r10, qword ptr [rbp - 0x2d8]
; X64-NEXT:    mov qword ptr [rbp - 0x2c8], r11
; X64-NEXT:    mov r11, qword ptr [rbp - 0x2d0]
; X64-NEXT:    mov qword ptr [rbp - 0x2c0], r12
; X64-NEXT:    mov r12, qword ptr [rbp - 0x2c8]
; X64-NEXT:    mov qword ptr [rbp - 0x2b8], r13
; X64-NEXT:    mov r13, qword ptr [rbp - 0x2c0]
; X64-NEXT:    mov qword ptr [rbp - 0x2b0], r14
; X64-NEXT:    mov r14, qword ptr [rbp - 0x2b8]
; X64-NEXT:    mov qword ptr [rbp - 0x2a8], r15
; X64-NEXT:    mov r15, qword ptr [rbp - 0x2b0]
; X64-NEXT:    mov qword ptr [rbp - 0x398], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x2a8]
; X64-NEXT:    mov dword ptr [rbp - 0x390], ecx
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x3a0]
; X64-NEXT:    mov byte ptr [rbp - 0x388], dl
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x398]
; X64-NEXT:    mov byte ptr [rbp - 0x380], bl
; X64-NEXT:    mov ebx, 0x133ee23
; X64-NEXT:    mov byte ptr [rbp - 0x378], sil
; X64-NEXT:    movzx esi, byte ptr [rbp - 0x388]
; X64-NEXT:    mov byte ptr [rbp - 0x370], dil
; X64-NEXT:    movzx edi, byte ptr [rbp - 0x380]
; X64-NEXT:    mov qword ptr [rbp - 0x368], r8
; X64-NEXT:    movzx r8d, byte ptr [rbp - 0x378]
; X64-NEXT:    mov qword ptr [rbp - 0x360], r9
; X64-NEXT:    movzx r9d, byte ptr [rbp - 0x370]
; X64-NEXT:    mov qword ptr [rbp - 0x358], r10
; X64-NEXT:    mov r10, qword ptr [rbp - 0x368]
; X64-NEXT:    mov qword ptr [rbp - 0x350], r11
; X64-NEXT:    mov r11, qword ptr [rbp - 0x360]
; X64-NEXT:    mov qword ptr [rbp - 0x348], r12
; X64-NEXT:    mov r12, qword ptr [rbp - 0x358]
; X64-NEXT:    mov qword ptr [rbp - 0x340], r13
; X64-NEXT:    mov r13, qword ptr [rbp - 0x350]
; X64-NEXT:    mov qword ptr [rbp - 0x338], r14
; X64-NEXT:    mov r14, qword ptr [rbp - 0x348]
; X64-NEXT:    mov qword ptr [rbp - 0x330], r15
; X64-NEXT:    mov r15, qword ptr [rbp - 0x340]
; X64-NEXT:    mov qword ptr [rbp - 0x328], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x338]
; X64-NEXT:    mov qword ptr [rbp - 0x320], rcx
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x330]
; X64-NEXT:    mov qword ptr [rbp - 0x318], rdx
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x328]
; X64-NEXT:    mov dword ptr [rbp - 0x310], ebx
; X64-NEXT:    mov rbx, qword ptr [rbp - 0x320]
; X64-NEXT:    mov byte ptr [rbp - 0x308], sil
; X64-NEXT:    mov rsi, qword ptr [rbp - 0x318]
; X64-NEXT:    mov byte ptr [rbp - 0x300], dil
; X64-NEXT:    mov edi, dword ptr [rbp - 0x310]
; X64-NEXT:    mov byte ptr [rbp - 0x2f8], r8b
; X64-NEXT:    mov r8d, 0x3
; X64-NEXT:    mov byte ptr [rbp - 0x2f0], r9b
; X64-NEXT:    movzx r9d, byte ptr [rbp - 0x300]
; X64-NEXT:    mov qword ptr [rbp - 0x2e8], r10
; X64-NEXT:    movzx r10d, byte ptr [rbp - 0x2f8]
; X64-NEXT:    mov qword ptr [rbp - 0x2e0], r11
; X64-NEXT:    movzx r11d, byte ptr [rbp - 0x2f0]
; X64-NEXT:    mov qword ptr [rbp - 0x2d8], r12
; X64-NEXT:    mov r12, qword ptr [rbp - 0x2e8]
; X64-NEXT:    mov qword ptr [rbp - 0x2d0], r13
; X64-NEXT:    mov r13, qword ptr [rbp - 0x2e0]
; X64-NEXT:    mov qword ptr [rbp - 0x2c8], r14
; X64-NEXT:    mov r14, qword ptr [rbp - 0x2d8]
; X64-NEXT:    mov qword ptr [rbp - 0x2c0], r15
; X64-NEXT:    mov r15, qword ptr [rbp - 0x2d0]
; X64-NEXT:    mov qword ptr [rbp - 0x2b8], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x2c8]
; X64-NEXT:    mov qword ptr [rbp - 0x2b0], rcx
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x2c0]
; X64-NEXT:    mov qword ptr [rbp - 0x2a8], rdx
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x2b8]
; X64-NEXT:    mov qword ptr [rbp - 0x3a0], rbx
; X64-NEXT:    mov rbx, qword ptr [rbp - 0x2b0]
; X64-NEXT:    mov qword ptr [rbp - 0x398], rsi
; X64-NEXT:    mov rsi, qword ptr [rbp - 0x2a8]
; X64-NEXT:    mov dword ptr [rbp - 0x390], edi
; X64-NEXT:    mov rdi, qword ptr [rbp - 0x3a0]
; X64-NEXT:    mov byte ptr [rbp - 0x388], r8b
; X64-NEXT:    mov r8, qword ptr [rbp - 0x398]
; X64-NEXT:    mov byte ptr [rbp - 0x380], r9b
; X64-NEXT:    mov r9d, dword ptr [rbp - 0x390]
; X64-NEXT:    mov byte ptr [rbp - 0x378], r10b
; X64-NEXT:    movzx r10d, byte ptr [rbp - 0x388]
; X64-NEXT:    mov byte ptr [rbp - 0x370], r11b
; X64-NEXT:    mov r11d, 0x9
; X64-NEXT:    mov qword ptr [rbp - 0x368], r12
; X64-NEXT:    movzx r12d, byte ptr [rbp - 0x378]
; X64-NEXT:    mov qword ptr [rbp - 0x360], r13
; X64-NEXT:    movzx r13d, byte ptr [rbp - 0x370]
; X64-NEXT:    mov qword ptr [rbp - 0x358], r14
; X64-NEXT:    mov r14, qword ptr [rbp - 0x368]
; X64-NEXT:    mov qword ptr [rbp - 0x350], r15
; X64-NEXT:    mov r15, qword ptr [rbp - 0x360]
; X64-NEXT:    mov qword ptr [rbp - 0x348], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x358]
; X64-NEXT:    mov qword ptr [rbp - 0x340], rcx
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x350]
; X64-NEXT:    mov qword ptr [rbp - 0x338], rdx
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x348]
; X64-NEXT:    mov qword ptr [rbp - 0x330], rbx
; X64-NEXT:    mov rbx, qword ptr [rbp - 0x340]
; X64-NEXT:    mov qword ptr [rbp - 0x328], rsi
; X64-NEXT:    mov rsi, qword ptr [rbp - 0x338]
; X64-NEXT:    mov qword ptr [rbp - 0x320], rdi
; X64-NEXT:    mov rdi, qword ptr [rbp - 0x330]
; X64-NEXT:    mov qword ptr [rbp - 0x318], r8
; X64-NEXT:    mov r8, qword ptr [rbp - 0x328]
; X64-NEXT:    mov dword ptr [rbp - 0x310], r9d
; X64-NEXT:    mov r9, qword ptr [rbp - 0x320]
; X64-NEXT:    mov byte ptr [rbp - 0x308], r10b
; X64-NEXT:    mov r10, qword ptr [rbp - 0x318]
; X64-NEXT:    mov byte ptr [rbp - 0x300], r11b
; X64-NEXT:    mov r11d, dword ptr [rbp - 0x310]
; X64-NEXT:    mov byte ptr [rbp - 0x2f8], r12b
; X64-NEXT:    movzx r12d, byte ptr [rbp - 0x308]
; X64-NEXT:    mov byte ptr [rbp - 0x2f0], r13b
; X64-NEXT:    movzx r13d, byte ptr [rbp - 0x300]
; X64-NEXT:    mov qword ptr [rbp - 0x2e8], r14
; X64-NEXT:    mov r14d, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x2e0], r15
; X64-NEXT:    movzx r15d, byte ptr [rbp - 0x2f0]
; X64-NEXT:    mov qword ptr [rbp - 0x2d8], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x2e8]
; X64-NEXT:    mov qword ptr [rbp - 0x2d0], rcx
; X64-NEXT:    mov rcx, qword ptr [rbp - 0x2e0]
; X64-NEXT:    mov qword ptr [rbp - 0x2c8], rdx
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x2d8]
; X64-NEXT:    mov qword ptr [rbp - 0x2c0], rbx
; X64-NEXT:    mov rbx, qword ptr [rbp - 0x2d0]
; X64-NEXT:    mov qword ptr [rbp - 0x2b8], rsi
; X64-NEXT:    mov rsi, qword ptr [rbp - 0x2c8]
; X64-NEXT:    mov qword ptr [rbp - 0x2b0], rdi
; X64-NEXT:    mov rdi, qword ptr [rbp - 0x2c0]
; X64-NEXT:    mov qword ptr [rbp - 0x2a8], r8
; X64-NEXT:    mov r8, qword ptr [rbp - 0x2b8]
; X64-NEXT:    mov qword ptr [rbp - 0x3a0], r9
; X64-NEXT:    mov r9, qword ptr [rbp - 0x2b0]
; X64-NEXT:    mov qword ptr [rbp - 0x398], r10
; X64-NEXT:    mov r10, qword ptr [rbp - 0x2a8]
; X64-NEXT:    mov dword ptr [rbp - 0x390], r11d
; X64-NEXT:    mov r11, qword ptr [rbp - 0x3a0]
; X64-NEXT:    mov byte ptr [rbp - 0x388], r12b
; X64-NEXT:    mov r12, qword ptr [rbp - 0x398]
; X64-NEXT:    mov byte ptr [rbp - 0x380], r13b
; X64-NEXT:    mov r13d, dword ptr [rbp - 0x390]
; X64-NEXT:    mov byte ptr [rbp - 0x378], r14b
; X64-NEXT:    movzx r14d, byte ptr [rbp - 0x388]
; X64-NEXT:    mov byte ptr [rbp - 0x370], r15b
; X64-NEXT:    movzx r15d, byte ptr [rbp - 0x380]
; X64-NEXT:    mov qword ptr [rbp - 0x368], rax
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x378]
; X64-NEXT:    mov qword ptr [rbp - 0x360], rcx
; X64-NEXT:    mov ecx, 0x0
; X64-NEXT:    mov qword ptr [rbp - 0x358], rdx
; X64-NEXT:    mov rdx, qword ptr [rbp - 0x368]
; X64-NEXT:    mov qword ptr [rbp - 0x350], rbx
; X64-NEXT:    mov rbx, qword ptr [rbp - 0x360]
; X64-NEXT:    mov qword ptr [rbp - 0x348], rsi
; X64-NEXT:    mov rsi, qword ptr [rbp - 0x358]
; X64-NEXT:    mov qword ptr [rbp - 0x340], rdi
; X64-NEXT:    mov rdi, qword ptr [rbp - 0x350]
; X64-NEXT:    mov qword ptr [rbp - 0x338], r8
; X64-NEXT:    mov r8, qword ptr [rbp - 0x348]
; X64-NEXT:    mov qword ptr [rbp - 0x330], r9
; X64-NEXT:    mov r9, qword ptr [rbp - 0x340]
; X64-NEXT:    mov qword ptr [rbp - 0x328], r10
; X64-NEXT:    mov r10, qword ptr [rbp - 0x338]
; X64-NEXT:    mov qword ptr [rbp - 0x320], r11
; X64-NEXT:    mov r11, qword ptr [rbp - 0x330]
; X64-NEXT:    mov qword ptr [rbp - 0x318], r12
; X64-NEXT:    mov r12, qword ptr [rbp - 0x328]
; X64-NEXT:    mov dword ptr [rbp - 0x310], r13d
; X64-NEXT:    mov r13, qword ptr [rbp - 0x320]
; X64-NEXT:    mov byte ptr [rbp - 0x308], r14b
; X64-NEXT:    mov r14, qword ptr [rbp - 0x318]
; X64-NEXT:    mov byte ptr [rbp - 0x300], r15b
; X64-NEXT:    mov r15d, dword ptr [rbp - 0x310]
; X64-NEXT:    mov byte ptr [rbp - 0x2f8], al
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x308]
; X64-NEXT:    mov byte ptr [rbp - 0x2f0], cl
; X64-NEXT:    movzx ecx, byte ptr [rbp - 0x300]
; X64-NEXT:    mov qword ptr [rbp - 0x2e8], rdx
; X64-NEXT:    movzx edx, byte ptr [rbp - 0x2f8]
; X64-NEXT:    mov qword ptr [rbp - 0x2e0], rbx
; X64-NEXT:    movzx ebx, byte ptr [rbp - 0x2f0]
; X64-NEXT:    mov qword ptr [rbp - 0x2d8], rsi
; X64-NEXT:    mov rsi, qword ptr [rbp - 0x250]
; X64-NEXT:    mov qword ptr [rbp - 0x2d0], rdi
; X64-NEXT:    mov rdi, qword ptr [rbp - 0x248]
; X64-NEXT:    mov qword ptr [rbp - 0x2c8], r8
; X64-NEXT:    mov r8, qword ptr [rbp - 0x240]
; X64-NEXT:    mov qword ptr [rbp - 0x2c0], r9
; X64-NEXT:    mov r9, qword ptr [rbp - 0x238]
; X64-NEXT:    mov qword ptr [rbp - 0x2b8], r10
; X64-NEXT:    mov r10, qword ptr [rbp - 0x230]
; X64-NEXT:    mov qword ptr [rbp - 0x2b0], r11
; X64-NEXT:    mov r11, qword ptr [rbp - 0x228]
; X64-NEXT:    mov qword ptr [rbp - 0x2a8], r12
; X64-NEXT:    mov r12, qword ptr [rbp - 0x220]
; X64-NEXT:    mov qword ptr [rbp - 0x3a0], r13
; X64-NEXT:    mov r13, qword ptr [rbp - 0x218]
; X64-NEXT:    mov qword ptr [rbp - 0x398], r14
; X64-NEXT:    mov r14, qword ptr [rbp - 0x210]
; X64-NEXT:    mov dword ptr [rbp - 0x390], r15d
; X64-NEXT:    mov r15d, 0x0
; X64-NEXT:    mov byte ptr [rbp - 0x388], al
; X64-NEXT:    mov rax, qword ptr [rbp - 0x3a0]
; X64-NEXT:    mov qword ptr [r15], rax
; X64-NEXT:    mov rax, qword ptr [rbp - 0x398]
; X64-NEXT:    mov qword ptr [r15 + 0x8], rax
; X64-NEXT:    mov eax, dword ptr [rbp - 0x390]
; X64-NEXT:    mov dword ptr [r15 + 0x10], eax
; X64-NEXT:    movzx eax, byte ptr [rbp - 0x388]
; X64-NEXT:    mov byte ptr [r15 + 0x14], al
; X64-NEXT:    mov byte ptr [r15 + 0x15], cl
; X64-NEXT:    mov byte ptr [r15 + 0x16], dl
; X64-NEXT:    mov byte ptr [r15 + 0x17], bl
; X64-NEXT:    mov qword ptr [r15 + 0x18], rsi
; X64-NEXT:    mov qword ptr [r15 + 0x20], rdi
; X64-NEXT:    mov qword ptr [r15 + 0x28], r8
; X64-NEXT:    mov qword ptr [r15 + 0x30], r9
; X64-NEXT:    mov qword ptr [r15 + 0x38], r10
; X64-NEXT:    mov qword ptr [r15 + 0x40], r11
; X64-NEXT:    mov qword ptr [r15 + 0x48], r12
; X64-NEXT:    mov qword ptr [r15 + 0x50], r13
; X64-NEXT:    mov qword ptr [r15 + 0x58], r14
; X64-NEXT:    add rsp, 0x378
; X64-NEXT:    pop r15
; X64-NEXT:    pop r14
; X64-NEXT:    pop r13
; X64-NEXT:    pop r12
; X64-NEXT:    pop rbx
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <insert_many_nested>:
; ARM64:         sub sp, sp, #0x420
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    stp x21, x22, [sp, #0x20]
; ARM64-NEXT:    stp x23, x24, [sp, #0x30]
; ARM64-NEXT:    stp x25, x26, [sp, #0x40]
; ARM64-NEXT:    str x27, [sp, #0x50]
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add x0, x0, #0x4
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    add x1, x1, #0x4
; ARM64-NEXT:    mov x2, #0x1 // =1
; ARM64-NEXT:    mov w3, #0x0 // =0
; ARM64-NEXT:    mov w4, #0x0 // =0
; ARM64-NEXT:    mov x5, #0x9 // =9
; ARM64-NEXT:    mov w3, #0x0 // =0
; ARM64-NEXT:    add x3, x3, #0x4
; ARM64-NEXT:    mov x4, #0x9 // =9
; ARM64-NEXT:    mul x4, x4, x3
; ARM64-NEXT:    mov x3, #0x1 // =1
; ARM64-NEXT:    mov w6, #0x0 // =0
; ARM64-NEXT:    mov w7, #0x0 // =0
; ARM64-NEXT:    mov x8, #0x9 // =9
; ARM64-NEXT:    mov w6, #0x0 // =0
; ARM64-NEXT:    mov w7, #0x0 // =0
; ARM64-NEXT:    mov w9, #0x0 // =0
; ARM64-NEXT:    mov w6, #0x0 // =0
; ARM64-NEXT:    mov w7, #0x0 // =0
; ARM64-NEXT:    mov w9, #0x0 // =0
; ARM64-NEXT:    mov w10, #0x0 // =0
; ARM64-NEXT:    mov w11, #0x0 // =0
; ARM64-NEXT:    mov w12, #0x0 // =0
; ARM64-NEXT:    mov w13, #0x0 // =0
; ARM64-NEXT:    mov w14, #0x0 // =0
; ARM64-NEXT:    mov w15, #0x0 // =0
; ARM64-NEXT:    mov w18, #0x0 // =0
; ARM64-NEXT:    mov w19, #0x0 // =0
; ARM64-NEXT:    mov w20, #0x0 // =0
; ARM64-NEXT:    mov w21, #0x0 // =0
; ARM64-NEXT:    mov x7, #0xee23 // =60963
; ARM64-NEXT:    movk x7, #0x133, lsl #16
; ARM64-NEXT:    mov x9, #0x2 // =2
; ARM64-NEXT:    mov x10, #0xe // =14
; ARM64-NEXT:    mov w11, #0x0 // =0
; ARM64-NEXT:    mov w12, #0x0 // =0
; ARM64-NEXT:    mov w13, #0x0 // =0
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    add x0, x0, #0x4
; ARM64-NEXT:    mov w1, #0x0 // =0
; ARM64-NEXT:    add x1, x1, #0x4
; ARM64-NEXT:    mov x2, #0x1 // =1
; ARM64-NEXT:    mov w3, #0x0 // =0
; ARM64-NEXT:    mov w4, #0x0 // =0
; ARM64-NEXT:    mov x5, #0x9 // =9
; ARM64-NEXT:    mov w3, #0x0 // =0
; ARM64-NEXT:    add x3, x3, #0x4
; ARM64-NEXT:    mov x4, #0x9 // =9
; ARM64-NEXT:    mul x4, x4, x3
; ARM64-NEXT:    mov x3, #0x1 // =1
; ARM64-NEXT:    mov w6, #0x0 // =0
; ARM64-NEXT:    mov w7, #0x0 // =0
; ARM64-NEXT:    mov x8, #0x9 // =9
; ARM64-NEXT:    mov w6, #0x0 // =0
; ARM64-NEXT:    add x6, x6, #0x4
; ARM64-NEXT:    mov x7, #0x51 // =81
; ARM64-NEXT:    mul x7, x7, x6
; ARM64-NEXT:    mov x6, #0x1 // =1
; ARM64-NEXT:    mov w9, #0x0 // =0
; ARM64-NEXT:    mov w10, #0x0 // =0
; ARM64-NEXT:    mov x11, #0x9 // =9
; ARM64-NEXT:    mov w9, #0x0 // =0
; ARM64-NEXT:    mov w10, #0x0 // =0
; ARM64-NEXT:    mov w12, #0x0 // =0
; ARM64-NEXT:    mov w13, #0x0 // =0
; ARM64-NEXT:    mov w14, #0x0 // =0
; ARM64-NEXT:    mov w15, #0x0 // =0
; ARM64-NEXT:    mov w9, #0x0 // =0
; ARM64-NEXT:    mov w10, #0x0 // =0
; ARM64-NEXT:    mov w12, #0x0 // =0
; ARM64-NEXT:    mov w13, #0x0 // =0
; ARM64-NEXT:    mov w14, #0x0 // =0
; ARM64-NEXT:    mov w15, #0x0 // =0
; ARM64-NEXT:    mov w18, #0x0 // =0
; ARM64-NEXT:    mov w19, #0x0 // =0
; ARM64-NEXT:    mov w20, #0x0 // =0
; ARM64-NEXT:    mov w21, #0x0 // =0
; ARM64-NEXT:    mov w22, #0x0 // =0
; ARM64-NEXT:    mov w23, #0x0 // =0
; ARM64-NEXT:    mov w24, #0x0 // =0
; ARM64-NEXT:    mov w25, #0x0 // =0
; ARM64-NEXT:    mov w26, #0x0 // =0
; ARM64-NEXT:    mov w27, #0x0 // =0
; ARM64-NEXT:    mov x10, #0xee23 // =60963
; ARM64-NEXT:    movk x10, #0x133, lsl #16
; ARM64-NEXT:    mov x12, #0x3 // =3
; ARM64-NEXT:    mov x13, #0x9 // =9
; ARM64-NEXT:    mov w14, #0x0 // =0
; ARM64-NEXT:    mov w15, #0x0 // =0
; ARM64-NEXT:    mov w18, #0x0 // =0
; ARM64-NEXT:    str x9, [x18]
; ARM64-NEXT:    str x0, [x18, #0x8]
; ARM64-NEXT:    str w10, [x18, #0x10]
; ARM64-NEXT:    strb w12, [x18, #0x14]
; ARM64-NEXT:    strb w13, [x18, #0x15]
; ARM64-NEXT:    strb w14, [x18, #0x16]
; ARM64-NEXT:    strb w15, [x18, #0x17]
; ARM64-NEXT:    str x2, [x18, #0x18]
; ARM64-NEXT:    str x5, [x18, #0x20]
; ARM64-NEXT:    str x1, [x18, #0x28]
; ARM64-NEXT:    str x3, [x18, #0x30]
; ARM64-NEXT:    str x8, [x18, #0x38]
; ARM64-NEXT:    str x4, [x18, #0x40]
; ARM64-NEXT:    str x6, [x18, #0x48]
; ARM64-NEXT:    str x11, [x18, #0x50]
; ARM64-NEXT:    str x7, [x18, #0x58]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    ldp x19, x20, [sp, #0x10]
; ARM64-NEXT:    ldp x21, x22, [sp, #0x20]
; ARM64-NEXT:    ldp x23, x24, [sp, #0x30]
; ARM64-NEXT:    ldp x25, x26, [sp, #0x40]
; ARM64-NEXT:    ldr x27, [sp, #0x50]
; ARM64-NEXT:    add sp, sp, #0x420
; ARM64-NEXT:    ret
  %1 = insertvalue { ptr, i64, i32, i8, i8, i8, i8, [2 x [3 x i64]] } { ptr undef, i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), i32 20180515, i8 2, i8 14, i8 0, i8 0, [2 x [3 x i64]] [[3 x i64] [i64 1, i64 9, i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)], [3 x i64] [i64 1, i64 9, i64 mul (i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), i64 9)]] }, ptr null, 0
  store { ptr, i64, i32, i8, i8, i8, i8, [3 x [3 x i64]] } { ptr null, i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), i32 20180515, i8 3, i8 9, i8 0, i8 0, [3 x [3 x i64]] [[3 x i64] [i64 1, i64 9, i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64)], [3 x i64] [i64 1, i64 9, i64 mul (i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), i64 9)], [3 x i64] [i64 1, i64 9, i64 mul (i64 ptrtoint (ptr getelementptr (i32, ptr null, i32 1) to i64), i64 81)]] }, ptr null, align 8
  ret void
}
