; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always

declare i8 @llvm.abs.i8(i8, i1)
declare i16 @llvm.abs.i16(i16, i1)
declare i17 @llvm.abs.i17(i17, i1)
declare i32 @llvm.abs.i32(i32, i1)
declare i37 @llvm.abs.i37(i37, i1)
declare i64 @llvm.abs.i64(i64, i1)

define i8 @absi8(i8 %0) {
; X64-LABEL: absi8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movsx edi, dil
; X64:    mov eax, edi
; X64:    neg eax
; X64:    cmovs eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: absi8>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    sxtb w0, w0
; ARM64:    cmp w0, #0x0
; ARM64:    cneg w0, w0, mi
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = call i8 @llvm.abs.i8(i8 %0, i1 1)
  ret i8 %1
}

define i16 @absi16(i16 %0) {
; X64-LABEL: absi16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movsx edi, di
; X64:    mov eax, edi
; X64:    neg eax
; X64:    cmovs eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
;
; ARM64-LABEL: absi16>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    sxth w0, w0
; ARM64:    cmp w0, #0x0
; ARM64:    cneg w0, w0, mi
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = call i16 @llvm.abs.i16(i16 %0, i1 1)
  ret i16 %1
}

define i17 @absi17(i17 %0) {
; X64-LABEL: absi17>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    shl edi, 0xf
; X64:    sar edi, 0xf
; X64:    mov eax, edi
; X64:    neg eax
; X64:    cmovs eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: absi17>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0xf // =15
; ARM64:    lsl w0, w0, w1
; ARM64:    asr w1, w0, w1
; ARM64:    cmp w1, #0x0
; ARM64:    cneg w1, w1, mi
; ARM64:    mov w0, w1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = call i17 @llvm.abs.i17(i17 %0, i1 1)
  ret i17 %1
}

define i32 @absi32(i32 %0) {
; X64-LABEL: absi32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, edi
; X64:    neg eax
; X64:    cmovs eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: absi32>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    cmp w0, #0x0
; ARM64:    cneg w0, w0, mi
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = call i32 @llvm.abs.i32(i32 %0, i1 1)
  ret i32 %1
}

define i37 @absi37(i37 %0) {
; X64-LABEL: absi37>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    shl rdi, 0x1b
; X64:    sar rdi, 0x1b
; X64:    mov rax, rdi
; X64:    neg rax
; X64:    cmovs rax, rdi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: absi37>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x1b // =27
; ARM64:    lsl x0, x0, x1
; ARM64:    asr x1, x0, x1
; ARM64:    cmp x1, #0x0
; ARM64:    cneg x1, x1, mi
; ARM64:    mov x0, x1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = call i37 @llvm.abs.i37(i37 %0, i1 1)
  ret i37 %1
}

define i64 @absi64(i64 %0) {
; X64-LABEL: absi64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov rax, rdi
; X64:    neg rax
; X64:    cmovs rax, rdi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: absi64>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    cmp x0, #0x0
; ARM64:    cneg x0, x0, mi
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = call i64 @llvm.abs.i64(i64 %0, i1 1)
  ret i64 %1
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
