; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always

declare i8   @llvm.ctlz.i8  (i8, i1)
declare i16   @llvm.ctlz.i16  (i16, i1)
declare i32   @llvm.ctlz.i32  (i32, i1)
declare i64   @llvm.ctlz.i64  (i64, i1)

; COM: I trust clang to be able to do the subtraction correctly
; COM: though it does not compile the template to a call to llvm.ctlz.i8 :(
define void @ctlz_i8(i8 %0) {
; X64-LABEL: ctlz_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    bsr eax, edi
; X64:    xor eax, 0x1f
; X64:    add eax, -0x18
; X64:    test dil, dil
; X64:    mov edi, 0x8
; X64:    cmovne edi, eax
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ctlz_i8>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ands w1, w0, #0xff
; ARM64:    mov w2, #0x8 // =8
; ARM64:    clz w1, w1
; ARM64:    tst w0, #0xff
; ARM64:    sub w1, w1, #0x18
; ARM64:    csel w0, w2, w1, eq
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
  entry:
    %1 = call i8 @llvm.ctlz.i8(i8 %0, i1 0)
    ret void
}

define void @ctlz_i8_zero_poison(i8 %0) {
; X64-LABEL: ctlz_i8_zero_poison>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    bsr edi, edi
; X64:    xor edi, 0x1f
; X64:    add edi, -0x18
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ctlz_i8_zero_poison>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    and w0, w0, #0xff
; ARM64:    clz w0, w0
; ARM64:    sub w1, w0, #0x18
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
  entry:
    %1 = call i8 @llvm.ctlz.i8(i8 %0, i1 1)
    ret void
}

define void @ctlz_i16(i16 %0) {
; X64-LABEL: ctlz_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    bsr eax, edi
; X64:    xor eax, 0x1f
; X64:    add eax, -0x10
; X64:    test di, di
; X64:    mov edi, 0x10
; X64:    cmovne edi, eax
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ctlz_i16>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ands w1, w0, #0xffff
; ARM64:    mov w2, #0x10 // =16
; ARM64:    clz w1, w1
; ARM64:    tst w0, #0xffff
; ARM64:    sub w1, w1, #0x10
; ARM64:    csel w0, w2, w1, eq
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
  entry:
    %1 = call i16 @llvm.ctlz.i16(i16 %0, i1 0)
    ret void
}

define void @ctlz_i16_zero_poison(i16 %0) {
; X64-LABEL: ctlz_i16_zero_poison>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    bsr edi, edi
; X64:    xor edi, 0x1f
; X64:    add edi, -0x10
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ctlz_i16_zero_poison>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    and w0, w0, #0xffff
; ARM64:    clz w0, w0
; ARM64:    sub w1, w0, #0x10
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
  entry:
    %1 = call i16 @llvm.ctlz.i16(i16 %0, i1 1)
    ret void
}

define void @ctlz_i32(i32 %0) {
; X64-LABEL: ctlz_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    test edi, edi
; X64:    je <L0>
; X64:    bsr eax, edi
; X64:    xor eax, 0x1f
; X64:    jmp <L1>
; X64:  <L0>:
; X64:    mov eax, 0x20
; X64:  <L1>:
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ctlz_i32>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    clz w0, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
  entry:
    %1 = call i32 @llvm.ctlz.i32(i32 %0, i1 0)
    ret void
}

define void @ctlz_i32_zero_poison(i32 %0) {
; X64-LABEL: ctlz_i32_zero_poison>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    bsr edi, edi
; X64:    xor edi, 0x1f
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ctlz_i32_zero_poison>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    clz w0, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
  entry:
    %1 = call i32 @llvm.ctlz.i32(i32 %0, i1 1)
    ret void
}

define void @ctlz_i64(i64 %0) {
; X64-LABEL: ctlz_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    test rdi, rdi
; X64:    je <L0>
; X64:    bsr rax, rdi
; X64:    xor rax, 0x3f
; X64:    jmp <L1>
; X64:  <L0>:
; X64:    mov eax, 0x40
; X64:  <L1>:
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ctlz_i64>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    clz x0, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
  entry:
    %1 = call i64 @llvm.ctlz.i64(i64 %0, i1 0)
    ret void
}

define void @ctlz_i64_zero_poison(i64 %0) {
; X64-LABEL: ctlz_i64_zero_poison>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    bsr rdi, rdi
; X64:    xor rdi, 0x3f
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ctlz_i64_zero_poison>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    clz x0, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
  entry:
    %1 = call i64 @llvm.ctlz.i64(i64 %0, i1 1)
    ret void
}

define void @ctlz_i32_no_salvage(i32 %0) {
; X64-LABEL: ctlz_i32_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    test edi, edi
; X64:    mov ecx, edi
; X64:    je <L0>
; X64:    bsr eax, ecx
; X64:    xor eax, 0x1f
; X64:    jmp <L1>
; X64:  <L0>:
; X64:    mov eax, 0x20
; X64:  <L1>:
; X64:    test edi, edi
; X64:    je <L2>
; X64:    bsr eax, edi
; X64:    xor eax, 0x1f
; X64:    jmp <L3>
; X64:  <L2>:
; X64:    mov eax, 0x20
; X64:  <L3>:
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: ctlz_i32_no_salvage>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    clz w1, w0
; ARM64:    clz w0, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
  entry:
    %1 = call i32 @llvm.ctlz.i32(i32 %0, i1 0)
    %2 = call i32 @llvm.ctlz.i32(i32 %0, i1 0)
    ret void
}

define void @ctlz_i64_no_salvage(i64 %0) {
; X64-LABEL: ctlz_i64_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    test rdi, rdi
; X64:    mov rcx, rdi
; X64:    je <L0>
; X64:    bsr rax, rcx
; X64:    xor rax, 0x3f
; X64:    jmp <L1>
; X64:  <L0>:
; X64:    mov eax, 0x40
; X64:  <L1>:
; X64:    test rdi, rdi
; X64:    je <L2>
; X64:    bsr rax, rdi
; X64:    xor rax, 0x3f
; X64:    jmp <L3>
; X64:  <L2>:
; X64:    mov eax, 0x40
; X64:  <L3>:
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ctlz_i64_no_salvage>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    clz x1, x0
; ARM64:    clz x0, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
  entry:
    %1 = call i64 @llvm.ctlz.i64(i64 %0, i1 0)
    %2 = call i64 @llvm.ctlz.i64(i64 %0, i1 0)
    ret void
}

define void @ctlz_i16_no_salvage(i16 %0) {
; X64-LABEL: ctlz_i16_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx eax, di
; X64:    bsr ecx, eax
; X64:    xor ecx, 0x1f
; X64:    add ecx, -0x10
; X64:    test ax, ax
; X64:    mov eax, 0x10
; X64:    cmovne eax, ecx
; X64:    movzx edi, di
; X64:    bsr eax, edi
; X64:    xor eax, 0x1f
; X64:    add eax, -0x10
; X64:    test di, di
; X64:    mov edi, 0x10
; X64:    cmovne edi, eax
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: ctlz_i16_no_salvage>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ands w1, w0, #0xffff
; ARM64:    mov w2, #0x10 // =16
; ARM64:    clz w1, w1
; ARM64:    tst w0, #0xffff
; ARM64:    sub w1, w1, #0x10
; ARM64:    csel w3, w2, w1, eq
; ARM64:    ands w1, w0, #0xffff
; ARM64:    mov w2, #0x10 // =16
; ARM64:    clz w1, w1
; ARM64:    tst w0, #0xffff
; ARM64:    sub w1, w1, #0x10
; ARM64:    csel w0, w2, w1, eq
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
  entry:
    %1 = call i16 @llvm.ctlz.i16(i16 %0, i1 0)
    %2 = call i16 @llvm.ctlz.i16(i16 %0, i1 0)
    ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
