; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always


declare i8   @llvm.cttz.i8  (i8, i1)
declare i16   @llvm.cttz.i16  (i16, i1)
declare i32   @llvm.cttz.i32  (i32, i1)
declare i64   @llvm.cttz.i64  (i64, i1)

define void @cttz_i8(i8 %0) {
; X64-LABEL: cttz_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    or edi, 0x100
; X64:    bsf eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = call i8 @llvm.cttz.i8(i8 %0, i1 0)
    ret void
}

define void @cttz_i8_zero_poison(i8 %0) {
; X64-LABEL: cttz_i8_zero_poison>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    bsf edi, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = call i8 @llvm.cttz.i8(i8 %0, i1 1)
    ret void
}

define void @cttz_i16(i16 %0) {
; X64-LABEL: cttz_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    or edi, 0x10000
; X64:    bsf eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = call i16 @llvm.cttz.i16(i16 %0, i1 0)
    ret void
}

define void @cttz_i16_zero_poison(i16 %0) {
; X64-LABEL: cttz_i16_zero_poison>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    bsf edi, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = call i16 @llvm.cttz.i16(i16 %0, i1 1)
    ret void
}

define void @cttz_i32(i32 %0) {
; X64-LABEL: cttz_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    test edi, edi
; X64:    je <L0>
; X64:    bsf eax, edi
; X64:    jmp <L1>
; X64:  <L0>:
; X64:    mov eax, 0x20
; X64:  <L1>:
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = call i32 @llvm.cttz.i32(i32 %0, i1 0)
    ret void
}

define void @cttz_i32_zero_poison(i32 %0) {
; X64-LABEL: cttz_i32_zero_poison>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    bsf edi, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = call i32 @llvm.cttz.i32(i32 %0, i1 1)
    ret void
}

define void @cttz_i64(i64 %0) {
; X64-LABEL: cttz_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    test rdi, rdi
; X64:    je <L0>
; X64:    bsf rax, rdi
; X64:    jmp <L1>
; X64:  <L0>:
; X64:    mov eax, 0x40
; X64:  <L1>:
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = call i64 @llvm.cttz.i64(i64 %0, i1 0)
    ret void
}

define void @cttz_i64_zero_poison(i64 %0) {
; X64-LABEL: cttz_i64_zero_poison>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    bsf rdi, rdi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = call i64 @llvm.cttz.i64(i64 %0, i1 1)
    ret void
}

define void @cttz_i32_no_salvage(i32 %0) {
; X64-LABEL: cttz_i32_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    test edi, edi
; X64:    mov ecx, edi
; X64:    je <L0>
; X64:    bsf eax, ecx
; X64:    jmp <L1>
; X64:  <L0>:
; X64:    mov eax, 0x20
; X64:  <L1>:
; X64:    test edi, edi
; X64:    je <L2>
; X64:    bsf eax, edi
; X64:    jmp <L3>
; X64:  <L2>:
; X64:    mov eax, 0x20
; X64:  <L3>:
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
    %1 = call i32 @llvm.cttz.i32(i32 %0, i1 0)
    %2 = call i32 @llvm.cttz.i32(i32 %0, i1 0)
    ret void
}

define void @cttz_i64_no_salvage(i64 %0) {
; X64-LABEL: cttz_i64_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    test rdi, rdi
; X64:    mov rcx, rdi
; X64:    je <L0>
; X64:    bsf rax, rcx
; X64:    jmp <L1>
; X64:  <L0>:
; X64:    mov eax, 0x40
; X64:  <L1>:
; X64:    test rdi, rdi
; X64:    je <L2>
; X64:    bsf rax, rdi
; X64:    jmp <L3>
; X64:  <L2>:
; X64:    mov eax, 0x40
; X64:  <L3>:
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = call i64 @llvm.cttz.i64(i64 %0, i1 0)
    %2 = call i64 @llvm.cttz.i64(i64 %0, i1 0)
    ret void
}

define void @cttz_i16_no_salvage(i16 %0) {
; X64-LABEL: cttz_i16_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, edi
; X64:    or eax, 0x10000
; X64:    bsf ecx, eax
; X64:    or edi, 0x10000
; X64:    bsf eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    <unknown>
  entry:

    %1 = call i16 @llvm.cttz.i16(i16 %0, i1 0)
    %2 = call i16 @llvm.cttz.i16(i16 %0, i1 0)
    ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
