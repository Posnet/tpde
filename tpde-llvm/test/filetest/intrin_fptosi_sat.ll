; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define i32 @f32toi32(float %f) {
; X64-LABEL: <f32toi32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cvttss2si eax, xmm0
; X64-NEXT:    ucomiss xmm0, dword ptr <f32toi32+0x18>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    mov ecx, 0x7fffffff
; X64-NEXT:    cmovbe ecx, eax
; X64-NEXT:    xor eax, eax
; X64-NEXT:    ucomiss xmm0, xmm0
; X64-NEXT:    cmovnp eax, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <f32toi32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fcvtzs w0, s0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = call i32 @llvm.fptosi.sat(float %f)
  ret i32 %r
}

define i64 @f32toi64(float %f) {
; X64-LABEL: <f32toi64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cvttss2si rax, xmm0
; X64-NEXT:    ucomiss xmm0, dword ptr <f32toi64+0x19>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movabs rcx, 0x7fffffffffffffff
; X64-NEXT:    cmovbe rcx, rax
; X64-NEXT:    xor eax, eax
; X64-NEXT:    ucomiss xmm0, xmm0
; X64-NEXT:    cmovnp rax, rcx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <f32toi64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fcvtzs x0, s0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = call i64 @llvm.fptosi.sat(float %f)
  ret i64 %r
}

define i32 @f64toi32(double %f) {
; X64-LABEL: <f64toi32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    ucomisd xmm0, xmm0
; X64-NEXT:    maxsd xmm0, qword ptr <f64toi32+0x1a>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    minsd xmm0, qword ptr <f64toi32+0x22>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    cvttsd2si ecx, xmm0
; X64-NEXT:    cmovnp eax, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <f64toi32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fcvtzs w0, d0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = call i32 @llvm.fptosi.sat(double %f)
  ret i32 %r
}

define i64 @f64toi64(double %f) {
; X64-LABEL: <f64toi64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cvttsd2si rax, xmm0
; X64-NEXT:    ucomisd xmm0, qword ptr <f64toi64+0x19>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    movabs rcx, 0x7fffffffffffffff
; X64-NEXT:    cmovbe rcx, rax
; X64-NEXT:    xor eax, eax
; X64-NEXT:    ucomisd xmm0, xmm0
; X64-NEXT:    cmovnp rax, rcx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <f64toi64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fcvtzs x0, d0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = call i64 @llvm.fptosi.sat(double %f)
  ret i64 %r
}
