; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define i32 @f32tou32(float %f) {
; X64-LABEL: <f32tou32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cvttss2si rax, xmm0
; X64-NEXT:    xor ecx, ecx
; X64-NEXT:    xorps xmm1, xmm1
; X64-NEXT:    ucomiss xmm0, xmm1
; X64-NEXT:    cmovae ecx, eax
; X64-NEXT:    ucomiss xmm0, dword ptr <f32tou32+0x24>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    mov eax, 0xffffffff
; X64-NEXT:    cmovbe eax, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <f32tou32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fcvtzu w0, s0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = call i32 @llvm.fptoui.sat(float %f)
  ret i32 %r
}

define i64 @f32tou64(float %f) {
; X64-LABEL: <f32tou64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cvttss2si rax, xmm0
; X64-NEXT:    mov rcx, rax
; X64-NEXT:    sar rcx, 0x3f
; X64-NEXT:    movapd xmm1, xmm0
; X64-NEXT:    subss xmm1, dword ptr <f32tou64+0x24>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    cvttss2si rdx, xmm1
; X64-NEXT:    and rdx, rcx
; X64-NEXT:    or rdx, rax
; X64-NEXT:    xor ecx, ecx
; X64-NEXT:    xorps xmm1, xmm1
; X64-NEXT:    ucomiss xmm0, xmm1
; X64-NEXT:    cmovae rcx, rdx
; X64-NEXT:    ucomiss xmm0, dword ptr <f32tou64+0x43>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    mov rax, -0x1
; X64-NEXT:    cmovbe rax, rcx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <f32tou64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fcvtzu x0, s0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = call i64 @llvm.fptoui.sat(float %f)
  ret i64 %r
}

define i32 @f64tou32(double %f) {
; X64-LABEL: <f64tou32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xorpd xmm1, xmm1
; X64-NEXT:    maxsd xmm1, xmm0
; X64-NEXT:    movsd xmm0, qword ptr <f64tou32+0x1c>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    minsd xmm0, xmm1
; X64-NEXT:    cvttsd2si rax, xmm0
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <f64tou32>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fcvtzu w0, d0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = call i32 @llvm.fptoui.sat(double %f)
  ret i32 %r
}

define i64 @f64tou64(double %f) {
; X64-LABEL: <f64tou64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    cvttsd2si rax, xmm0
; X64-NEXT:    mov rcx, rax
; X64-NEXT:    sar rcx, 0x3f
; X64-NEXT:    movapd xmm1, xmm0
; X64-NEXT:    subsd xmm1, qword ptr <f64tou64+0x24>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    cvttsd2si rdx, xmm1
; X64-NEXT:    and rdx, rcx
; X64-NEXT:    or rdx, rax
; X64-NEXT:    xor ecx, ecx
; X64-NEXT:    xorpd xmm1, xmm1
; X64-NEXT:    ucomisd xmm0, xmm1
; X64-NEXT:    cmovae rcx, rdx
; X64-NEXT:    ucomisd xmm0, qword ptr <f64tou64+0x45>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    mov rax, -0x1
; X64-NEXT:    cmovbe rax, rcx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <f64tou64>:
; ARM64:         sub sp, sp, #0xa0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fcvtzu x0, d0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xa0
; ARM64-NEXT:    ret
  %r = call i64 @llvm.fptoui.sat(double %f)
  ret i64 %r
}
