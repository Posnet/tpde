; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --version 5
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm --target=x86_64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always

declare i1 @llvm.is.fpclass.f32(float, i32)
declare i1 @llvm.is.fpclass.f64(double, i32)

define i1 @is_ninf_float(float %p) {
; X64-LABEL: is_ninf_float>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    movss xmm1, dword ptr <is_ninf_float+0x19>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    ucomiss xmm1, xmm0
; X64-NEXT:    setae cl
; X64-NEXT:    or cl, al
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: is_ninf_float>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov w1, #-0x800000 // =-8388608
; ARM64-NEXT:    fmov s1, w1
; ARM64-NEXT:    fcmp s0, s1
; ARM64-NEXT:    cset w1, eq
; ARM64-NEXT:    orr w0, w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = call i1 @llvm.is.fpclass.f32(float %p, i32 4)
  ret i1 %r
}

define i1 @is_ninf_double(double %p) {
; X64-LABEL: is_ninf_double>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    movsd xmm1, qword ptr <is_ninf_double+0x19>
; X64-NEXT:     R_X86_64_PC32 -0x4
; X64-NEXT:    ucomisd xmm1, xmm0
; X64-NEXT:    setae cl
; X64-NEXT:    or cl, al
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: is_ninf_double>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov x1, #-0x10000000000000 // =-4503599627370496
; ARM64-NEXT:    fmov d1, x1
; ARM64-NEXT:    fcmp d0, d1
; ARM64-NEXT:    cset w1, eq
; ARM64-NEXT:    orr w0, w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = call i1 @llvm.is.fpclass.f64(double %p, i32 4)
  ret i1 %r
}

define i1 @is_nzero_float(float %p) {
; X64-LABEL: is_nzero_float>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    movd ecx, xmm0
; X64-NEXT:    neg ecx
; X64-NEXT:    seto cl
; X64-NEXT:    or cl, al
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: is_nzero_float>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    fmov w1, s0
; ARM64-NEXT:    mov w2, #-0x80000000 // =-2147483648
; ARM64-NEXT:    cmp w1, w2
; ARM64-NEXT:    cset w2, eq
; ARM64-NEXT:    orr w0, w2, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = call i1 @llvm.is.fpclass.f32(float %p, i32 32)
  ret i1 %r
}

define i1 @is_nzero_double(double %p) {
; X64-LABEL: is_nzero_double>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    movq rcx, xmm0
; X64-NEXT:    neg rcx
; X64-NEXT:    seto cl
; X64-NEXT:    or cl, al
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop
;
; ARM64-LABEL: is_nzero_double>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    fmov x1, d0
; ARM64-NEXT:    mov x2, #-0x8000000000000000 // =-9223372036854775808
; ARM64-NEXT:    cmp x1, x2
; ARM64-NEXT:    cset w2, eq
; ARM64-NEXT:    orr w0, w2, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = call i1 @llvm.is.fpclass.f64(double %p, i32 32)
  ret i1 %r
}

define i1 @is_pzero_float(float %p) {
; X64-LABEL: is_pzero_float>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    movd ecx, xmm0
; X64-NEXT:    test ecx, ecx
; X64-NEXT:    sete cl
; X64-NEXT:    or cl, al
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: is_pzero_float>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    fmov w1, s0
; ARM64-NEXT:    cmp w1, #0x0
; ARM64-NEXT:    cset w1, eq
; ARM64-NEXT:    orr w0, w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = call i1 @llvm.is.fpclass.f32(float %p, i32 64)
  ret i1 %r
}

define i1 @is_pzero_double(double %p) {
; X64-LABEL: is_pzero_double>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    movq rcx, xmm0
; X64-NEXT:    test rcx, rcx
; X64-NEXT:    sete cl
; X64-NEXT:    or cl, al
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: is_pzero_double>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    fmov x1, d0
; ARM64-NEXT:    cmp x1, #0x0
; ARM64-NEXT:    cset w1, eq
; ARM64-NEXT:    orr w0, w1, w0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
  %r = call i1 @llvm.is.fpclass.f64(double %p, i32 64)
  ret i1 %r
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
