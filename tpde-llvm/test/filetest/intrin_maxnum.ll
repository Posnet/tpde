; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define float @maxnumf32(float %0, float %1) {
; X64-LABEL: <maxnumf32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmm2, xmm0
; X64-NEXT:    cmpunordss xmm2, xmm0
; X64-NEXT:    movaps xmm3, xmm2
; X64-NEXT:    andps xmm3, xmm1
; X64-NEXT:    maxss xmm1, xmm0
; X64-NEXT:    andnps xmm2, xmm1
; X64-NEXT:    orps xmm2, xmm3
; X64-NEXT:    movapd xmm0, xmm2
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <maxnumf32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fmaxnm s0, s0, s1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %res = call float @llvm.maxnum(float %0, float %1)
  ret float %res
}

define double @maxnumf64(double %0, double %1) {
; X64-LABEL: <maxnumf64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmm2, xmm0
; X64-NEXT:    cmpunordsd xmm2, xmm0
; X64-NEXT:    movapd xmm3, xmm2
; X64-NEXT:    andpd xmm3, xmm1
; X64-NEXT:    maxsd xmm1, xmm0
; X64-NEXT:    andnpd xmm2, xmm1
; X64-NEXT:    orpd xmm2, xmm3
; X64-NEXT:    movapd xmm0, xmm2
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <maxnumf64>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fmaxnm d0, d0, d1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %res = call double @llvm.maxnum(double %0, double %1)
  ret double %res
}

define float @maxnumf32_noreuse(float %0, float %1) {
; X64-LABEL: <maxnumf32_noreuse>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmm2, xmm0
; X64-NEXT:    cmpunordss xmm2, xmm0
; X64-NEXT:    movaps xmm3, xmm2
; X64-NEXT:    andps xmm3, xmm1
; X64-NEXT:    maxss xmm1, xmm0
; X64-NEXT:    andnps xmm2, xmm1
; X64-NEXT:    orps xmm2, xmm3
; X64-NEXT:    addss xmm0, xmm2
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <maxnumf32_noreuse>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fmaxnm s1, s0, s1
; ARM64-NEXT:    fadd s0, s0, s1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %cs = call float @llvm.maxnum(float %0, float %1)
  %res = fadd float %0, %cs
  ret float %res
}

define double @maxnumf64_noreuse(double %0, double %1) {
; X64-LABEL: <maxnumf64_noreuse>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    movapd xmm2, xmm0
; X64-NEXT:    cmpunordsd xmm2, xmm0
; X64-NEXT:    movapd xmm3, xmm2
; X64-NEXT:    andpd xmm3, xmm1
; X64-NEXT:    maxsd xmm1, xmm0
; X64-NEXT:    andnpd xmm2, xmm1
; X64-NEXT:    orpd xmm2, xmm3
; X64-NEXT:    addsd xmm0, xmm2
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <maxnumf64_noreuse>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    fmaxnm d1, d0, d1
; ARM64-NEXT:    fadd d0, d0, d1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %cs = call double @llvm.maxnum(double %0, double %1)
  %res = fadd double %0, %cs
  ret double %res
}
