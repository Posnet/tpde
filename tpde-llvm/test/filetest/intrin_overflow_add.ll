; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always


declare {i8, i1} @llvm.sadd.with.overflow.i8(i8, i8)
declare {i16, i1} @llvm.sadd.with.overflow.i16(i16, i16)
declare {i32, i1} @llvm.sadd.with.overflow.i32(i32, i32)
declare {i64, i1} @llvm.sadd.with.overflow.i64(i64, i64)
declare {i128, i1} @llvm.sadd.with.overflow.i128(i128, i128)

declare {i8, i1} @llvm.uadd.with.overflow.i8(i8, i8)
declare {i16, i1} @llvm.uadd.with.overflow.i16(i16, i16)
declare {i32, i1} @llvm.uadd.with.overflow.i32(i32, i32)
declare {i64, i1} @llvm.uadd.with.overflow.i64(i64, i64)
declare {i128, i1} @llvm.uadd.with.overflow.i128(i128, i128)

define i8 @uadd_i8_0(i8 %0, i8 %1) {
; X64-LABEL: uadd_i8_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    xor eax, eax
; X64:    add dil, sil
; X64:    setb al
; X64:    mov eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
entry:
  %2 = call {i8, i1} @llvm.uadd.with.overflow.i8(i8 %0, i8 %1)
  %3 = extractvalue {i8, i1} %2, 0
  ret i8 %3
}

define i1 @uadd_i8_1(i8 %0, i8 %1) {
; X64-LABEL: uadd_i8_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    xor eax, eax
; X64:    add dil, sil
; X64:    setb al
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  %2 = call {i8, i1} @llvm.uadd.with.overflow.i8(i8 %0, i8 %1)
  %3 = extractvalue {i8, i1} %2, 1
  ret i1 %3
}

define i16 @uadd_i16_0(i16 %0, i16 %1) {
; X64-LABEL: uadd_i16_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    xor eax, eax
; X64:    add di, si
; X64:    setb al
; X64:    mov eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
entry:
  %2 = call {i16, i1} @llvm.uadd.with.overflow.i16(i16 %0, i16 %1)
  %3 = extractvalue {i16, i1} %2, 0
  ret i16 %3
}

define i1 @uadd_i16_1(i16 %0, i16 %1) {
; X64-LABEL: uadd_i16_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    add di, si
; X64:    setb al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  %2 = call {i16, i1} @llvm.uadd.with.overflow.i16(i16 %0, i16 %1)
  %3 = extractvalue {i16, i1} %2, 1
  ret i1 %3
}

define i32 @uadd_i32_0(i32 %0, i32 %1) {
; X64-LABEL: uadd_i32_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    add edi, esi
; X64:    setb al
; X64:    mov eax, edi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %2 = call {i32, i1} @llvm.uadd.with.overflow.i32(i32 %0, i32 %1)
  %3 = extractvalue {i32, i1} %2, 0
  ret i32 %3
}

define i1 @uadd_i32_1(i32 %0, i32 %1) {
; X64-LABEL: uadd_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    add edi, esi
; X64:    setb al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %2 = call {i32, i1} @llvm.uadd.with.overflow.i32(i32 %0, i32 %1)
  %3 = extractvalue {i32, i1} %2, 1
  ret i1 %3
}

define i64 @uadd_i64_0(i64 %0, i64 %1) {
; X64-LABEL: uadd_i64_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    xor eax, eax
; X64:    add rdi, rsi
; X64:    setb al
; X64:    mov rax, rdi
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %2 = call {i64, i1} @llvm.uadd.with.overflow.i64(i64 %0, i64 %1)
  %3 = extractvalue {i64, i1} %2, 0
  ret i64 %3
}

define i1 @uadd_i64_1(i64 %0, i64 %1) {
; X64-LABEL: uadd_i64_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    xor eax, eax
; X64:    add rdi, rsi
; X64:    setb al
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  %2 = call {i64, i1} @llvm.uadd.with.overflow.i64(i64 %0, i64 %1)
  %3 = extractvalue {i64, i1} %2, 1
  ret i1 %3
}

define i128 @uadd_i128_0(i128 %0, i128 %1) {
; X64-LABEL: uadd_i128_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x68
; X64:    mov rax, rdi
; X64:    add rax, rdx
; X64:    mov rbx, rsi
; X64:    adc rbx, rcx
; X64:    setb r8b
; X64:    movzx r8d, r8b
; X64:    mov rdx, rbx
; X64:    add rsp, 0x68
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %2 = call {i128, i1} @llvm.uadd.with.overflow.i128(i128 %0, i128 %1)
  %3 = extractvalue {i128, i1} %2, 0
  ret i128 %3
}

define i1 @uadd_i128_1(i128 %0, i128 %1) {
; X64-LABEL: uadd_i128_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x78
; X64:    mov rax, rdi
; X64:    add rax, rdx
; X64:    mov rbx, rsi
; X64:    adc rbx, rcx
; X64:    setb r8b
; X64:    movzx r8d, r8b
; X64:    mov eax, r8d
; X64:    add rsp, 0x78
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %2 = call {i128, i1} @llvm.uadd.with.overflow.i128(i128 %0, i128 %1)
  %3 = extractvalue {i128, i1} %2, 1
  ret i1 %3
}



define i8 @sadd_i8_0(i8 %0, i8 %1) {
; X64-LABEL: sadd_i8_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    xor eax, eax
; X64:    add dil, sil
; X64:    seto al
; X64:    mov eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
entry:
  %2 = call {i8, i1} @llvm.sadd.with.overflow.i8(i8 %0, i8 %1)
  %3 = extractvalue {i8, i1} %2, 0
  ret i8 %3
}

define i1 @sadd_i8_1(i8 %0, i8 %1) {
; X64-LABEL: sadd_i8_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    xor eax, eax
; X64:    add dil, sil
; X64:    seto al
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  %2 = call {i8, i1} @llvm.sadd.with.overflow.i8(i8 %0, i8 %1)
  %3 = extractvalue {i8, i1} %2, 1
  ret i1 %3
}

define i16 @sadd_i16_0(i16 %0, i16 %1) {
; X64-LABEL: sadd_i16_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    xor eax, eax
; X64:    add di, si
; X64:    seto al
; X64:    mov eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
entry:
  %2 = call {i16, i1} @llvm.sadd.with.overflow.i16(i16 %0, i16 %1)
  %3 = extractvalue {i16, i1} %2, 0
  ret i16 %3
}

define i1 @sadd_i16_1(i16 %0, i16 %1) {
; X64-LABEL: sadd_i16_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    add di, si
; X64:    seto al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  %2 = call {i16, i1} @llvm.sadd.with.overflow.i16(i16 %0, i16 %1)
  %3 = extractvalue {i16, i1} %2, 1
  ret i1 %3
}

define i32 @sadd_i32_0(i32 %0, i32 %1) {
; X64-LABEL: sadd_i32_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    add edi, esi
; X64:    seto al
; X64:    mov eax, edi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %2 = call {i32, i1} @llvm.sadd.with.overflow.i32(i32 %0, i32 %1)
  %3 = extractvalue {i32, i1} %2, 0
  ret i32 %3
}

define i1 @sadd_i32_1(i32 %0, i32 %1) {
; X64-LABEL: sadd_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor eax, eax
; X64:    add edi, esi
; X64:    seto al
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %2 = call {i32, i1} @llvm.sadd.with.overflow.i32(i32 %0, i32 %1)
  %3 = extractvalue {i32, i1} %2, 1
  ret i1 %3
}

define i64 @sadd_i64_0(i64 %0, i64 %1) {
; X64-LABEL: sadd_i64_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    xor eax, eax
; X64:    add rdi, rsi
; X64:    seto al
; X64:    mov rax, rdi
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %2 = call {i64, i1} @llvm.sadd.with.overflow.i64(i64 %0, i64 %1)
  %3 = extractvalue {i64, i1} %2, 0
  ret i64 %3
}

define i1 @sadd_i64_1(i64 %0, i64 %1) {
; X64-LABEL: sadd_i64_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    xor eax, eax
; X64:    add rdi, rsi
; X64:    seto al
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  %2 = call {i64, i1} @llvm.sadd.with.overflow.i64(i64 %0, i64 %1)
  %3 = extractvalue {i64, i1} %2, 1
  ret i1 %3
}

define i128 @sadd_i128_0(i128 %0, i128 %1) {
; X64-LABEL: sadd_i128_0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x68
; X64:    mov rax, rdi
; X64:    add rax, rdx
; X64:    mov rbx, rsi
; X64:    adc rbx, rcx
; X64:    seto r8b
; X64:    movzx r8d, r8b
; X64:    mov rdx, rbx
; X64:    add rsp, 0x68
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %2 = call {i128, i1} @llvm.sadd.with.overflow.i128(i128 %0, i128 %1)
  %3 = extractvalue {i128, i1} %2, 0
  ret i128 %3
}

define i1 @sadd_i128_1(i128 %0, i128 %1) {
; X64-LABEL: sadd_i128_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x78
; X64:    mov rax, rdi
; X64:    add rax, rdx
; X64:    mov rbx, rsi
; X64:    adc rbx, rcx
; X64:    seto r8b
; X64:    movzx r8d, r8b
; X64:    mov eax, r8d
; X64:    add rsp, 0x78
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    <unknown>
entry:
  %2 = call {i128, i1} @llvm.sadd.with.overflow.i128(i128 %0, i128 %1)
  %3 = extractvalue {i128, i1} %2, 1
  ret i1 %3
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
