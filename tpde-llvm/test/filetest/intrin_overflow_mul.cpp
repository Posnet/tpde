// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --include-generated-funcs --version 5
// SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
// SPDX-License-Identifier: LicenseRef-Proprietary

// COM: true && because otherwise update_cc_test_checks fails to run this

// REQUIRES: DISABLED
// DISABLED-NOTE: flaky run-test with broken LLVM-IR
// RUN: %clang -emit-llvm -S %s -o - -std=c++20 | FileCheck %s -check-prefixes=IR --dump-input always
// RUN: true && clang -std=c++20 -S -emit-llvm -o %t.ll %s && tpde_llvm -o %t.o %t.ll && clang -o %t %t.o && %t | FileCheck %s -check-prefixes=OUT --dump-input always

#include <cstdint>
#include <cstdio>

template <typename T> T mul(T a, T b) {
    T res;
    __builtin_mul_overflow(a, b, &res);
    return res;
}

template <typename T> bool mul_of(T a, T b) {
    T res;
    return __builtin_mul_overflow(a, b, &res);
}

void umul_128(__uint128_t a, __uint128_t b) {
    __uint128_t res;
    bool of = __builtin_mul_overflow(a, b, &res);
    printf("%lx, %lx, %d\n", (uint64_t)(res >> 64), (uint64_t)(res), of);
}

void smul_128(__int128_t a, __int128_t b) {
    __int128_t res;
    bool of = __builtin_mul_overflow(a, b, &res);
    printf("%lx, %lx, %d\n", (uint64_t)(res >> 64), (uint64_t)(res), of);
}

int main() {
    // OUT: 6, 0
    printf("%d, %d\n", mul<int8_t>(3, 2), mul_of<int8_t>(3, 2));
    // OUT: 0, 1
    printf("%d, %d\n", mul<int8_t>(-128, 2), mul_of<int8_t>(-128, 2));
    // OUT: -2, 1
    printf("%d, %d\n", mul<int8_t>(127, 2), mul_of<int8_t>(127, 2));

    // OUT: 6, 0
    printf("%x, %d\n", mul<uint8_t>(3, 2), mul_of<uint8_t>(3, 2));
    // OUT: a0, 0
    printf("%x, %d\n", mul<uint8_t>(0x50, 2), mul_of<uint8_t>(0x50, 2));
    // OUT: 0, 1
    printf("%x, %d\n", mul<uint8_t>(0x80, 2), mul_of<uint8_t>(0x80, 2));


    // OUT: 6, 0
    printf("%d, %d\n", mul<int16_t>(3, 2), mul_of<int16_t>(3, 2));
    // OUT: 0, 1
    printf("%d, %d\n", mul<int16_t>(0x8000, 2), mul_of<int16_t>(0x8000, 2));
    // OUT: -2, 1
    printf("%d, %d\n", mul<int16_t>(0x7FFF, 2), mul_of<int16_t>(0x7FFF, 2));

    // OUT: 6, 0
    printf("%x, %d\n", mul<uint16_t>(3, 2), mul_of<uint16_t>(3, 2));
    // OUT: a000, 0
    printf("%x, %d\n", mul<uint16_t>(0x5000, 2), mul_of<uint16_t>(0x5000, 2));
    // OUT: 0, 1
    printf("%x, %d\n", mul<uint16_t>(0x8000, 2), mul_of<uint16_t>(0x8000, 2));


    // OUT: 6, 0
    printf("%d, %d\n", mul<int32_t>(3, 2), mul_of<int32_t>(3, 2));
    // OUT: 0, 1
    printf("%d, %d\n", mul<int32_t>(0x8000'0000, 2), mul_of<int32_t>(0x8000'0000, 2));
    // OUT: -2, 1
    printf("%d, %d\n", mul<int32_t>(0x7FFF'FFFF, 2), mul_of<int32_t>(0x7FFF'FFFF, 2));

    // OUT: 6, 0
    printf("%x, %d\n", mul<uint32_t>(3, 2), mul_of<uint32_t>(3, 2));
    // OUT: a0000000, 0
    printf("%x, %d\n", mul<uint32_t>(0x5000'0000, 2), mul_of<uint32_t>(0x5000'0000, 2));
    // OUT: 0, 1
    printf("%x, %d\n", mul<uint32_t>(0x8000'0000, 2), mul_of<uint32_t>(0x8000'0000, 2));


    // OUT: 6, 0
    printf("%ld, %d\n", mul<int64_t>(3, 2), mul_of<int64_t>(3, 2));
    // OUT: 0, 1
    printf("%ld, %d\n", mul<int64_t>(0x8000'0000'0000'0000, 2), mul_of<int64_t>(0x8000'0000'0000'0000, 2));
    // OUT: -2, 1
    printf("%ld, %d\n", mul<int64_t>(0x7FFF'FFFF'FFFF'FFFF, 2), mul_of<int64_t>(0x7FFF'FFFF'FFFF'FFFF, 2));

    // OUT: 6, 0
    printf("%lx, %d\n", mul<uint64_t>(3, 2), mul_of<uint64_t>(3, 2));
    // OUT: a000000000000000, 0
    printf("%lx, %d\n", mul<uint64_t>(0x5000'0000'0000'0000, 2), mul_of<uint64_t>(0x5000'0000'0000'0000, 2));
    // OUT: 0, 1
    printf("%lx, %d\n", mul<uint64_t>(0x8000'0000'0000'0000, 2), mul_of<uint64_t>(0x8000'0000'0000'0000, 2));


    // OUT: 0, 6, 0
    smul_128(3, 2);
    // OUT: 0, 0, 1
    smul_128(((__int128_t)0x8000'0000'0000'0000) << 64, 2);
    // OUT: ffffffffffffffff, fffffffffffffffe, 1
    smul_128(((__int128_t)0x7FFF'FFFF'FFFF'FFFF) << 64 | 0xFFFF'FFFF'FFFF'FFFF, 2);

    // OUT: 0, 6, 0
    umul_128(3, 2);
    // OUT: a000000000000000, 0, 0
    umul_128(((__uint128_t)0x5000'0000'0000'0000) << 64, 2);
    // OUT: 0, 0, 1
    umul_128(((__uint128_t)0x8000'0000'0000'0000) << 64, 2);

    return 0;
}
// IR-LABEL: define dso_local void @_Z8umul_128oo(
// IR-SAME: i64 noundef [[A_COERCE0:%.*]], i64 noundef [[A_COERCE1:%.*]], i64 noundef [[B_COERCE0:%.*]], i64 noundef [[B_COERCE1:%.*]]) #[[ATTR0:[0-9]+]] {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A:%.*]] = alloca i128, align 16
// IR-NEXT:    [[B:%.*]] = alloca i128, align 16
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i128, align 16
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i128, align 16
// IR-NEXT:    [[RES:%.*]] = alloca i128, align 16
// IR-NEXT:    [[OF:%.*]] = alloca i8, align 1
// IR-NEXT:    [[TMP0:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[A]], i32 0, i32 0
// IR-NEXT:    store i64 [[A_COERCE0]], ptr [[TMP0]], align 16
// IR-NEXT:    [[TMP1:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[A]], i32 0, i32 1
// IR-NEXT:    store i64 [[A_COERCE1]], ptr [[TMP1]], align 8
// IR-NEXT:    [[A1:%.*]] = load i128, ptr [[A]], align 16
// IR-NEXT:    [[TMP2:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[B]], i32 0, i32 0
// IR-NEXT:    store i64 [[B_COERCE0]], ptr [[TMP2]], align 16
// IR-NEXT:    [[TMP3:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[B]], i32 0, i32 1
// IR-NEXT:    store i64 [[B_COERCE1]], ptr [[TMP3]], align 8
// IR-NEXT:    [[B2:%.*]] = load i128, ptr [[B]], align 16
// IR-NEXT:    store i128 [[A1]], ptr [[A_ADDR]], align 16
// IR-NEXT:    store i128 [[B2]], ptr [[B_ADDR]], align 16
// IR-NEXT:    [[TMP4:%.*]] = load i128, ptr [[A_ADDR]], align 16
// IR-NEXT:    [[TMP5:%.*]] = load i128, ptr [[B_ADDR]], align 16
// IR-NEXT:    [[TMP6:%.*]] = call { i128, i1 } @llvm.umul.with.overflow.i128(i128 [[TMP4]], i128 [[TMP5]])
// IR-NEXT:    [[TMP7:%.*]] = extractvalue { i128, i1 } [[TMP6]], 1
// IR-NEXT:    [[TMP8:%.*]] = extractvalue { i128, i1 } [[TMP6]], 0
// IR-NEXT:    store i128 [[TMP8]], ptr [[RES]], align 16
// IR-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[TMP7]] to i8
// IR-NEXT:    store i8 [[FROMBOOL]], ptr [[OF]], align 1
// IR-NEXT:    [[TMP9:%.*]] = load i128, ptr [[RES]], align 16
// IR-NEXT:    [[SHR:%.*]] = lshr i128 [[TMP9]], 64
// IR-NEXT:    [[CONV:%.*]] = trunc i128 [[SHR]] to i64
// IR-NEXT:    [[TMP10:%.*]] = load i128, ptr [[RES]], align 16
// IR-NEXT:    [[CONV3:%.*]] = trunc i128 [[TMP10]] to i64
// IR-NEXT:    [[TMP11:%.*]] = load i8, ptr [[OF]], align 1
// IR-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP11]] to i1
// IR-NEXT:    [[CONV4:%.*]] = zext i1 [[TOBOOL]] to i32
// IR-NEXT:    [[CALL:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str, i64 noundef [[CONV]], i64 noundef [[CONV3]], i32 noundef [[CONV4]])
// IR-NEXT:    ret void
//
//
// IR-LABEL: define dso_local void @_Z8smul_128nn(
// IR-SAME: i64 noundef [[A_COERCE0:%.*]], i64 noundef [[A_COERCE1:%.*]], i64 noundef [[B_COERCE0:%.*]], i64 noundef [[B_COERCE1:%.*]]) #[[ATTR0]] {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A:%.*]] = alloca i128, align 16
// IR-NEXT:    [[B:%.*]] = alloca i128, align 16
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i128, align 16
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i128, align 16
// IR-NEXT:    [[RES:%.*]] = alloca i128, align 16
// IR-NEXT:    [[OF:%.*]] = alloca i8, align 1
// IR-NEXT:    [[TMP0:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[A]], i32 0, i32 0
// IR-NEXT:    store i64 [[A_COERCE0]], ptr [[TMP0]], align 16
// IR-NEXT:    [[TMP1:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[A]], i32 0, i32 1
// IR-NEXT:    store i64 [[A_COERCE1]], ptr [[TMP1]], align 8
// IR-NEXT:    [[A1:%.*]] = load i128, ptr [[A]], align 16
// IR-NEXT:    [[TMP2:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[B]], i32 0, i32 0
// IR-NEXT:    store i64 [[B_COERCE0]], ptr [[TMP2]], align 16
// IR-NEXT:    [[TMP3:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[B]], i32 0, i32 1
// IR-NEXT:    store i64 [[B_COERCE1]], ptr [[TMP3]], align 8
// IR-NEXT:    [[B2:%.*]] = load i128, ptr [[B]], align 16
// IR-NEXT:    store i128 [[A1]], ptr [[A_ADDR]], align 16
// IR-NEXT:    store i128 [[B2]], ptr [[B_ADDR]], align 16
// IR-NEXT:    [[TMP4:%.*]] = load i128, ptr [[A_ADDR]], align 16
// IR-NEXT:    [[TMP5:%.*]] = load i128, ptr [[B_ADDR]], align 16
// IR-NEXT:    [[TMP6:%.*]] = call { i128, i1 } @llvm.smul.with.overflow.i128(i128 [[TMP4]], i128 [[TMP5]])
// IR-NEXT:    [[TMP7:%.*]] = extractvalue { i128, i1 } [[TMP6]], 1
// IR-NEXT:    [[TMP8:%.*]] = extractvalue { i128, i1 } [[TMP6]], 0
// IR-NEXT:    store i128 [[TMP8]], ptr [[RES]], align 16
// IR-NEXT:    [[FROMBOOL:%.*]] = zext i1 [[TMP7]] to i8
// IR-NEXT:    store i8 [[FROMBOOL]], ptr [[OF]], align 1
// IR-NEXT:    [[TMP9:%.*]] = load i128, ptr [[RES]], align 16
// IR-NEXT:    [[SHR:%.*]] = ashr i128 [[TMP9]], 64
// IR-NEXT:    [[CONV:%.*]] = trunc i128 [[SHR]] to i64
// IR-NEXT:    [[TMP10:%.*]] = load i128, ptr [[RES]], align 16
// IR-NEXT:    [[CONV3:%.*]] = trunc i128 [[TMP10]] to i64
// IR-NEXT:    [[TMP11:%.*]] = load i8, ptr [[OF]], align 1
// IR-NEXT:    [[TOBOOL:%.*]] = trunc i8 [[TMP11]] to i1
// IR-NEXT:    [[CONV4:%.*]] = zext i1 [[TOBOOL]] to i32
// IR-NEXT:    [[CALL:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str, i64 noundef [[CONV]], i64 noundef [[CONV3]], i32 noundef [[CONV4]])
// IR-NEXT:    ret void
//
//
// IR-LABEL: define dso_local noundef i32 @main(
// IR-SAME: ) #[[ATTR3:[0-9]+]] {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4
// IR-NEXT:    [[COERCE:%.*]] = alloca i128, align 16
// IR-NEXT:    [[COERCE107:%.*]] = alloca i128, align 16
// IR-NEXT:    [[COERCE108:%.*]] = alloca i128, align 16
// IR-NEXT:    [[COERCE109:%.*]] = alloca i128, align 16
// IR-NEXT:    [[COERCE110:%.*]] = alloca i128, align 16
// IR-NEXT:    [[COERCE111:%.*]] = alloca i128, align 16
// IR-NEXT:    [[COERCE112:%.*]] = alloca i128, align 16
// IR-NEXT:    [[COERCE113:%.*]] = alloca i128, align 16
// IR-NEXT:    [[COERCE114:%.*]] = alloca i128, align 16
// IR-NEXT:    [[COERCE115:%.*]] = alloca i128, align 16
// IR-NEXT:    [[COERCE116:%.*]] = alloca i128, align 16
// IR-NEXT:    [[COERCE117:%.*]] = alloca i128, align 16
// IR-NEXT:    store i32 0, ptr [[RETVAL]], align 4
// IR-NEXT:    [[CALL:%.*]] = call noundef signext i8 @_Z3mulIaET_S0_S0_(i8 noundef signext 3, i8 noundef signext 2)
// IR-NEXT:    [[CONV:%.*]] = sext i8 [[CALL]] to i32
// IR-NEXT:    [[CALL1:%.*]] = call noundef zeroext i1 @_Z6mul_ofIaEbT_S0_(i8 noundef signext 3, i8 noundef signext 2)
// IR-NEXT:    [[CONV2:%.*]] = zext i1 [[CALL1]] to i32
// IR-NEXT:    [[CALL3:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef [[CONV]], i32 noundef [[CONV2]])
// IR-NEXT:    [[CALL4:%.*]] = call noundef signext i8 @_Z3mulIaET_S0_S0_(i8 noundef signext -128, i8 noundef signext 2)
// IR-NEXT:    [[CONV5:%.*]] = sext i8 [[CALL4]] to i32
// IR-NEXT:    [[CALL6:%.*]] = call noundef zeroext i1 @_Z6mul_ofIaEbT_S0_(i8 noundef signext -128, i8 noundef signext 2)
// IR-NEXT:    [[CONV7:%.*]] = zext i1 [[CALL6]] to i32
// IR-NEXT:    [[CALL8:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef [[CONV5]], i32 noundef [[CONV7]])
// IR-NEXT:    [[CALL9:%.*]] = call noundef signext i8 @_Z3mulIaET_S0_S0_(i8 noundef signext 127, i8 noundef signext 2)
// IR-NEXT:    [[CONV10:%.*]] = sext i8 [[CALL9]] to i32
// IR-NEXT:    [[CALL11:%.*]] = call noundef zeroext i1 @_Z6mul_ofIaEbT_S0_(i8 noundef signext 127, i8 noundef signext 2)
// IR-NEXT:    [[CONV12:%.*]] = zext i1 [[CALL11]] to i32
// IR-NEXT:    [[CALL13:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef [[CONV10]], i32 noundef [[CONV12]])
// IR-NEXT:    [[CALL14:%.*]] = call noundef zeroext i8 @_Z3mulIhET_S0_S0_(i8 noundef zeroext 3, i8 noundef zeroext 2)
// IR-NEXT:    [[CONV15:%.*]] = zext i8 [[CALL14]] to i32
// IR-NEXT:    [[CALL16:%.*]] = call noundef zeroext i1 @_Z6mul_ofIhEbT_S0_(i8 noundef zeroext 3, i8 noundef zeroext 2)
// IR-NEXT:    [[CONV17:%.*]] = zext i1 [[CALL16]] to i32
// IR-NEXT:    [[CALL18:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef [[CONV15]], i32 noundef [[CONV17]])
// IR-NEXT:    [[CALL19:%.*]] = call noundef zeroext i8 @_Z3mulIhET_S0_S0_(i8 noundef zeroext 80, i8 noundef zeroext 2)
// IR-NEXT:    [[CONV20:%.*]] = zext i8 [[CALL19]] to i32
// IR-NEXT:    [[CALL21:%.*]] = call noundef zeroext i1 @_Z6mul_ofIhEbT_S0_(i8 noundef zeroext 80, i8 noundef zeroext 2)
// IR-NEXT:    [[CONV22:%.*]] = zext i1 [[CALL21]] to i32
// IR-NEXT:    [[CALL23:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef [[CONV20]], i32 noundef [[CONV22]])
// IR-NEXT:    [[CALL24:%.*]] = call noundef zeroext i8 @_Z3mulIhET_S0_S0_(i8 noundef zeroext -128, i8 noundef zeroext 2)
// IR-NEXT:    [[CONV25:%.*]] = zext i8 [[CALL24]] to i32
// IR-NEXT:    [[CALL26:%.*]] = call noundef zeroext i1 @_Z6mul_ofIhEbT_S0_(i8 noundef zeroext -128, i8 noundef zeroext 2)
// IR-NEXT:    [[CONV27:%.*]] = zext i1 [[CALL26]] to i32
// IR-NEXT:    [[CALL28:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef [[CONV25]], i32 noundef [[CONV27]])
// IR-NEXT:    [[CALL29:%.*]] = call noundef signext i16 @_Z3mulIsET_S0_S0_(i16 noundef signext 3, i16 noundef signext 2)
// IR-NEXT:    [[CONV30:%.*]] = sext i16 [[CALL29]] to i32
// IR-NEXT:    [[CALL31:%.*]] = call noundef zeroext i1 @_Z6mul_ofIsEbT_S0_(i16 noundef signext 3, i16 noundef signext 2)
// IR-NEXT:    [[CONV32:%.*]] = zext i1 [[CALL31]] to i32
// IR-NEXT:    [[CALL33:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef [[CONV30]], i32 noundef [[CONV32]])
// IR-NEXT:    [[CALL34:%.*]] = call noundef signext i16 @_Z3mulIsET_S0_S0_(i16 noundef signext -32768, i16 noundef signext 2)
// IR-NEXT:    [[CONV35:%.*]] = sext i16 [[CALL34]] to i32
// IR-NEXT:    [[CALL36:%.*]] = call noundef zeroext i1 @_Z6mul_ofIsEbT_S0_(i16 noundef signext -32768, i16 noundef signext 2)
// IR-NEXT:    [[CONV37:%.*]] = zext i1 [[CALL36]] to i32
// IR-NEXT:    [[CALL38:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef [[CONV35]], i32 noundef [[CONV37]])
// IR-NEXT:    [[CALL39:%.*]] = call noundef signext i16 @_Z3mulIsET_S0_S0_(i16 noundef signext 32767, i16 noundef signext 2)
// IR-NEXT:    [[CONV40:%.*]] = sext i16 [[CALL39]] to i32
// IR-NEXT:    [[CALL41:%.*]] = call noundef zeroext i1 @_Z6mul_ofIsEbT_S0_(i16 noundef signext 32767, i16 noundef signext 2)
// IR-NEXT:    [[CONV42:%.*]] = zext i1 [[CALL41]] to i32
// IR-NEXT:    [[CALL43:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef [[CONV40]], i32 noundef [[CONV42]])
// IR-NEXT:    [[CALL44:%.*]] = call noundef zeroext i16 @_Z3mulItET_S0_S0_(i16 noundef zeroext 3, i16 noundef zeroext 2)
// IR-NEXT:    [[CONV45:%.*]] = zext i16 [[CALL44]] to i32
// IR-NEXT:    [[CALL46:%.*]] = call noundef zeroext i1 @_Z6mul_ofItEbT_S0_(i16 noundef zeroext 3, i16 noundef zeroext 2)
// IR-NEXT:    [[CONV47:%.*]] = zext i1 [[CALL46]] to i32
// IR-NEXT:    [[CALL48:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef [[CONV45]], i32 noundef [[CONV47]])
// IR-NEXT:    [[CALL49:%.*]] = call noundef zeroext i16 @_Z3mulItET_S0_S0_(i16 noundef zeroext 20480, i16 noundef zeroext 2)
// IR-NEXT:    [[CONV50:%.*]] = zext i16 [[CALL49]] to i32
// IR-NEXT:    [[CALL51:%.*]] = call noundef zeroext i1 @_Z6mul_ofItEbT_S0_(i16 noundef zeroext 20480, i16 noundef zeroext 2)
// IR-NEXT:    [[CONV52:%.*]] = zext i1 [[CALL51]] to i32
// IR-NEXT:    [[CALL53:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef [[CONV50]], i32 noundef [[CONV52]])
// IR-NEXT:    [[CALL54:%.*]] = call noundef zeroext i16 @_Z3mulItET_S0_S0_(i16 noundef zeroext -32768, i16 noundef zeroext 2)
// IR-NEXT:    [[CONV55:%.*]] = zext i16 [[CALL54]] to i32
// IR-NEXT:    [[CALL56:%.*]] = call noundef zeroext i1 @_Z6mul_ofItEbT_S0_(i16 noundef zeroext -32768, i16 noundef zeroext 2)
// IR-NEXT:    [[CONV57:%.*]] = zext i1 [[CALL56]] to i32
// IR-NEXT:    [[CALL58:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef [[CONV55]], i32 noundef [[CONV57]])
// IR-NEXT:    [[CALL59:%.*]] = call noundef i32 @_Z3mulIiET_S0_S0_(i32 noundef 3, i32 noundef 2)
// IR-NEXT:    [[CALL60:%.*]] = call noundef zeroext i1 @_Z6mul_ofIiEbT_S0_(i32 noundef 3, i32 noundef 2)
// IR-NEXT:    [[CONV61:%.*]] = zext i1 [[CALL60]] to i32
// IR-NEXT:    [[CALL62:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef [[CALL59]], i32 noundef [[CONV61]])
// IR-NEXT:    [[CALL63:%.*]] = call noundef i32 @_Z3mulIiET_S0_S0_(i32 noundef -2147483648, i32 noundef 2)
// IR-NEXT:    [[CALL64:%.*]] = call noundef zeroext i1 @_Z6mul_ofIiEbT_S0_(i32 noundef -2147483648, i32 noundef 2)
// IR-NEXT:    [[CONV65:%.*]] = zext i1 [[CALL64]] to i32
// IR-NEXT:    [[CALL66:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef [[CALL63]], i32 noundef [[CONV65]])
// IR-NEXT:    [[CALL67:%.*]] = call noundef i32 @_Z3mulIiET_S0_S0_(i32 noundef 2147483647, i32 noundef 2)
// IR-NEXT:    [[CALL68:%.*]] = call noundef zeroext i1 @_Z6mul_ofIiEbT_S0_(i32 noundef 2147483647, i32 noundef 2)
// IR-NEXT:    [[CONV69:%.*]] = zext i1 [[CALL68]] to i32
// IR-NEXT:    [[CALL70:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.1, i32 noundef [[CALL67]], i32 noundef [[CONV69]])
// IR-NEXT:    [[CALL71:%.*]] = call noundef i32 @_Z3mulIjET_S0_S0_(i32 noundef 3, i32 noundef 2)
// IR-NEXT:    [[CALL72:%.*]] = call noundef zeroext i1 @_Z6mul_ofIjEbT_S0_(i32 noundef 3, i32 noundef 2)
// IR-NEXT:    [[CONV73:%.*]] = zext i1 [[CALL72]] to i32
// IR-NEXT:    [[CALL74:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef [[CALL71]], i32 noundef [[CONV73]])
// IR-NEXT:    [[CALL75:%.*]] = call noundef i32 @_Z3mulIjET_S0_S0_(i32 noundef 1342177280, i32 noundef 2)
// IR-NEXT:    [[CALL76:%.*]] = call noundef zeroext i1 @_Z6mul_ofIjEbT_S0_(i32 noundef 1342177280, i32 noundef 2)
// IR-NEXT:    [[CONV77:%.*]] = zext i1 [[CALL76]] to i32
// IR-NEXT:    [[CALL78:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef [[CALL75]], i32 noundef [[CONV77]])
// IR-NEXT:    [[CALL79:%.*]] = call noundef i32 @_Z3mulIjET_S0_S0_(i32 noundef -2147483648, i32 noundef 2)
// IR-NEXT:    [[CALL80:%.*]] = call noundef zeroext i1 @_Z6mul_ofIjEbT_S0_(i32 noundef -2147483648, i32 noundef 2)
// IR-NEXT:    [[CONV81:%.*]] = zext i1 [[CALL80]] to i32
// IR-NEXT:    [[CALL82:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.2, i32 noundef [[CALL79]], i32 noundef [[CONV81]])
// IR-NEXT:    [[CALL83:%.*]] = call noundef i64 @_Z3mulIlET_S0_S0_(i64 noundef 3, i64 noundef 2)
// IR-NEXT:    [[CALL84:%.*]] = call noundef zeroext i1 @_Z6mul_ofIlEbT_S0_(i64 noundef 3, i64 noundef 2)
// IR-NEXT:    [[CONV85:%.*]] = zext i1 [[CALL84]] to i32
// IR-NEXT:    [[CALL86:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.3, i64 noundef [[CALL83]], i32 noundef [[CONV85]])
// IR-NEXT:    [[CALL87:%.*]] = call noundef i64 @_Z3mulIlET_S0_S0_(i64 noundef -9223372036854775808, i64 noundef 2)
// IR-NEXT:    [[CALL88:%.*]] = call noundef zeroext i1 @_Z6mul_ofIlEbT_S0_(i64 noundef -9223372036854775808, i64 noundef 2)
// IR-NEXT:    [[CONV89:%.*]] = zext i1 [[CALL88]] to i32
// IR-NEXT:    [[CALL90:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.3, i64 noundef [[CALL87]], i32 noundef [[CONV89]])
// IR-NEXT:    [[CALL91:%.*]] = call noundef i64 @_Z3mulIlET_S0_S0_(i64 noundef 9223372036854775807, i64 noundef 2)
// IR-NEXT:    [[CALL92:%.*]] = call noundef zeroext i1 @_Z6mul_ofIlEbT_S0_(i64 noundef 9223372036854775807, i64 noundef 2)
// IR-NEXT:    [[CONV93:%.*]] = zext i1 [[CALL92]] to i32
// IR-NEXT:    [[CALL94:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.3, i64 noundef [[CALL91]], i32 noundef [[CONV93]])
// IR-NEXT:    [[CALL95:%.*]] = call noundef i64 @_Z3mulImET_S0_S0_(i64 noundef 3, i64 noundef 2)
// IR-NEXT:    [[CALL96:%.*]] = call noundef zeroext i1 @_Z6mul_ofImEbT_S0_(i64 noundef 3, i64 noundef 2)
// IR-NEXT:    [[CONV97:%.*]] = zext i1 [[CALL96]] to i32
// IR-NEXT:    [[CALL98:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.4, i64 noundef [[CALL95]], i32 noundef [[CONV97]])
// IR-NEXT:    [[CALL99:%.*]] = call noundef i64 @_Z3mulImET_S0_S0_(i64 noundef 5764607523034234880, i64 noundef 2)
// IR-NEXT:    [[CALL100:%.*]] = call noundef zeroext i1 @_Z6mul_ofImEbT_S0_(i64 noundef 5764607523034234880, i64 noundef 2)
// IR-NEXT:    [[CONV101:%.*]] = zext i1 [[CALL100]] to i32
// IR-NEXT:    [[CALL102:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.4, i64 noundef [[CALL99]], i32 noundef [[CONV101]])
// IR-NEXT:    [[CALL103:%.*]] = call noundef i64 @_Z3mulImET_S0_S0_(i64 noundef -9223372036854775808, i64 noundef 2)
// IR-NEXT:    [[CALL104:%.*]] = call noundef zeroext i1 @_Z6mul_ofImEbT_S0_(i64 noundef -9223372036854775808, i64 noundef 2)
// IR-NEXT:    [[CONV105:%.*]] = zext i1 [[CALL104]] to i32
// IR-NEXT:    [[CALL106:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str.4, i64 noundef [[CALL103]], i32 noundef [[CONV105]])
// IR-NEXT:    store i128 3, ptr [[COERCE]], align 16
// IR-NEXT:    [[TMP0:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE]], i32 0, i32 0
// IR-NEXT:    [[TMP1:%.*]] = load i64, ptr [[TMP0]], align 16
// IR-NEXT:    [[TMP2:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE]], i32 0, i32 1
// IR-NEXT:    [[TMP3:%.*]] = load i64, ptr [[TMP2]], align 8
// IR-NEXT:    store i128 2, ptr [[COERCE107]], align 16
// IR-NEXT:    [[TMP4:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE107]], i32 0, i32 0
// IR-NEXT:    [[TMP5:%.*]] = load i64, ptr [[TMP4]], align 16
// IR-NEXT:    [[TMP6:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE107]], i32 0, i32 1
// IR-NEXT:    [[TMP7:%.*]] = load i64, ptr [[TMP6]], align 8
// IR-NEXT:    call void @_Z8smul_128nn(i64 noundef [[TMP1]], i64 noundef [[TMP3]], i64 noundef [[TMP5]], i64 noundef [[TMP7]])
// IR-NEXT:    store i128 -170141183460469231731687303715884105728, ptr [[COERCE108]], align 16
// IR-NEXT:    [[TMP8:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE108]], i32 0, i32 0
// IR-NEXT:    [[TMP9:%.*]] = load i64, ptr [[TMP8]], align 16
// IR-NEXT:    [[TMP10:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE108]], i32 0, i32 1
// IR-NEXT:    [[TMP11:%.*]] = load i64, ptr [[TMP10]], align 8
// IR-NEXT:    store i128 2, ptr [[COERCE109]], align 16
// IR-NEXT:    [[TMP12:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE109]], i32 0, i32 0
// IR-NEXT:    [[TMP13:%.*]] = load i64, ptr [[TMP12]], align 16
// IR-NEXT:    [[TMP14:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE109]], i32 0, i32 1
// IR-NEXT:    [[TMP15:%.*]] = load i64, ptr [[TMP14]], align 8
// IR-NEXT:    call void @_Z8smul_128nn(i64 noundef [[TMP9]], i64 noundef [[TMP11]], i64 noundef [[TMP13]], i64 noundef [[TMP15]])
// IR-NEXT:    store i128 170141183460469231731687303715884105727, ptr [[COERCE110]], align 16
// IR-NEXT:    [[TMP16:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE110]], i32 0, i32 0
// IR-NEXT:    [[TMP17:%.*]] = load i64, ptr [[TMP16]], align 16
// IR-NEXT:    [[TMP18:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE110]], i32 0, i32 1
// IR-NEXT:    [[TMP19:%.*]] = load i64, ptr [[TMP18]], align 8
// IR-NEXT:    store i128 2, ptr [[COERCE111]], align 16
// IR-NEXT:    [[TMP20:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE111]], i32 0, i32 0
// IR-NEXT:    [[TMP21:%.*]] = load i64, ptr [[TMP20]], align 16
// IR-NEXT:    [[TMP22:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE111]], i32 0, i32 1
// IR-NEXT:    [[TMP23:%.*]] = load i64, ptr [[TMP22]], align 8
// IR-NEXT:    call void @_Z8smul_128nn(i64 noundef [[TMP17]], i64 noundef [[TMP19]], i64 noundef [[TMP21]], i64 noundef [[TMP23]])
// IR-NEXT:    store i128 3, ptr [[COERCE112]], align 16
// IR-NEXT:    [[TMP24:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE112]], i32 0, i32 0
// IR-NEXT:    [[TMP25:%.*]] = load i64, ptr [[TMP24]], align 16
// IR-NEXT:    [[TMP26:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE112]], i32 0, i32 1
// IR-NEXT:    [[TMP27:%.*]] = load i64, ptr [[TMP26]], align 8
// IR-NEXT:    store i128 2, ptr [[COERCE113]], align 16
// IR-NEXT:    [[TMP28:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE113]], i32 0, i32 0
// IR-NEXT:    [[TMP29:%.*]] = load i64, ptr [[TMP28]], align 16
// IR-NEXT:    [[TMP30:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE113]], i32 0, i32 1
// IR-NEXT:    [[TMP31:%.*]] = load i64, ptr [[TMP30]], align 8
// IR-NEXT:    call void @_Z8umul_128oo(i64 noundef [[TMP25]], i64 noundef [[TMP27]], i64 noundef [[TMP29]], i64 noundef [[TMP31]])
// IR-NEXT:    store i128 106338239662793269832304564822427566080, ptr [[COERCE114]], align 16
// IR-NEXT:    [[TMP32:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE114]], i32 0, i32 0
// IR-NEXT:    [[TMP33:%.*]] = load i64, ptr [[TMP32]], align 16
// IR-NEXT:    [[TMP34:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE114]], i32 0, i32 1
// IR-NEXT:    [[TMP35:%.*]] = load i64, ptr [[TMP34]], align 8
// IR-NEXT:    store i128 2, ptr [[COERCE115]], align 16
// IR-NEXT:    [[TMP36:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE115]], i32 0, i32 0
// IR-NEXT:    [[TMP37:%.*]] = load i64, ptr [[TMP36]], align 16
// IR-NEXT:    [[TMP38:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE115]], i32 0, i32 1
// IR-NEXT:    [[TMP39:%.*]] = load i64, ptr [[TMP38]], align 8
// IR-NEXT:    call void @_Z8umul_128oo(i64 noundef [[TMP33]], i64 noundef [[TMP35]], i64 noundef [[TMP37]], i64 noundef [[TMP39]])
// IR-NEXT:    store i128 -170141183460469231731687303715884105728, ptr [[COERCE116]], align 16
// IR-NEXT:    [[TMP40:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE116]], i32 0, i32 0
// IR-NEXT:    [[TMP41:%.*]] = load i64, ptr [[TMP40]], align 16
// IR-NEXT:    [[TMP42:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE116]], i32 0, i32 1
// IR-NEXT:    [[TMP43:%.*]] = load i64, ptr [[TMP42]], align 8
// IR-NEXT:    store i128 2, ptr [[COERCE117]], align 16
// IR-NEXT:    [[TMP44:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE117]], i32 0, i32 0
// IR-NEXT:    [[TMP45:%.*]] = load i64, ptr [[TMP44]], align 16
// IR-NEXT:    [[TMP46:%.*]] = getelementptr inbounds { i64, i64 }, ptr [[COERCE117]], i32 0, i32 1
// IR-NEXT:    [[TMP47:%.*]] = load i64, ptr [[TMP46]], align 8
// IR-NEXT:    call void @_Z8umul_128oo(i64 noundef [[TMP41]], i64 noundef [[TMP43]], i64 noundef [[TMP45]], i64 noundef [[TMP47]])
// IR-NEXT:    ret i32 0
//
//
// IR-LABEL: define linkonce_odr dso_local noundef signext i8 @_Z3mulIaET_S0_S0_(
// IR-SAME: i8 noundef signext [[A:%.*]], i8 noundef signext [[B:%.*]]) #[[ATTR4:[0-9]+]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i8, align 1
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i8, align 1
// IR-NEXT:    [[RES:%.*]] = alloca i8, align 1
// IR-NEXT:    store i8 [[A]], ptr [[A_ADDR]], align 1
// IR-NEXT:    store i8 [[B]], ptr [[B_ADDR]], align 1
// IR-NEXT:    [[TMP0:%.*]] = load i8, ptr [[A_ADDR]], align 1
// IR-NEXT:    [[TMP1:%.*]] = load i8, ptr [[B_ADDR]], align 1
// IR-NEXT:    [[TMP2:%.*]] = call { i8, i1 } @llvm.smul.with.overflow.i8(i8 [[TMP0]], i8 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i8, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i8, i1 } [[TMP2]], 0
// IR-NEXT:    store i8 [[TMP4]], ptr [[RES]], align 1
// IR-NEXT:    [[TMP5:%.*]] = load i8, ptr [[RES]], align 1
// IR-NEXT:    ret i8 [[TMP5]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef zeroext i1 @_Z6mul_ofIaEbT_S0_(
// IR-SAME: i8 noundef signext [[A:%.*]], i8 noundef signext [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i8, align 1
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i8, align 1
// IR-NEXT:    [[RES:%.*]] = alloca i8, align 1
// IR-NEXT:    store i8 [[A]], ptr [[A_ADDR]], align 1
// IR-NEXT:    store i8 [[B]], ptr [[B_ADDR]], align 1
// IR-NEXT:    [[TMP0:%.*]] = load i8, ptr [[A_ADDR]], align 1
// IR-NEXT:    [[TMP1:%.*]] = load i8, ptr [[B_ADDR]], align 1
// IR-NEXT:    [[TMP2:%.*]] = call { i8, i1 } @llvm.smul.with.overflow.i8(i8 [[TMP0]], i8 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i8, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i8, i1 } [[TMP2]], 0
// IR-NEXT:    store i8 [[TMP4]], ptr [[RES]], align 1
// IR-NEXT:    ret i1 [[TMP3]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef zeroext i8 @_Z3mulIhET_S0_S0_(
// IR-SAME: i8 noundef zeroext [[A:%.*]], i8 noundef zeroext [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i8, align 1
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i8, align 1
// IR-NEXT:    [[RES:%.*]] = alloca i8, align 1
// IR-NEXT:    store i8 [[A]], ptr [[A_ADDR]], align 1
// IR-NEXT:    store i8 [[B]], ptr [[B_ADDR]], align 1
// IR-NEXT:    [[TMP0:%.*]] = load i8, ptr [[A_ADDR]], align 1
// IR-NEXT:    [[TMP1:%.*]] = load i8, ptr [[B_ADDR]], align 1
// IR-NEXT:    [[TMP2:%.*]] = call { i8, i1 } @llvm.umul.with.overflow.i8(i8 [[TMP0]], i8 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i8, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i8, i1 } [[TMP2]], 0
// IR-NEXT:    store i8 [[TMP4]], ptr [[RES]], align 1
// IR-NEXT:    [[TMP5:%.*]] = load i8, ptr [[RES]], align 1
// IR-NEXT:    ret i8 [[TMP5]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef zeroext i1 @_Z6mul_ofIhEbT_S0_(
// IR-SAME: i8 noundef zeroext [[A:%.*]], i8 noundef zeroext [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i8, align 1
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i8, align 1
// IR-NEXT:    [[RES:%.*]] = alloca i8, align 1
// IR-NEXT:    store i8 [[A]], ptr [[A_ADDR]], align 1
// IR-NEXT:    store i8 [[B]], ptr [[B_ADDR]], align 1
// IR-NEXT:    [[TMP0:%.*]] = load i8, ptr [[A_ADDR]], align 1
// IR-NEXT:    [[TMP1:%.*]] = load i8, ptr [[B_ADDR]], align 1
// IR-NEXT:    [[TMP2:%.*]] = call { i8, i1 } @llvm.umul.with.overflow.i8(i8 [[TMP0]], i8 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i8, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i8, i1 } [[TMP2]], 0
// IR-NEXT:    store i8 [[TMP4]], ptr [[RES]], align 1
// IR-NEXT:    ret i1 [[TMP3]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef signext i16 @_Z3mulIsET_S0_S0_(
// IR-SAME: i16 noundef signext [[A:%.*]], i16 noundef signext [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i16, align 2
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i16, align 2
// IR-NEXT:    [[RES:%.*]] = alloca i16, align 2
// IR-NEXT:    store i16 [[A]], ptr [[A_ADDR]], align 2
// IR-NEXT:    store i16 [[B]], ptr [[B_ADDR]], align 2
// IR-NEXT:    [[TMP0:%.*]] = load i16, ptr [[A_ADDR]], align 2
// IR-NEXT:    [[TMP1:%.*]] = load i16, ptr [[B_ADDR]], align 2
// IR-NEXT:    [[TMP2:%.*]] = call { i16, i1 } @llvm.smul.with.overflow.i16(i16 [[TMP0]], i16 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i16, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i16, i1 } [[TMP2]], 0
// IR-NEXT:    store i16 [[TMP4]], ptr [[RES]], align 2
// IR-NEXT:    [[TMP5:%.*]] = load i16, ptr [[RES]], align 2
// IR-NEXT:    ret i16 [[TMP5]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef zeroext i1 @_Z6mul_ofIsEbT_S0_(
// IR-SAME: i16 noundef signext [[A:%.*]], i16 noundef signext [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i16, align 2
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i16, align 2
// IR-NEXT:    [[RES:%.*]] = alloca i16, align 2
// IR-NEXT:    store i16 [[A]], ptr [[A_ADDR]], align 2
// IR-NEXT:    store i16 [[B]], ptr [[B_ADDR]], align 2
// IR-NEXT:    [[TMP0:%.*]] = load i16, ptr [[A_ADDR]], align 2
// IR-NEXT:    [[TMP1:%.*]] = load i16, ptr [[B_ADDR]], align 2
// IR-NEXT:    [[TMP2:%.*]] = call { i16, i1 } @llvm.smul.with.overflow.i16(i16 [[TMP0]], i16 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i16, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i16, i1 } [[TMP2]], 0
// IR-NEXT:    store i16 [[TMP4]], ptr [[RES]], align 2
// IR-NEXT:    ret i1 [[TMP3]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef zeroext i16 @_Z3mulItET_S0_S0_(
// IR-SAME: i16 noundef zeroext [[A:%.*]], i16 noundef zeroext [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i16, align 2
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i16, align 2
// IR-NEXT:    [[RES:%.*]] = alloca i16, align 2
// IR-NEXT:    store i16 [[A]], ptr [[A_ADDR]], align 2
// IR-NEXT:    store i16 [[B]], ptr [[B_ADDR]], align 2
// IR-NEXT:    [[TMP0:%.*]] = load i16, ptr [[A_ADDR]], align 2
// IR-NEXT:    [[TMP1:%.*]] = load i16, ptr [[B_ADDR]], align 2
// IR-NEXT:    [[TMP2:%.*]] = call { i16, i1 } @llvm.umul.with.overflow.i16(i16 [[TMP0]], i16 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i16, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i16, i1 } [[TMP2]], 0
// IR-NEXT:    store i16 [[TMP4]], ptr [[RES]], align 2
// IR-NEXT:    [[TMP5:%.*]] = load i16, ptr [[RES]], align 2
// IR-NEXT:    ret i16 [[TMP5]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef zeroext i1 @_Z6mul_ofItEbT_S0_(
// IR-SAME: i16 noundef zeroext [[A:%.*]], i16 noundef zeroext [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i16, align 2
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i16, align 2
// IR-NEXT:    [[RES:%.*]] = alloca i16, align 2
// IR-NEXT:    store i16 [[A]], ptr [[A_ADDR]], align 2
// IR-NEXT:    store i16 [[B]], ptr [[B_ADDR]], align 2
// IR-NEXT:    [[TMP0:%.*]] = load i16, ptr [[A_ADDR]], align 2
// IR-NEXT:    [[TMP1:%.*]] = load i16, ptr [[B_ADDR]], align 2
// IR-NEXT:    [[TMP2:%.*]] = call { i16, i1 } @llvm.umul.with.overflow.i16(i16 [[TMP0]], i16 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i16, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i16, i1 } [[TMP2]], 0
// IR-NEXT:    store i16 [[TMP4]], ptr [[RES]], align 2
// IR-NEXT:    ret i1 [[TMP3]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef i32 @_Z3mulIiET_S0_S0_(
// IR-SAME: i32 noundef [[A:%.*]], i32 noundef [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i32, align 4
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i32, align 4
// IR-NEXT:    [[RES:%.*]] = alloca i32, align 4
// IR-NEXT:    store i32 [[A]], ptr [[A_ADDR]], align 4
// IR-NEXT:    store i32 [[B]], ptr [[B_ADDR]], align 4
// IR-NEXT:    [[TMP0:%.*]] = load i32, ptr [[A_ADDR]], align 4
// IR-NEXT:    [[TMP1:%.*]] = load i32, ptr [[B_ADDR]], align 4
// IR-NEXT:    [[TMP2:%.*]] = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 [[TMP0]], i32 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i32, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i32, i1 } [[TMP2]], 0
// IR-NEXT:    store i32 [[TMP4]], ptr [[RES]], align 4
// IR-NEXT:    [[TMP5:%.*]] = load i32, ptr [[RES]], align 4
// IR-NEXT:    ret i32 [[TMP5]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef zeroext i1 @_Z6mul_ofIiEbT_S0_(
// IR-SAME: i32 noundef [[A:%.*]], i32 noundef [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i32, align 4
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i32, align 4
// IR-NEXT:    [[RES:%.*]] = alloca i32, align 4
// IR-NEXT:    store i32 [[A]], ptr [[A_ADDR]], align 4
// IR-NEXT:    store i32 [[B]], ptr [[B_ADDR]], align 4
// IR-NEXT:    [[TMP0:%.*]] = load i32, ptr [[A_ADDR]], align 4
// IR-NEXT:    [[TMP1:%.*]] = load i32, ptr [[B_ADDR]], align 4
// IR-NEXT:    [[TMP2:%.*]] = call { i32, i1 } @llvm.smul.with.overflow.i32(i32 [[TMP0]], i32 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i32, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i32, i1 } [[TMP2]], 0
// IR-NEXT:    store i32 [[TMP4]], ptr [[RES]], align 4
// IR-NEXT:    ret i1 [[TMP3]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef i32 @_Z3mulIjET_S0_S0_(
// IR-SAME: i32 noundef [[A:%.*]], i32 noundef [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i32, align 4
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i32, align 4
// IR-NEXT:    [[RES:%.*]] = alloca i32, align 4
// IR-NEXT:    store i32 [[A]], ptr [[A_ADDR]], align 4
// IR-NEXT:    store i32 [[B]], ptr [[B_ADDR]], align 4
// IR-NEXT:    [[TMP0:%.*]] = load i32, ptr [[A_ADDR]], align 4
// IR-NEXT:    [[TMP1:%.*]] = load i32, ptr [[B_ADDR]], align 4
// IR-NEXT:    [[TMP2:%.*]] = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 [[TMP0]], i32 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i32, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i32, i1 } [[TMP2]], 0
// IR-NEXT:    store i32 [[TMP4]], ptr [[RES]], align 4
// IR-NEXT:    [[TMP5:%.*]] = load i32, ptr [[RES]], align 4
// IR-NEXT:    ret i32 [[TMP5]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef zeroext i1 @_Z6mul_ofIjEbT_S0_(
// IR-SAME: i32 noundef [[A:%.*]], i32 noundef [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i32, align 4
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i32, align 4
// IR-NEXT:    [[RES:%.*]] = alloca i32, align 4
// IR-NEXT:    store i32 [[A]], ptr [[A_ADDR]], align 4
// IR-NEXT:    store i32 [[B]], ptr [[B_ADDR]], align 4
// IR-NEXT:    [[TMP0:%.*]] = load i32, ptr [[A_ADDR]], align 4
// IR-NEXT:    [[TMP1:%.*]] = load i32, ptr [[B_ADDR]], align 4
// IR-NEXT:    [[TMP2:%.*]] = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 [[TMP0]], i32 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i32, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i32, i1 } [[TMP2]], 0
// IR-NEXT:    store i32 [[TMP4]], ptr [[RES]], align 4
// IR-NEXT:    ret i1 [[TMP3]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef i64 @_Z3mulIlET_S0_S0_(
// IR-SAME: i64 noundef [[A:%.*]], i64 noundef [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i64, align 8
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i64, align 8
// IR-NEXT:    [[RES:%.*]] = alloca i64, align 8
// IR-NEXT:    store i64 [[A]], ptr [[A_ADDR]], align 8
// IR-NEXT:    store i64 [[B]], ptr [[B_ADDR]], align 8
// IR-NEXT:    [[TMP0:%.*]] = load i64, ptr [[A_ADDR]], align 8
// IR-NEXT:    [[TMP1:%.*]] = load i64, ptr [[B_ADDR]], align 8
// IR-NEXT:    [[TMP2:%.*]] = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 [[TMP0]], i64 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i64, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i64, i1 } [[TMP2]], 0
// IR-NEXT:    store i64 [[TMP4]], ptr [[RES]], align 8
// IR-NEXT:    [[TMP5:%.*]] = load i64, ptr [[RES]], align 8
// IR-NEXT:    ret i64 [[TMP5]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef zeroext i1 @_Z6mul_ofIlEbT_S0_(
// IR-SAME: i64 noundef [[A:%.*]], i64 noundef [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i64, align 8
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i64, align 8
// IR-NEXT:    [[RES:%.*]] = alloca i64, align 8
// IR-NEXT:    store i64 [[A]], ptr [[A_ADDR]], align 8
// IR-NEXT:    store i64 [[B]], ptr [[B_ADDR]], align 8
// IR-NEXT:    [[TMP0:%.*]] = load i64, ptr [[A_ADDR]], align 8
// IR-NEXT:    [[TMP1:%.*]] = load i64, ptr [[B_ADDR]], align 8
// IR-NEXT:    [[TMP2:%.*]] = call { i64, i1 } @llvm.smul.with.overflow.i64(i64 [[TMP0]], i64 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i64, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i64, i1 } [[TMP2]], 0
// IR-NEXT:    store i64 [[TMP4]], ptr [[RES]], align 8
// IR-NEXT:    ret i1 [[TMP3]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef i64 @_Z3mulImET_S0_S0_(
// IR-SAME: i64 noundef [[A:%.*]], i64 noundef [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i64, align 8
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i64, align 8
// IR-NEXT:    [[RES:%.*]] = alloca i64, align 8
// IR-NEXT:    store i64 [[A]], ptr [[A_ADDR]], align 8
// IR-NEXT:    store i64 [[B]], ptr [[B_ADDR]], align 8
// IR-NEXT:    [[TMP0:%.*]] = load i64, ptr [[A_ADDR]], align 8
// IR-NEXT:    [[TMP1:%.*]] = load i64, ptr [[B_ADDR]], align 8
// IR-NEXT:    [[TMP2:%.*]] = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 [[TMP0]], i64 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i64, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i64, i1 } [[TMP2]], 0
// IR-NEXT:    store i64 [[TMP4]], ptr [[RES]], align 8
// IR-NEXT:    [[TMP5:%.*]] = load i64, ptr [[RES]], align 8
// IR-NEXT:    ret i64 [[TMP5]]
//
//
// IR-LABEL: define linkonce_odr dso_local noundef zeroext i1 @_Z6mul_ofImEbT_S0_(
// IR-SAME: i64 noundef [[A:%.*]], i64 noundef [[B:%.*]]) #[[ATTR4]] comdat {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[A_ADDR:%.*]] = alloca i64, align 8
// IR-NEXT:    [[B_ADDR:%.*]] = alloca i64, align 8
// IR-NEXT:    [[RES:%.*]] = alloca i64, align 8
// IR-NEXT:    store i64 [[A]], ptr [[A_ADDR]], align 8
// IR-NEXT:    store i64 [[B]], ptr [[B_ADDR]], align 8
// IR-NEXT:    [[TMP0:%.*]] = load i64, ptr [[A_ADDR]], align 8
// IR-NEXT:    [[TMP1:%.*]] = load i64, ptr [[B_ADDR]], align 8
// IR-NEXT:    [[TMP2:%.*]] = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 [[TMP0]], i64 [[TMP1]])
// IR-NEXT:    [[TMP3:%.*]] = extractvalue { i64, i1 } [[TMP2]], 1
// IR-NEXT:    [[TMP4:%.*]] = extractvalue { i64, i1 } [[TMP2]], 0
// IR-NEXT:    store i64 [[TMP4]], ptr [[RES]], align 8
// IR-NEXT:    ret i1 [[TMP3]]
//
