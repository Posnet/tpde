// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --version 5
// SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
//
// SPDX-License-Identifier: LicenseRef-Proprietary

// RUN: %clang -emit-llvm -S %s -o - -std=c++20 | FileCheck %s -check-prefixes=IR --dump-input always
// RUN: true && clang -std=c++20 -S -emit-llvm -o %t.ll %s && tpde_llvm -o %t.o %t.ll && clang -o %t %t.o && %t | FileCheck %s -check-prefixes=OUT --dump-input always

#include <bit>
#include <limits>
#include <cstdio>

// IR-LABEL: define dso_local i32 @main(
// IR-SAME: ) #[[ATTR0:[0-9]+]] {
// IR-NEXT:  [[ENTRY:.*:]]
// IR-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4
// IR-NEXT:    store i32 0, ptr [[RETVAL]], align 4
// IR-NEXT:    [[TMP0:%.*]] = call float @llvm.powi.f32.i32(float 1.000000e+00, i32 10)
// IR-NEXT:    [[CONV:%.*]] = fpext float [[TMP0]] to double
// IR-NEXT:    [[CALL:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef [[CONV]])
// IR-NEXT:    [[TMP1:%.*]] = call float @llvm.powi.f32.i32(float 2.000000e+00, i32 10)
// IR-NEXT:    [[CONV1:%.*]] = fpext float [[TMP1]] to double
// IR-NEXT:    [[CALL2:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef [[CONV1]])
// IR-NEXT:    [[TMP2:%.*]] = call float @llvm.powi.f32.i32(float 2.000000e+00, i32 5)
// IR-NEXT:    [[CONV3:%.*]] = fpext float [[TMP2]] to double
// IR-NEXT:    [[CALL4:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef [[CONV3]])
// IR-NEXT:    [[TMP3:%.*]] = call double @llvm.powi.f64.i32(double 1.000000e+00, i32 10)
// IR-NEXT:    [[CALL5:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef [[TMP3]])
// IR-NEXT:    [[TMP4:%.*]] = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 10)
// IR-NEXT:    [[CALL6:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef [[TMP4]])
// IR-NEXT:    [[TMP5:%.*]] = call double @llvm.powi.f64.i32(double 2.000000e+00, i32 5)
// IR-NEXT:    [[CALL7:%.*]] = call i32 (ptr, ...) @printf(ptr noundef @.str, double noundef [[TMP5]])
// IR-NEXT:    ret i32 0
//
extern "C" int main() {
    // OUT: 1.000000
    printf("%f\n", __builtin_powif(1.0f, 10));
    // OUT: 1024.000000
    printf("%f\n", __builtin_powif(2.0f, 10));
    // OUT: 32.000000
    printf("%f\n", __builtin_powif(2.0f, 5));

    // OUT: 1.000000
    printf("%f\n", __builtin_powi(1.0, 10));
    // OUT: 1024.000000
    printf("%f\n", __builtin_powi(2.0, 10));
    // OUT: 32.000000
    printf("%f\n", __builtin_powi(2.0, 5));

    return 0;
}
