; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define i8 @ssub_sat_i8(i8, i8) {
; X64-LABEL: <ssub_sat_i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    cmp dil, sil
; X64-NEXT:    setns al
; X64-NEXT:    add eax, 0x7f
; X64-NEXT:    sub dil, sil
; X64-NEXT:    movzx ecx, dil
; X64-NEXT:    cmovo ecx, eax
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: <ssub_sat_i8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxtb w0, w0
; ARM64-NEXT:    mov w2, #0x7f // =127
; ARM64-NEXT:    sub w0, w0, w1, sxtb
; ARM64-NEXT:    cmp w0, #0x7f
; ARM64-NEXT:    csel w2, w0, w2, lt
; ARM64-NEXT:    mov w0, #-0x80 // =-128
; ARM64-NEXT:    cmn w2, #0x80
; ARM64-NEXT:    csel w1, w2, w0, gt
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = call i8 @llvm.ssub.sat.i8(i8 %0, i8 %1)
  ret i8 %r
}

define i16 @ssub_sat_i16(i16, i16) {
; X64-LABEL: <ssub_sat_i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    cmp di, si
; X64-NEXT:    setns al
; X64-NEXT:    add eax, 0x7fff
; X64-NEXT:    sub di, si
; X64-NEXT:    cmovno eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: <ssub_sat_i16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sxth w0, w0
; ARM64-NEXT:    mov w2, #0x7fff // =32767
; ARM64-NEXT:    sub w0, w0, w1, sxth
; ARM64-NEXT:    cmp w0, w2
; ARM64-NEXT:    csel w0, w0, w2, lt
; ARM64-NEXT:    mov w2, #-0x8000 // =-32768
; ARM64-NEXT:    cmn w0, #0x8, lsl #12 // =0x8000
; ARM64-NEXT:    csel w1, w0, w2, gt
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = call i16 @llvm.ssub.sat.i16(i16 %0, i16 %1)
  ret i16 %r
}

define i32 @ssub_sat_i32(i32, i32) {
; X64-LABEL: <ssub_sat_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    setns al
; X64-NEXT:    add eax, 0x7fffffff
; X64-NEXT:    sub edi, esi
; X64-NEXT:    cmovno eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: <ssub_sat_i32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs w0, w0, w1
; ARM64-NEXT:    asr w1, w0, #31
; ARM64-NEXT:    eor w1, w1, #0x80000000
; ARM64-NEXT:    csel w2, w1, w0, vs
; ARM64-NEXT:    mov w0, w2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = call i32 @llvm.ssub.sat.i32(i32 %0, i32 %1)
  ret i32 %r
}

define i64 @ssub_sat_i64(i64, i64) {
; X64-LABEL: <ssub_sat_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    xor eax, eax
; X64-NEXT:    cmp rdi, rsi
; X64-NEXT:    setns al
; X64-NEXT:    movabs rcx, 0x7fffffffffffffff
; X64-NEXT:    add rcx, rax
; X64-NEXT:    sub rdi, rsi
; X64-NEXT:    cmovno rcx, rdi
; X64-NEXT:    mov rax, rcx
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: <ssub_sat_i64>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs x0, x0, x1
; ARM64-NEXT:    asr x1, x0, #63
; ARM64-NEXT:    eor x1, x1, #0x8000000000000000
; ARM64-NEXT:    csel x2, x1, x0, vs
; ARM64-NEXT:    mov x0, x2
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = call i64 @llvm.ssub.sat.i64(i64 %0, i64 %1)
  ret i64 %r
}

define i8 @usub_sat_i8(i8, i8) {
; X64-LABEL: <usub_sat_i8>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub dil, sil
; X64-NEXT:    movzx ecx, dil
; X64-NEXT:    cmovb ecx, eax
; X64-NEXT:    mov eax, ecx
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: <usub_sat_i8>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    and w0, w0, #0xff
; ARM64-NEXT:    subs w0, w0, w1, uxtb
; ARM64-NEXT:    csel w1, wzr, w0, lo
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = call i8 @llvm.usub.sat.i8(i8 %0, i8 %1)
  ret i8 %r
}

define i16 @usub_sat_i16(i16, i16) {
; X64-LABEL: <usub_sat_i16>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub di, si
; X64-NEXT:    cmovae eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: <usub_sat_i16>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    and w0, w0, #0xffff
; ARM64-NEXT:    subs w0, w0, w1, uxth
; ARM64-NEXT:    csel w1, wzr, w0, lo
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = call i16 @llvm.usub.sat.i16(i16 %0, i16 %1)
  ret i16 %r
}

define i32 @usub_sat_i32(i32, i32) {
; X64-LABEL: <usub_sat_i32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub edi, esi
; X64-NEXT:    cmovae eax, edi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: <usub_sat_i32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs w0, w0, w1
; ARM64-NEXT:    csel w1, wzr, w0, lo
; ARM64-NEXT:    mov w0, w1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = call i32 @llvm.usub.sat.i32(i32 %0, i32 %1)
  ret i32 %r
}

define i64 @usub_sat_i64(i64, i64) {
; X64-LABEL: <usub_sat_i64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    xor eax, eax
; X64-NEXT:    sub rdi, rsi
; X64-NEXT:    cmovae rax, rdi
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <usub_sat_i64>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    subs x0, x0, x1
; ARM64-NEXT:    csel x1, xzr, x0, lo
; ARM64-NEXT:    mov x0, x1
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %r = call i64 @llvm.usub.sat.i64(i64 %0, i64 %1)
  ret i64 %r
}

