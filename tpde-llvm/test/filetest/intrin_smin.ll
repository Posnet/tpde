; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

define i17 @smini17(i17 %0, i17 %1) {
; X64-LABEL: <smini17>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    shl edi, 0xf
; X64-NEXT:    sar edi, 0xf
; X64-NEXT:    shl esi, 0xf
; X64-NEXT:    sar esi, 0xf
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    cmovl esi, edi
; X64-NEXT:    mov eax, esi
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: <smini17>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx w0, w0, #0, #17
; ARM64-NEXT:    sbfx w1, w1, #0, #17
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    csel w0, w0, w1, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %res = call i17 @llvm.smin.i17(i17 %0, i17 %1)
  ret i17 %res
}

define i32 @smini32(i32 %0, i32 %1) {
; X64-LABEL: <smini32>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    cmp edi, esi
; X64-NEXT:    cmovl esi, edi
; X64-NEXT:    mov eax, esi
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: <smini32>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp w0, w1
; ARM64-NEXT:    csel w0, w0, w1, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %res = call i32 @llvm.smin.i32(i32 %0, i32 %1)
  ret i32 %res
}

define i37 @smini37(i37 %0, i37 %1) {
; X64-LABEL: <smini37>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    shl rdi, 0x1b
; X64-NEXT:    sar rdi, 0x1b
; X64-NEXT:    shl rsi, 0x1b
; X64-NEXT:    sar rsi, 0x1b
; X64-NEXT:    cmp rdi, rsi
; X64-NEXT:    cmovl rsi, rdi
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: <smini37>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sbfx x0, x0, #0, #37
; ARM64-NEXT:    sbfx x1, x1, #0, #37
; ARM64-NEXT:    cmp x0, x1
; ARM64-NEXT:    csel x0, x0, x1, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %res = call i37 @llvm.smin.i37(i37 %0, i37 %1)
  ret i37 %res
}

define i64 @smini64(i64 %0, i64 %1) {
; X64-LABEL: <smini64>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    cmp rdi, rsi
; X64-NEXT:    cmovl rsi, rdi
; X64-NEXT:    mov rax, rsi
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <smini64>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    cmp x0, x1
; ARM64-NEXT:    csel x0, x0, x1, lt
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
  %res = call i64 @llvm.smin.i64(i64 %0, i64 %1)
  ret i64 %res
}
