; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --version 5
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm --target=x86_64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always

declare i32 @__gxx_personality_v0(...)
declare i32 @mayThrow(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)

define i32 @invoke_manyargs() personality ptr @__gxx_personality_v0 {
; X64-LABEL: invoke_manyargs>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    sub rsp, 0x20
; X64-NEXT:    mov edi, 0x1
; X64-NEXT:    mov esi, 0x2
; X64-NEXT:    mov edx, 0x3
; X64-NEXT:    mov ecx, 0x4
; X64-NEXT:    mov r8d, 0x5
; X64-NEXT:    mov r9d, 0x6
; X64-NEXT:    mov eax, 0x7
; X64-NEXT:    mov qword ptr [rsp], rax
; X64-NEXT:    mov eax, 0x8
; X64-NEXT:    mov qword ptr [rsp + 0x8], rax
; X64-NEXT:    mov eax, 0x9
; X64-NEXT:    mov qword ptr [rsp + 0x10], rax
; X64-NEXT:    mov eax, 0xa
; X64-NEXT:    mov qword ptr [rsp + 0x18], rax
; X64-NEXT:  <L0>:
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 mayThrow-0x4
; X64-NEXT:    add rsp, 0x20
; X64-NEXT:    mov eax, 0x0
; X64-NEXT:    mov rsp, rbp
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax]
; X64-NEXT:    mov rdi, rax
; X64-NEXT:    mov esi, edx
; X64-NEXT:  <L1>:
; X64-NEXT:    call <L1>
; X64-NEXT:     R_X86_64_PLT32 _Unwind_Resume-0x4
; X64-NEXT:    ud2
;
; ARM64-LABEL: invoke_manyargs>:
; ARM64:         sub sp, sp, #0xc0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    sub sp, sp, #0x10
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    mov x1, #0x2 // =2
; ARM64-NEXT:    mov x2, #0x3 // =3
; ARM64-NEXT:    mov x3, #0x4 // =4
; ARM64-NEXT:    mov x4, #0x5 // =5
; ARM64-NEXT:    mov x5, #0x6 // =6
; ARM64-NEXT:    mov x6, #0x7 // =7
; ARM64-NEXT:    mov x7, #0x8 // =8
; ARM64-NEXT:    mov x8, #0x9 // =9
; ARM64-NEXT:    str x8, [sp]
; ARM64-NEXT:    mov x8, #0xa // =10
; ARM64-NEXT:    str x8, [sp, #0x8]
; ARM64-NEXT:    bl 0x64 <invoke_manyargs+0x44>
; ARM64-NEXT:     R_AARCH64_CALL26 mayThrow
; ARM64-NEXT:    add sp, sp, #0x10
; ARM64-NEXT:    mov w0, #0x0 // =0
; ARM64-NEXT:    mov sp, x29
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xc0
; ARM64-NEXT:    ret
; ARM64-NEXT:     ...
; ARM64-NEXT:    bl 0xa4 <invoke_manyargs+0x84>
; ARM64-NEXT:     R_AARCH64_CALL26 _Unwind_Resume
; ARM64-NEXT:    udf #0x1
entry:
  %call = invoke i32 @mayThrow(i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10)
          to label %invoke.cont unwind label %lpad

invoke.cont:
  ret i32 0

lpad:
  %0 = landingpad { ptr, i32 }
          cleanup
  resume { ptr, i32 } %0
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
