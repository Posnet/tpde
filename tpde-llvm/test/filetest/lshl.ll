; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always

define void @shl_i8_3(i8 %0) {
; X64-LABEL: shl_i8_3>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    shl edi, 0x3
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: shl_i8_3>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x3 // =3
; ARM64:    lsl w0, w0, w1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = shl i8 %0, 3
    ret void
}

define void @shl_i8_i8(i8 %0, i8 %1) {
; X64-LABEL: shl_i8_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx esi, sil
; X64:    mov ecx, esi
; X64:    shl edi, cl
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: shl_i8_i8>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    and w1, w1, #0xff
; ARM64:    lsl w0, w0, w1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = shl i8 %0, %1
    ret void
}

define void @shl_i16_3(i16 %0) {
; X64-LABEL: shl_i16_3>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    shl edi, 0x3
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: shl_i16_3>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x3 // =3
; ARM64:    lsl w0, w0, w1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = shl i16 %0, 3
    ret void
}

define void @shl_i16_i16(i16 %0, i16 %1) {
; X64-LABEL: shl_i16_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx esi, si
; X64:    mov ecx, esi
; X64:    shl edi, cl
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: shl_i16_i16>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    and w1, w1, #0xffff
; ARM64:    lsl w0, w0, w1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = shl i16 %0, %1
    ret void
}

define void @shl_i32_3(i32 %0) {
; X64-LABEL: shl_i32_3>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    shl edi, 0x3
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: shl_i32_3>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x3 // =3
; ARM64:    lsl w0, w0, w1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = shl i32 %0, 3
    ret void
}

define void @shl_i32_i32(i32 %0, i32 %1) {
; X64-LABEL: shl_i32_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov ecx, esi
; X64:    shl edi, cl
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: shl_i32_i32>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    lsl w0, w0, w1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = shl i32 %0, %1
    ret void
}

define void @shl_i64_3(i64 %0) {
; X64-LABEL: shl_i64_3>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    shl rdi, 0x3
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: shl_i64_3>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x3 // =3
; ARM64:    lsl x0, x0, x1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = shl i64 %0, 3
    ret void
}

define void @shl_i64_i64(i64 %0, i64 %1) {
; X64-LABEL: shl_i64_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov ecx, esi
; X64:    shl rdi, cl
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: shl_i64_i64>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    lsl x0, x0, x1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = shl i64 %0, %1
    ret void
}

define void @shl_i21_3(i21 %0) {
; X64-LABEL: shl_i21_3>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    shl edi, 0x3
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: shl_i21_3>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x3 // =3
; ARM64:    lsl w0, w0, w1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = shl i21 %0, 3
    ret void
}

define void @shl_i21_i21(i21 %0, i21 %1) {
; X64-LABEL: shl_i21_i21>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    and esi, 0x1fffff
; X64:    mov ecx, esi
; X64:    shl edi, cl
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
;
; ARM64-LABEL: shl_i21_i21>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x2, #0x1fffff // =2097151
; ARM64:    and w2, w2, w1
; ARM64:    lsl w0, w0, w2
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = shl i21 %0, %1
    ret void
}

define void @shl_i37_3(i37 %0) {
; X64-LABEL: shl_i37_3>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    shl rdi, 0x3
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: shl_i37_3>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x3 // =3
; ARM64:    lsl x0, x0, x1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = shl i37 %0, 3
    ret void
}

define void @shl_i37_i37(i37 %0, i37 %1) {
; X64-LABEL: shl_i37_i37>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rsi, rax
; X64:    mov ecx, esi
; X64:    shl rdi, cl
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: shl_i37_i37>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x2, #0x1fffffffff // =137438953471
; ARM64:    and x2, x2, x1
; ARM64:    lsl x0, x0, x2
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = shl i37 %0, %1
    ret void
}

define i128 @shl_i128_3(i128 %0) {
; X64-LABEL: shl_i128_3>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x48
; X64:    mov rax, rdi
; X64:    shl rax, 0x3
; X64:    mov rdx, rsi
; X64:    shl rdx, 0x3
; X64:    mov rbx, rdi
; X64:    shr rbx
; X64:    mov rcx, 0x3
; X64:    not cl
; X64:    shr rbx, cl
; X64:    or rbx, rdx
; X64:    mov rdx, rbx
; X64:    add rsp, 0x48
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: shl_i128_3>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    lsr x2, x0, #1
; ARM64:    mov x3, #0x3 // =3
; ARM64:    mvn w4, w3
; ARM64:    lsl x5, x1, x3
; ARM64:    lsl x6, x0, x3
; ARM64:    lsr x2, x2, x4
; ARM64:    orr x3, x5, x2
; ARM64:    mov x0, x6
; ARM64:    mov x1, x3
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = shl i128 %0, 3
    ret i128 %1
}

define i128 @shl_i128_74(i128 %0) {
; X64-LABEL: shl_i128_74>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov rax, rdi
; X64:    shl rax, 0xa
; X64:    xor ecx, ecx
; X64:    mov rdx, rcx
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: shl_i128_74>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x3, #0xa // =10
; ARM64:    lsl x2, x0, x3
; ARM64:    mov x3, xzr
; ARM64:    mov x0, x2
; ARM64:    mov x1, x3
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = shl i128 %0, 74
    ret i128 %1
}

define i128 @shl_i128_128(i128 %0) {
; X64-LABEL: shl_i128_128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x48
; X64:    mov rax, rdi
; X64:    shl rax, 0x80
; X64:    mov rdx, rsi
; X64:    shl rdx, 0x80
; X64:    mov rbx, rdi
; X64:    shr rbx
; X64:    mov rcx, 0x80
; X64:    not cl
; X64:    shr rbx, cl
; X64:    or rbx, rdx
; X64:    mov rdx, rbx
; X64:    add rsp, 0x48
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: shl_i128_128>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    lsr x2, x0, #1
; ARM64:    mov x3, #0x80 // =128
; ARM64:    mvn w4, w3
; ARM64:    lsl x5, x1, x3
; ARM64:    lsl x6, x0, x3
; ARM64:    lsr x2, x2, x4
; ARM64:    orr x3, x5, x2
; ARM64:    mov x0, x6
; ARM64:    mov x1, x3
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = shl i128 %0, 128
    ret i128 %1
}


define void @shl_i64_no_salvage_imm(i64 %0) {
; X64-LABEL: shl_i64_no_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov rax, rdi
; X64:    shl rax, 0x3
; X64:    mov ecx, eax
; X64:    shl rdi, cl
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: shl_i64_no_salvage_imm>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x2, #0x3 // =3
; ARM64:    lsl x1, x0, x2
; ARM64:    lsl x0, x0, x1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = shl i64 %0, 3
    %2 = shl i64 %0, %1
    ret void
}

define void @shl_i64_no_salvage_reg(i64 %0, i64 %1) {
; X64-LABEL: shl_i64_no_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov rax, rdi
; X64:    mov ecx, esi
; X64:    shl rax, cl
; X64:    mov ecx, eax
; X64:    shl rdi, cl
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: shl_i64_no_salvage_reg>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    lsl x2, x0, x1
; ARM64:    lsl x0, x0, x2
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = shl i64 %0, %1
    %3 = shl i64 %0, %2
    ret void
}

define void @shl_i37_no_salvage_imm(i37 %0) {
; X64-LABEL: shl_i37_no_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov rax, rdi
; X64:    shl rax, 0x3
; X64:    movabs rcx, 0x1fffffffff
; X64:    and rax, rcx
; X64:    mov ecx, eax
; X64:    shl rdi, cl
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: shl_i37_no_salvage_imm>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x2, #0x3 // =3
; ARM64:    lsl x1, x0, x2
; ARM64:    mov x2, #0x1fffffffff // =137438953471
; ARM64:    and x2, x2, x1
; ARM64:    lsl x0, x0, x2
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = shl i37 %0, 3
    %2 = shl i37 %0, %1
    ret void
}

define void @shl_i37_no_salvage_reg(i37 %0, i37 %1) {
; X64-LABEL: shl_i37_no_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rsi, rax
; X64:    mov rax, rdi
; X64:    mov ecx, esi
; X64:    shl rax, cl
; X64:    movabs rcx, 0x1fffffffff
; X64:    and rax, rcx
; X64:    mov ecx, eax
; X64:    shl rdi, cl
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    <unknown>
;
; ARM64-LABEL: shl_i37_no_salvage_reg>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x2, #0x1fffffffff // =137438953471
; ARM64:    and x2, x2, x1
; ARM64:    lsl x1, x0, x2
; ARM64:    mov x2, #0x1fffffffff // =137438953471
; ARM64:    and x2, x2, x1
; ARM64:    lsl x0, x0, x2
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = shl i37 %0, %1
    %3 = shl i37 %0, %2
    ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
