; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always

define void @mul_i8_1(i8 %0) {
; X64-LABEL: mul_i8_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, 0x1
; X64:    imul edi, eax
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %1 = mul nsw i8 %0, 1
    ret void
}

define void @mul_i8_-1(i8 %0) {
; X64-LABEL: mul_i8_-1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, 0xff
; X64:    imul edi, eax
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %1 = mul nsw i8 %0, -1
    ret void
}

define void @mul_i8_i8(i8 %0, i8 %1) {
; X64-LABEL: mul_i8_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    imul edi, esi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = mul nsw i8 %0, %1
    ret void
}

define void @mul_i16_1(i16 %0) {
; X64-LABEL: mul_i16_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, 0x1
; X64:    imul edi, eax
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %1 = mul nsw i16 %0, 1
    ret void
}

define void @mul_i16_-1(i16 %0) {
; X64-LABEL: mul_i16_-1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, 0xffff
; X64:    imul edi, eax
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %1 = mul nsw i16 %0, -1
    ret void
}

define void @mul_i16_i16(i16 %0, i16 %1) {
; X64-LABEL: mul_i16_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    imul edi, esi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = mul nsw i16 %0, %1
    ret void
}

define void @mul_i32_1(i32 %0) {
; X64-LABEL: mul_i32_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, 0x1
; X64:    imul edi, eax
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %1 = mul nsw i32 %0, 1
    ret void
}

define void @mul_i32_-1(i32 %0) {
; X64-LABEL: mul_i32_-1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, 0xffffffff
; X64:    imul edi, eax
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
  entry:
    %1 = mul nsw i32 %0, -1
    ret void
}

define void @mul_i32_i32(i32 %0, i32 %1) {
; X64-LABEL: mul_i32_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    imul edi, esi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = mul nsw i32 %0, %1
    ret void
}

define void @mul_i37_1(i37 %0) {
; X64-LABEL: mul_i37_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, 0x1
; X64:    imul rdi, rax
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = mul nsw i37 %0, 1
    ret void
}

define void @mul_i37_-1(i37 %0) {
; X64-LABEL: mul_i37_-1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    movabs rax, 0x1fffffffff
; X64:    imul rdi, rax
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %1 = mul nsw i37 %0, -1
    ret void
}

define void @mul_i37_i37(i37 %0, i37 %1) {
; X64-LABEL: mul_i37_i37>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    imul rdi, rsi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %2 = mul nsw i37 %0, %1
    ret void
}

define void @mul_i64_1(i64 %0) {
; X64-LABEL: mul_i64_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, 0x1
; X64:    imul rdi, rax
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = mul nsw i64 %0, 1
    ret void
}

define void @mul_i64_-1(i64 %0) {
; X64-LABEL: mul_i64_-1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, -0x1
; X64:    imul rdi, rax
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = mul nsw i64 %0, -1
    ret void
}

define void @mul_i64_i64(i64 %0, i64 %1) {
; X64-LABEL: mul_i64_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    imul rdi, rsi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %2 = mul nsw i64 %0, %1
    ret void
}

define void @mul_i128_1(i128 %0) {
; X64-LABEL: mul_i128_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    mov rcx, rsi
; X64:    mov rbx, 0x1
; X64:    imul rcx, rbx
; X64:    mov rax, rdx
; X64:    mul rdi
; X64:    add rdx, rcx
; X64:    mov r8d, 0x0
; X64:    imul r8, rdi
; X64:    add rdx, r8
; X64:    add rsp, 0x20
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = mul nsw i128 %0, 1
    ret void
}

define void @mul_i128_1_reorder(i128 %0) {
; X64-LABEL: mul_i128_1_reorder>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    mov rcx, rsi
; X64:    mov rbx, 0x1
; X64:    imul rcx, rbx
; X64:    mov rax, rdx
; X64:    mul rdi
; X64:    add rdx, rcx
; X64:    mov r8d, 0x0
; X64:    imul r8, rdi
; X64:    add rdx, r8
; X64:    add rsp, 0x20
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
    %1 = mul nsw i128 1, %0
    ret void
}

define void @mul_i128_1001_1002(i128 %0) {
; X64-LABEL: mul_i128_1001_1002>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    mov rcx, rsi
; X64:    mov rbx, 0x1002
; X64:    imul rcx, rbx
; X64:    mov rax, rdx
; X64:    mul rdi
; X64:    add rdx, rcx
; X64:    mov r8, 0x1001
; X64:    imul r8, rdi
; X64:    add rdx, r8
; X64:    add rsp, 0x20
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = mul nsw i128 %0, u0x10010000000000001002
    ret void
}

define void @mul_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: mul_i128_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov qword ptr [rbp - 0x20], rdx
; X64:    mov rbx, rsi
; X64:    imul rbx, qword ptr [rbp - 0x20]
; X64:    mov rax, rdx
; X64:    mul rdi
; X64:    add rdx, rbx
; X64:    mov r8, rcx
; X64:    imul r8, rdi
; X64:    add rdx, r8
; X64:    add rsp, 0x30
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %2 = mul nsw i128 %0, %1
    ret void
}



define void @mul_i128_salvage_imm(i128 %0) {
; X64-LABEL: mul_i128_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    mov rcx, rsi
; X64:    mov rbx, 0x1
; X64:    imul rcx, rbx
; X64:    mov rax, rdx
; X64:    mul rdi
; X64:    add rdx, rcx
; X64:    mov r8d, 0x0
; X64:    imul r8, rdi
; X64:    add rdx, r8
; X64:    add rsp, 0x20
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
  entry:
  %1 = mul nsw i128 %0, 1
  ret void
}

define void @mul_i128_salvage_reg(i128 %0, i128 %1) {
; X64-LABEL: mul_i128_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov qword ptr [rbp - 0x20], rdx
; X64:    mov rbx, rsi
; X64:    imul rbx, qword ptr [rbp - 0x20]
; X64:    mov rax, rdx
; X64:    mul rdi
; X64:    add rdx, rbx
; X64:    mov r8, rcx
; X64:    imul r8, rdi
; X64:    add rdx, r8
; X64:    add rsp, 0x30
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
  %2 = mul nsw i128 %0, %1
  ret void
}

define void @mul_i64_no_salvage_imm(i64 %0) {
; X64-LABEL: mul_i64_no_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    mov rax, rdi
; X64:    mov rcx, 0x1
; X64:    imul rax, rcx
; X64:    imul rdi, rax
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
  %1 = mul nsw i64 %0, 1
  %2 = mul nsw i64 %0, %1
  ret void
}

define void @mul_i64_no_salvage_reg(i64 %0, i64 %1) {
; X64-LABEL: mul_i64_no_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    mov rax, rdi
; X64:    imul rax, rsi
; X64:    imul rdi, rax
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
  %2 = mul nsw i64 %0, %1
  %3 = mul nsw i64 %0, %2
  ret void
}

define void @mul_i37_no_salvage_imm(i37 %0) {
; X64-LABEL: mul_i37_no_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    mov rax, rdi
; X64:    mov rcx, 0x3
; X64:    imul rax, rcx
; X64:    imul rdi, rax
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
entry:
    %1 = mul i37 %0, 3
    %2 = mul i37 %0, %1
    ret void
}

define void @mul_i37_no_salvage_reg(i37 %0, i37 %1) {
; X64-LABEL: mul_i37_no_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    mov rax, rdi
; X64:    imul rax, rsi
; X64:    imul rdi, rax
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
    %2 = mul i37 %0, %1
    %3 = mul i37 %0, %2
    ret void
}

define void @mul_i128_no_salvage_imm_1(i128 %0) {
; X64-LABEL: mul_i128_no_salvage_imm_1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rcx, rsi
; X64:    mov rbx, 0x1
; X64:    imul rcx, rbx
; X64:    mov rax, rdx
; X64:    mul rdi
; X64:    add rdx, rcx
; X64:    mov r8d, 0x0
; X64:    imul r8, rdi
; X64:    add rdx, r8
; X64:    mov qword ptr [rbp - 0x20], rax
; X64:    mov qword ptr [rbp - 0x18], rdx
; X64:    mov rcx, rsi
; X64:    imul rcx, qword ptr [rbp - 0x20]
; X64:    mov rax, rdx
; X64:    mul rdi
; X64:    add rdx, rcx
; X64:    mov rbx, qword ptr [rbp - 0x18]
; X64:    mov r8, rbx
; X64:    imul r8, rdi
; X64:    add rdx, r8
; X64:    add rsp, 0x30
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
  %1 = mul nsw i128 %0, 1
  %2 = mul nsw i128 %0, %1
  ret void
}

define void @mul_i128_no_salvage_imm_1001_1002(i128 %0) {
; X64-LABEL: mul_i128_no_salvage_imm_1001_1002>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rcx, rsi
; X64:    mov rbx, 0x1002
; X64:    imul rcx, rbx
; X64:    mov rax, rdx
; X64:    mul rdi
; X64:    add rdx, rcx
; X64:    mov r8, 0x1001
; X64:    imul r8, rdi
; X64:    add rdx, r8
; X64:    mov qword ptr [rbp - 0x20], rax
; X64:    mov qword ptr [rbp - 0x18], rdx
; X64:    mov rcx, rsi
; X64:    imul rcx, qword ptr [rbp - 0x20]
; X64:    mov rax, rdx
; X64:    mul rdi
; X64:    add rdx, rcx
; X64:    mov rbx, qword ptr [rbp - 0x18]
; X64:    mov r8, rbx
; X64:    imul r8, rdi
; X64:    add rdx, r8
; X64:    add rsp, 0x30
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
  entry:
  %1 = mul nsw i128 %0, u0x10010000000000001002
  %2 = mul nsw i128 %0, %1
  ret void
}

define void @mul_i128_no_salvage_reg(i128 %0, i128 %1) {
; X64-LABEL: mul_i128_no_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    push rbx
; X64:    nop dword ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov qword ptr [rbp - 0x20], rdx
; X64:    mov rbx, rsi
; X64:    imul rbx, qword ptr [rbp - 0x20]
; X64:    mov rax, rdx
; X64:    mul rdi
; X64:    add rdx, rbx
; X64:    mov r8, rcx
; X64:    imul r8, rdi
; X64:    add rdx, r8
; X64:    mov qword ptr [rbp - 0x30], rax
; X64:    mov qword ptr [rbp - 0x28], rdx
; X64:    mov rcx, rsi
; X64:    imul rcx, qword ptr [rbp - 0x30]
; X64:    mov rax, rdx
; X64:    mul rdi
; X64:    add rdx, rcx
; X64:    mov rbx, qword ptr [rbp - 0x28]
; X64:    mov r8, rbx
; X64:    imul r8, rdi
; X64:    add rdx, r8
; X64:    add rsp, 0x30
; X64:    pop rbx
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
  %2 = mul nsw i128 %0, %1
  %3 = mul nsw i128 %0, %2
  ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
