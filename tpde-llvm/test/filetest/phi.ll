; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64,CHECK
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64,CHECK

define i32 @phi_cycle() {
; X64-LABEL: <phi_cycle>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x20
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    mov ebx, eax
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    mov r12d, eax
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    mov ebx, r12d
; X64-NEXT:    mov r12d, eax
; X64-NEXT:    jmp <L0>
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: <phi_cycle>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    mov w20, w0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov w19, w20
; ARM64-NEXT:    mov w20, w0
; ARM64-NEXT:    b 0x40 <phi_cycle+0x20>
  br label %1
1:
  %2 = phi i32 [ 1, %0 ], [ %3, %1 ]
  %3 = phi i32 [ 2, %0 ], [ %2, %1 ]
  br label %1
}

define i32 @phi_unicycle() {
; X64-LABEL: <phi_unicycle>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x20
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    mov ebx, eax
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    mov r12d, eax
; X64-NEXT:  <L0>:
; X64-NEXT:    mov ebx, ebx
; X64-NEXT:    mov r12d, r12d
; X64-NEXT:    jmp <L0>
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: <phi_unicycle>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    mov w20, w0
; ARM64-NEXT:    mov w19, w19
; ARM64-NEXT:    mov w20, w20
; ARM64-NEXT:    b 0x90 <phi_unicycle+0x20>
  br label %1
1:
  %2 = phi i32 [ 1, %0 ], [ %2, %1 ]
  %3 = phi i32 [ 2, %0 ], [ %3, %1 ]
  br label %1
}

define ptr @phi_twocycles() {
; X64-LABEL: <phi_twocycles>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    push rbx
; X64-NEXT:    push r12
; X64-NEXT:    push r13
; X64-NEXT:    push r14
; X64-NEXT:    nop
; X64-NEXT:    sub rsp, 0x20
; X64-NEXT:    mov eax, 0x1
; X64-NEXT:    mov ebx, eax
; X64-NEXT:    mov eax, 0x2
; X64-NEXT:    mov r12d, eax
; X64-NEXT:    mov eax, 0x3
; X64-NEXT:    mov r13d, eax
; X64-NEXT:    mov eax, 0x4
; X64-NEXT:    mov r14d, eax
; X64-NEXT:  <L0>:
; X64-NEXT:    mov eax, ebx
; X64-NEXT:    mov ebx, r12d
; X64-NEXT:    mov r12d, eax
; X64-NEXT:    mov eax, r13d
; X64-NEXT:    mov r13d, r14d
; X64-NEXT:    mov r14d, eax
; X64-NEXT:    jmp <L0>
;
; ARM64-LABEL: <phi_twocycles>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    stp x19, x20, [sp, #0x10]
; ARM64-NEXT:    stp x21, x22, [sp, #0x20]
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    nop
; ARM64-NEXT:    mov x0, #0x1 // =1
; ARM64-NEXT:    mov w19, w0
; ARM64-NEXT:    mov x0, #0x2 // =2
; ARM64-NEXT:    mov w20, w0
; ARM64-NEXT:    mov x0, #0x3 // =3
; ARM64-NEXT:    mov w21, w0
; ARM64-NEXT:    mov x0, #0x4 // =4
; ARM64-NEXT:    mov w22, w0
; ARM64-NEXT:    mov w0, w19
; ARM64-NEXT:    mov w19, w20
; ARM64-NEXT:    mov w20, w0
; ARM64-NEXT:    mov w0, w21
; ARM64-NEXT:    mov w21, w22
; ARM64-NEXT:    mov w22, w0
; ARM64-NEXT:    b 0xf0 <phi_twocycles+0x40>
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i32 [ 1, %0 ], [ %3, %1 ]
  %3 = phi i32 [ 2, %0 ], [ %2, %1 ]
  %4 = phi i32 [ 3, %0 ], [ %5, %1 ]
  %5 = phi i32 [ 4, %0 ], [ %4, %1 ]
  br label %1
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
