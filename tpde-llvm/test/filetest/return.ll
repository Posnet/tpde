; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always

define i8 @ret_i8(i8 %a) {
; X64-LABEL: ret_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: ret_i8>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i8 %a
}

define signext i8 @ret_i8_sext(i8 %a) {
; X64-LABEL: ret_i8_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, edi
; X64:    movsx rax, al
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ret_i8_sext>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    sxtb x0, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i8 %a
}

define zeroext i8 @ret_i8_zext(i8 %a) {
; X64-LABEL: ret_i8_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, edi
; X64:    movzx eax, al
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i8_zext>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ubfx x0, x0, #0, #8
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i8 %a
}

define i8 @ret_i8_const() {
; X64-LABEL: ret_i8_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, 0xd
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i8_const>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0xd // =13
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i8 13
}

define zeroext i8 @ret_i8_const_zext() {
; X64-LABEL: ret_i8_const_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, 0xd
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i8_const_zext>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0xd // =13
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i8 13
}

define signext i8 @ret_i8_const_sext() {
; X64-LABEL: ret_i8_const_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, 0xff
; X64:    movsx rax, al
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i8_const_sext>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0xff // =255
; ARM64:    sxtb x0, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i8 -1
}


define i16 @ret_i16(i16 %a) {
; X64-LABEL: ret_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: ret_i16>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i16 %a
}

define signext i16 @ret_i16_sext(i16 %a) {
; X64-LABEL: ret_i16_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, edi
; X64:    movsx rax, ax
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ret_i16_sext>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    sxth x0, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i16 %a
}

define zeroext i16 @ret_i16_zext(i16 %a) {
; X64-LABEL: ret_i16_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, edi
; X64:    movzx eax, ax
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i16_zext>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ubfx x0, x0, #0, #16
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i16 %a
}

define i16 @ret_i16_const() {
; X64-LABEL: ret_i16_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, 0x539
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i16_const>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0x539 // =1337
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i16 1337
}

define i16 @ret_i16_const2() {
; X64-LABEL: ret_i16_const2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, 0xfffe
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i16_const2>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0xfffe // =65534
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i16 -2
}

define zeroext i16 @ret_i16_const_zext() {
; X64-LABEL: ret_i16_const_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, 0x53a
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i16_const_zext>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0x53a // =1338
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i16 1338
}

define signext i16 @ret_i16_const_sext() {
; X64-LABEL: ret_i16_const_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, 0xffff
; X64:    movsx rax, ax
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i16_const_sext>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0xffff // =65535
; ARM64:    sxth x0, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i16 -1
}


define i32 @ret_i32(i32 %a) {
; X64-LABEL: ret_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: ret_i32>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i32 %a
}

define signext i32 @ret_i32_sext(i32 %a) {
; X64-LABEL: ret_i32_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, edi
; X64:    movsxd rax, eax
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i32_sext>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    sxtw x0, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i32 %a
}

define zeroext i32 @ret_i32_zext(i32 %a) {
; X64-LABEL: ret_i32_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, edi
; X64:    mov eax, eax
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ret_i32_zext>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ubfx x0, x0, #0, #32
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i32 %a
}

define i32 @ret_i32_const() {
; X64-LABEL: ret_i32_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, 0xcc07c9
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i32_const>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0x7c9 // =1993
; ARM64:    movk x0, #0xcc, lsl #16
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i32 13371337
}

define i32 @ret_i32_const2() {
; X64-LABEL: ret_i32_const2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, 0xfffffffe
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i32_const2>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0xfffffffe // =4294967294
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i32 -2
}


define i64 @ret_i64(i64 %a) {
; X64-LABEL: ret_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, rdi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i64>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i64 %a
}

define i64 @ret_i64_const() {
; X64-LABEL: ret_i64_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, 0x539
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i64_const>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0x539 // =1337
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i64 1337
}

define i64 @ret_i64_const2() {
; X64-LABEL: ret_i64_const2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movabs rax, 0x4c01db400b0c9
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
;
; ARM64-LABEL: ret_i64_const2>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0xb0c9 // =45257
; ARM64:    movk x0, #0xb400, lsl #16
; ARM64:    movk x0, #0xc01d, lsl #32
; ARM64:    movk x0, #0x4, lsl #48
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i64 1337133713371337
}

define i64 @ret_i64_const3() {
; X64-LABEL: ret_i64_const3>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, -0x2
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i64_const3>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #-0x2 // =-2
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i64 -2
}

define i64 @ret_i64_const4() {
; X64-LABEL: ret_i64_const4>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movabs rax, -0xfffffffff
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
;
; ARM64-LABEL: ret_i64_const4>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #-0xfffffffff // =-68719476735
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i64 u0xFFFFFFF000000001
}


define i128 @ret_i128(i128 %a) {
; X64-LABEL: ret_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov rax, rdi
; X64:    mov rdx, rsi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ret_i128>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i128 %a
}

define i128 @ret_i128_const1() {
; X64-LABEL: ret_i128_const1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, 0x539
; X64:    mov edx, 0x0
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ret_i128_const1>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0x539 // =1337
; ARM64:    mov w1, #0x0 // =0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i128 1337
}

define i128 @ret_i128_const2() {
; X64-LABEL: ret_i128_const2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, -0x2
; X64:    mov rdx, -0x1
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: ret_i128_const2>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #-0x2 // =-2
; ARM64:    mov x1, #-0x1 // =-1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i128 -2
}


define zeroext i24 @ret_i24_zext(i24 %a) {
; X64-LABEL: ret_i24_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, edi
; X64:    and eax, 0xffffff
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i24_zext>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ubfx x0, x0, #0, #24
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i24 %a
}

define zeroext i24 @ret_i24_const_zext() {
; X64-LABEL: ret_i24_const_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, 0xfffffe
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i24_const_zext>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0xfffffe // =16777214
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i24 -2
}

define signext i24 @ret_i24_sext(i24 %a) {
; X64-LABEL: ret_i24_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, edi
; X64:    shl eax, 0x8
; X64:    sar eax, 0x8
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ret_i24_sext>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    sbfx x0, x0, #0, #24
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i24 %a
}

define signext i24 @ret_i24_const_sext() {
; X64-LABEL: ret_i24_const_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, 0xfffffe
; X64:    shl eax, 0x8
; X64:    sar eax, 0x8
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i24_const_sext>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0xfffffe // =16777214
; ARM64:    sbfx x0, x0, #0, #24
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i24 -2
}


define zeroext i41 @ret_i41_zext(i41 %a) {
; X64-LABEL: ret_i41_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, rdi
; X64:    movabs rcx, 0x1ffffffffff
; X64:    and rax, rcx
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ret_i41_zext>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ubfx x0, x0, #0, #41
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i41 %a
}

define zeroext i41 @ret_i41_const_zext() {
; X64-LABEL: ret_i41_const_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movabs rax, 0x1fffffffffe
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
;
; ARM64-LABEL: ret_i41_const_zext>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0x1fffffffffe // =2199023255550
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i41 -2
}

define signext i41 @ret_i41_sext(i41 %a) {
; X64-LABEL: ret_i41_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov rax, rdi
; X64:    shl rax, 0x17
; X64:    sar rax, 0x17
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i41_sext>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    sbfx x0, x0, #0, #41
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i41 %a
}

define signext i41 @ret_i41_const_sext() {
; X64-LABEL: ret_i41_const_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movabs rax, 0x1fffffffffe
; X64:    shl rax, 0x17
; X64:    sar rax, 0x17
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: ret_i41_const_sext>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x0, #0x1fffffffffe // =2199023255550
; ARM64:    sbfx x0, x0, #0, #41
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret i41 -2
}


define float @ret_f32(float %a) {
; X64-LABEL: ret_f32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ret_f32>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret float %a
}

define float @ret_f32_const() {
; X64-LABEL: ret_f32_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, 0x3f800000
; X64:    movd xmm0, eax
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_f32_const>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    fmov s0, #1.00000000
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret float 1.0
}

define double @ret_f64(double %a) {
; X64-LABEL: ret_f64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ret_f64>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret double %a
}

define double @ret_f64_const() {
; X64-LABEL: ret_f64_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movabs rax, 0x3ff0000000000000
; X64:    movq xmm0, rax
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_f64_const>:
; ARM64:    sub sp, sp, #0xa0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    fmov d0, #1.00000000
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xa0
; ARM64:    ret
; ARM64:     ...
entry:
  ret double 1.0
}


define float @ret_f32_2(float %b, float %a) {
; X64-LABEL: ret_f32_2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movupd xmm0, xmm1
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ret_f32_2>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov v0.16b, v1.16b
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret float %a
}

define double @ret_f64_2(double %b, double %a) {
; X64-LABEL: ret_f64_2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movupd xmm0, xmm1
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ret_f64_2>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov v0.16b, v1.16b
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  ret double %a
}


%struct.ptr_i32 = type { ptr, i32 }
%struct.i32_ptr = type { i32, ptr }

%struct.f32_ptr = type { float, ptr }

define %struct.ptr_i32 @ret_ptr_i32(ptr %0) {
; X64-LABEL: ret_ptr_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov rax, qword ptr [rdi]
; X64:    mov ecx, dword ptr [rdi + 0x8]
; X64:    mov edx, ecx
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ret_ptr_i32>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldr x1, [x0]
; ARM64:    add x3, x0, #0x8
; ARM64:    ldr w2, [x3]
; ARM64:    mov x0, x1
; ARM64:    mov w1, w2
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = load %struct.ptr_i32, ptr %0
  ret %struct.ptr_i32 %1
}

define %struct.i32_ptr @ret_i32_ptr(ptr %0) {
; X64-LABEL: ret_i32_ptr>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov eax, dword ptr [rdi]
; X64:    mov rcx, qword ptr [rdi + 0x8]
; X64:    mov rdx, rcx
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: ret_i32_ptr>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldr w1, [x0]
; ARM64:    add x3, x0, #0x8
; ARM64:    ldr x2, [x3]
; ARM64:    mov w0, w1
; ARM64:    mov x1, x2
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = load %struct.i32_ptr, ptr %0
  ret %struct.i32_ptr %1
}

; COM: idk if this is even legal in SysV but we can do it
define %struct.f32_ptr @ret_f32_ptr(ptr %0) {
; X64-LABEL: ret_f32_ptr>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movss xmm0, dword ptr [rdi]
; X64:    mov rax, qword ptr [rdi + 0x8]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: ret_f32_ptr>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    ldr s0, [x0]
; ARM64:    add x2, x0, #0x8
; ARM64:    ldr x1, [x2]
; ARM64:    mov x0, x1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
  %1 = load %struct.f32_ptr, ptr %0
  ret %struct.f32_ptr %1
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
