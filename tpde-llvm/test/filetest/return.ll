; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always

define i8 @ret_i8(i8 %a) {
; X64-LABEL: ret_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
entry:
  ret i8 %a
}

define signext i8 @ret_i8_sext(i8 %a) {
; X64-LABEL: ret_i8_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    movsx rax, al
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  ret i8 %a
}

define zeroext i8 @ret_i8_zext(i8 %a) {
; X64-LABEL: ret_i8_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    movzx eax, al
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i8 %a
}

define i8 @ret_i8_const() {
; X64-LABEL: ret_i8_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov eax, 0xd
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i8 13
}

define zeroext i8 @ret_i8_const_zext() {
; X64-LABEL: ret_i8_const_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov eax, 0xd
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i8 13
}

define signext i8 @ret_i8_const_sext() {
; X64-LABEL: ret_i8_const_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov eax, 0xff
; X64:    movsx rax, al
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i8 -1
}


define i16 @ret_i16(i16 %a) {
; X64-LABEL: ret_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
entry:
  ret i16 %a
}

define signext i16 @ret_i16_sext(i16 %a) {
; X64-LABEL: ret_i16_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    movsx rax, ax
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  ret i16 %a
}

define zeroext i16 @ret_i16_zext(i16 %a) {
; X64-LABEL: ret_i16_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    movzx eax, ax
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i16 %a
}

define i16 @ret_i16_const() {
; X64-LABEL: ret_i16_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov eax, 0x539
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i16 1337
}

define i16 @ret_i16_const2() {
; X64-LABEL: ret_i16_const2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov eax, 0xfffe
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i16 -2
}

define zeroext i16 @ret_i16_const_zext() {
; X64-LABEL: ret_i16_const_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov eax, 0x53a
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i16 1338
}

define signext i16 @ret_i16_const_sext() {
; X64-LABEL: ret_i16_const_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov eax, 0xffff
; X64:    movsx rax, ax
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i16 -1
}


define i32 @ret_i32(i32 %a) {
; X64-LABEL: ret_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
entry:
  ret i32 %a
}

define signext i32 @ret_i32_sext(i32 %a) {
; X64-LABEL: ret_i32_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    movsxd rax, eax
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i32 %a
}

define zeroext i32 @ret_i32_zext(i32 %a) {
; X64-LABEL: ret_i32_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    mov eax, eax
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  ret i32 %a
}

define i32 @ret_i32_const() {
; X64-LABEL: ret_i32_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov eax, 0xcc07c9
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i32 13371337
}

define i32 @ret_i32_const2() {
; X64-LABEL: ret_i32_const2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov eax, 0xfffffffe
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i32 -2
}


define i64 @ret_i64(i64 %a) {
; X64-LABEL: ret_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i64 %a
}

define i64 @ret_i64_const() {
; X64-LABEL: ret_i64_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov rax, 0x539
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i64 1337
}

define i64 @ret_i64_const2() {
; X64-LABEL: ret_i64_const2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    movabs rax, 0x4c01db400b0c9
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
entry:
  ret i64 1337133713371337
}

define i64 @ret_i64_const3() {
; X64-LABEL: ret_i64_const3>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov rax, -0x2
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i64 -2
}

define i64 @ret_i64_const4() {
; X64-LABEL: ret_i64_const4>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    movabs rax, -0xfffffffff
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
entry:
  ret i64 u0xFFFFFFF000000001
}


define i128 @ret_i128(i128 %a) {
; X64-LABEL: ret_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    mov rdx, rsi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  ret i128 %a
}

define i128 @ret_i128_const1() {
; X64-LABEL: ret_i128_const1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov rax, 0x539
; X64:    xor edx, edx
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i128 1337
}

define i128 @ret_i128_const2() {
; X64-LABEL: ret_i128_const2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov rax, -0x2
; X64:    mov rdx, -0x1
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:     ...
entry:
  ret i128 -2
}


define zeroext i24 @ret_i24_zext(i24 %a) {
; X64-LABEL: ret_i24_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    and eax, 0xffffff
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i24 %a
}

define zeroext i24 @ret_i24_const_zext() {
; X64-LABEL: ret_i24_const_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov eax, 0xfffffe
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i24 -2
}

define signext i24 @ret_i24_sext(i24 %a) {
; X64-LABEL: ret_i24_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    shl eax, 0x8
; X64:    sar eax, 0x8
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  ret i24 %a
}

define signext i24 @ret_i24_const_sext() {
; X64-LABEL: ret_i24_const_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov eax, 0xfffffe
; X64:    shl eax, 0x8
; X64:    sar eax, 0x8
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i24 -2
}


define zeroext i41 @ret_i41_zext(i41 %a) {
; X64-LABEL: ret_i41_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    movabs rcx, 0x1ffffffffff
; X64:    and rax, rcx
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
entry:
  ret i41 %a
}

define zeroext i41 @ret_i41_const_zext() {
; X64-LABEL: ret_i41_const_zext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    movabs rax, 0x1fffffffffe
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
entry:
  ret i41 -2
}

define signext i41 @ret_i41_sext(i41 %a) {
; X64-LABEL: ret_i41_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    shl rax, 0x17
; X64:    sar rax, 0x17
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret i41 %a
}

define signext i41 @ret_i41_const_sext() {
; X64-LABEL: ret_i41_const_sext>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    movabs rax, 0x1fffffffffe
; X64:    shl rax, 0x17
; X64:    sar rax, 0x17
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:     ...
entry:
  ret i41 -2
}


define float @ret_f32(float %a) {
; X64-LABEL: ret_f32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
entry:
  ret float %a
}

define float @ret_f32_const() {
; X64-LABEL: ret_f32_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    mov eax, 0x3f800000
; X64:    movq xmm0, rax
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
entry:
  ret float 1.0
}

define double @ret_f64(double %a) {
; X64-LABEL: ret_f64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
entry:
  ret double %a
}

define double @ret_f64_const() {
; X64-LABEL: ret_f64_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x0
; X64:    movabs rax, 0x3ff0000000000000
; X64:    movq xmm0, rax
; X64:    add rsp, 0x0
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  ret double 1.0
}


define float @ret_f32_2(float %b, float %a) {
; X64-LABEL: ret_f32_2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    movupd xmm0, xmm1
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  ret float %a
}

define double @ret_f64_2(double %b, double %a) {
; X64-LABEL: ret_f64_2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    movupd xmm0, xmm1
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
entry:
  ret double %a
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
