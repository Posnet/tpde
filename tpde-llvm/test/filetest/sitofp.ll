; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel --section=.text --section=.rodata - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always


define float @i8tof32(i8 %0) {
; X64-LABEL: i8tof32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    movsx edi, dil
; X64:    cvtsi2ss xmm0, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  %1 = sitofp i8 %0 to float
  ret float %1
}

define float @i16tof32(i16 %0) {
; X64-LABEL: i16tof32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    movsx edi, di
; X64:    cvtsi2ss xmm0, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = sitofp i16 %0 to float
  ret float %1
}

define float @i32tof32(i32 %0) {
; X64-LABEL: i32tof32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    cvtsi2ss xmm0, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  %1 = sitofp i32 %0 to float
  ret float %1
}

define float @i64tof32(i64 %0) {
; X64-LABEL: i64tof32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    cvtsi2ss xmm0, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = sitofp i64 %0 to float
  ret float %1
}


define double @i8tof64(i8 %0) {
; X64-LABEL: i8tof64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    movsx edi, dil
; X64:    cvtsi2sd xmm0, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  %1 = sitofp i8 %0 to double
  ret double %1
}

define double @i16tof64(i16 %0) {
; X64-LABEL: i16tof64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    movsx edi, di
; X64:    cvtsi2sd xmm0, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = sitofp i16 %0 to double
  ret double %1
}

define double @i32tof64(i32 %0) {
; X64-LABEL: i32tof64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    cvtsi2sd xmm0, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  %1 = sitofp i32 %0 to double
  ret double %1
}

define double @i64tof64(i64 %0) {
; X64-LABEL: i64tof64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    cvtsi2sd xmm0, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    <unknown>
entry:
  %1 = sitofp i64 %0 to double
  ret double %1
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
