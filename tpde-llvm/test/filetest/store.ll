; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always

; TODO(ts): datalayout depending on arch?
; target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

define void @store_i8(ptr %a, i8 %b) {
; X64-LABEL: store_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov byte ptr [rdi], sil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store i8 %b, ptr %a
  ret void
}

define void @store_i8_const(ptr %a) {
; X64-LABEL: store_i8_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov byte ptr [rdi], 0xd
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store i8 13, ptr %a
  ret void
}


define void @store_i16(ptr %a, i16 %b) {
; X64-LABEL: store_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov word ptr [rdi], si
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store i16 %b, ptr %a
  ret void
}

define void @store_i16_const(ptr %a) {
; X64-LABEL: store_i16_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov word ptr [rdi], 0x1337
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store i16 u0x1337, ptr %a
  ret void
}


define void @store_i32(ptr %a, i32 %b) {
; X64-LABEL: store_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov dword ptr [rdi], esi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
entry:
  store i32 %b, ptr %a
  ret void
}

define void @store_i32_alloca(i32 %b) {
; X64-LABEL: store_i32_alloca>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov dword ptr [rbp - 0x2c], edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %a = alloca i32
  store i32 %b, ptr %a
  ret void
}

define void @store_i32_const(ptr %a) {
; X64-LABEL: store_i32_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov dword ptr [rdi], 0x13371337
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  store i32 u0x13371337, ptr %a
  ret void
}


define void @store_i64(ptr %a, i64 %b) {
; X64-LABEL: store_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov qword ptr [rdi], rsi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store i64 %b, ptr %a
  ret void
}

define void @store_i64_alloca(i64 %b) {
; X64-LABEL: store_i64_alloca>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov qword ptr [rbp - 0x30], rdi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  %a = alloca i64
  store i64 %b, ptr %a
  ret void
}

define void @store_i64_const1(ptr %a) {
; X64-LABEL: store_i64_const1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov qword ptr [rdi], 0x13371337
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store i64 u0x13371337, ptr %a
  ret void
}

define void @store_i64_const2(ptr %a) {
; X64-LABEL: store_i64_const2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movabs rax, 0xf3371337
; X64:    mov qword ptr [rdi], rax
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store i64 u0xF3371337, ptr %a
  ret void
}

define void @store_i64_const3(ptr %a) {
; X64-LABEL: store_i64_const3>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov qword ptr [rdi], -0x2
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store i64 -2, ptr %a
  ret void
}


define void @store_i128(ptr %a, i128 %b) {
; X64-LABEL: store_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov qword ptr [rdi + 0x8], rdx
; X64:    mov qword ptr [rdi], rsi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store i128 %b, ptr %a
  ret void
}

define void @store_i128_alloca(i128 %b) {
; X64-LABEL: store_i128_alloca>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov qword ptr [rbp - 0x38], rsi
; X64:    mov qword ptr [rbp - 0x40], rdi
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  %a = alloca i128
  store i128 %b, ptr %a
  ret void
}

define void @store_i128_const1(ptr %a) {
; X64-LABEL: store_i128_const1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movabs rax, 0x1337133713371337
; X64:    mov qword ptr [rdi + 0x8], rax
; X64:    movabs rcx, 0x1337133713371337
; X64:    mov qword ptr [rdi], rcx
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store i128 u0x13371337133713371337133713371337, ptr %a
  ret void
}

define void @store_i128_const2(ptr %a) {
; X64-LABEL: store_i128_const2>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movabs rax, 0xf3371337
; X64:    mov qword ptr [rdi + 0x8], rax
; X64:    movabs rcx, 0xf3371337
; X64:    mov qword ptr [rdi], rcx
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store i128 u0xF337133700000000F3371337, ptr %a
  ret void
}

define void @store_i128_const3(ptr %a) {
; X64-LABEL: store_i128_const3>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov qword ptr [rdi + 0x8], -0x1
; X64:    mov qword ptr [rdi], -0x2
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store i128 -2, ptr %a
  ret void
}


define void @store_f32(ptr %a, float %b) {
; X64-LABEL: store_f32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movss dword ptr [rdi], xmm0
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  store float %b, ptr %a
  ret void
}

define void @store_float_alloca(float %b) {
; X64-LABEL: store_float_alloca>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movss dword ptr [rbp - 0x2c], xmm0
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %a = alloca float
  store float %b, ptr %a
  ret void
}

define void @store_f32_const(ptr %a) {
; X64-LABEL: store_f32_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov eax, 0x3f800000
; X64:    movd xmm0, eax
; X64:    movss dword ptr [rdi], xmm0
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store float 1.0, ptr %a
  ret void
}


define void @store_f64(ptr %a, double %b) {
; X64-LABEL: store_f64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movsd qword ptr [rdi], xmm0
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  store double %b, ptr %a
  ret void
}

define void @store_f64_const(ptr %a) {
; X64-LABEL: store_f64_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movabs rax, 0x3ff0000000000000
; X64:    movq xmm0, rax
; X64:    movsd qword ptr [rdi], xmm0
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store double 1.0, ptr %a
  ret void
}


define void @store_i24(ptr %a, i24 %b) {
; X64-LABEL: store_i24>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov word ptr [rdi], si
; X64:    shr esi, 0x10
; X64:    mov byte ptr [rdi + 0x2], sil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
entry:
  store i24 %b, ptr %a
  ret void
}

define void @store_i24_alloca(i24 %b) {
; X64-LABEL: store_i24_alloca>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov word ptr [rbp - 0x2c], di
; X64:    shr edi, 0x10
; X64:    mov byte ptr [rbp - 0x2a], dil
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %a = alloca i24
  store i24 %b, ptr %a
  ret void
}

define void @store_i24_const(ptr %a) {
; X64-LABEL: store_i24_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov word ptr [rdi], 0x1337
; X64:    mov eax, 0x371337
; X64:    shr eax, 0x10
; X64:    mov byte ptr [rdi + 0x2], al
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
entry:
  store i24 u0x371337, ptr %a
  ret void
}


define void @store_i40(ptr %a, i40 %b) {
; X64-LABEL: store_i40>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov dword ptr [rdi], esi
; X64:    shr rsi, 0x20
; X64:    mov byte ptr [rdi + 0x4], sil
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
entry:
  store i40 %b, ptr %a
  ret void
}

define void @store_i40_const(ptr %a) {
; X64-LABEL: store_i40_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movabs rax, 0x3713371337
; X64:    mov dword ptr [rdi], eax
; X64:    shr rax, 0x20
; X64:    mov byte ptr [rdi + 0x4], al
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store i40 u0x3713371337, ptr %a
  ret void
}


define void @store_i48(ptr %a, i48 %b) {
; X64-LABEL: store_i48>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov dword ptr [rdi], esi
; X64:    shr rsi, 0x20
; X64:    mov word ptr [rdi + 0x4], si
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
entry:
  store i48 %b, ptr %a
  ret void
}

define void @store_i48_alloca(i48 %b) {
; X64-LABEL: store_i48_alloca>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov dword ptr [rbp - 0x30], edi
; X64:    shr rdi, 0x20
; X64:    mov word ptr [rbp - 0x2c], di
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %a = alloca i48
  store i48 %b, ptr %a
  ret void
}

define void @store_i48_const(ptr %a) {
; X64-LABEL: store_i48_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movabs rax, 0x133713371337
; X64:    mov dword ptr [rdi], eax
; X64:    shr rax, 0x20
; X64:    mov word ptr [rdi + 0x4], ax
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  store i48 u0x133713371337, ptr %a
  ret void
}


define void @store_i56(ptr %a, i56 %b) {
; X64-LABEL: store_i56>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov dword ptr [rdi], esi
; X64:    mov rax, rsi
; X64:    shr rax, 0x30
; X64:    mov byte ptr [rdi + 0x6], al
; X64:    shr rsi, 0x20
; X64:    mov word ptr [rdi + 0x4], si
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  store i56 %b, ptr %a
  ret void
}

define void @store_i56_const(ptr %a) {
; X64-LABEL: store_i56_const>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movabs rax, 0x37133713371337
; X64:    mov dword ptr [rdi], eax
; X64:    mov rcx, rax
; X64:    shr rcx, 0x30
; X64:    mov byte ptr [rdi + 0x6], cl
; X64:    shr rax, 0x20
; X64:    mov word ptr [rdi + 0x4], ax
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
entry:
  store i56 u0x37133713371337, ptr %a
  ret void
}


define void @store_4f(ptr %a, <4 x float> %b) {
; X64-LABEL: store_4f>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movaps xmmword ptr [rdi], xmm0
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store <4 x float> %b, ptr %a
  ret void
}


%struct.i8_i1 = type { i8, i1 }
%struct.i8_i8 = type { i8, i8 }
%struct.i8_i16 = type { i8, i16 }
%struct.i8_i32 = type { i8, i32 }
%struct.i8_i64 = type { i8, i64 }

%struct.i1_i32 = type { i1, i32 }
%struct.i16_i32 = type { i16, i32 }
%struct.i32_i32 = type { i32, i32 }
%struct.i64_i32 = type { i64, i32 }

%struct.ptr_i32 = type { ptr, i32 }
%struct.i32_ptr = type { i32, ptr }

%struct.f32_ptr = type { float, ptr }
%struct.i128_i1 = type { i128, i1 }

%struct.i32_i32_i32_i32_i32_i32 = type { i32, i32, i32, i32, i32, i32 }

define void @store_struct_i8_i1(ptr %a, %struct.i8_i1 %b) {
; X64-LABEL: store_struct_i8_i1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov byte ptr [rdi], sil
; X64:    mov byte ptr [rdi + 0x1], dl
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  store %struct.i8_i1 %b, ptr %a
  ret void
}

define void @store_struct_i8_i8(ptr %a, %struct.i8_i8 %b) {
; X64-LABEL: store_struct_i8_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov byte ptr [rdi], sil
; X64:    mov byte ptr [rdi + 0x1], dl
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  store %struct.i8_i8 %b, ptr %a
  ret void
}

define void @store_struct_i8_i16(ptr %a, %struct.i8_i16 %b) {
; X64-LABEL: store_struct_i8_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov byte ptr [rdi], sil
; X64:    mov word ptr [rdi + 0x2], dx
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store %struct.i8_i16 %b, ptr %a
  ret void
}

define void @store_struct_i8_i32(ptr %a, %struct.i8_i32 %b) {
; X64-LABEL: store_struct_i8_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov byte ptr [rdi], sil
; X64:    mov dword ptr [rdi + 0x4], edx
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  store %struct.i8_i32 %b, ptr %a
  ret void
}

define void @store_struct_i8_i64(ptr %a, %struct.i8_i64 %b) {
; X64-LABEL: store_struct_i8_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov byte ptr [rdi], sil
; X64:    mov qword ptr [rdi + 0x8], rdx
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store %struct.i8_i64 %b, ptr %a
  ret void
}


define void @store_struct_i1_i32(ptr %a, %struct.i1_i32 %b) {
; X64-LABEL: store_struct_i1_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov byte ptr [rdi], sil
; X64:    mov dword ptr [rdi + 0x4], edx
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  store %struct.i1_i32 %b, ptr %a
  ret void
}

define void @store_struct_i16_i32(ptr %a, %struct.i16_i32 %b) {
; X64-LABEL: store_struct_i16_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov word ptr [rdi], si
; X64:    mov dword ptr [rdi + 0x4], edx
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  store %struct.i16_i32 %b, ptr %a
  ret void
}

define void @store_struct_i32_i32(ptr %a, %struct.i32_i32 %b) {
; X64-LABEL: store_struct_i32_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov dword ptr [rdi], esi
; X64:    mov dword ptr [rdi + 0x4], edx
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  store %struct.i32_i32 %b, ptr %a
  ret void
}

define void @store_struct_i64_i32(ptr %a, %struct.i64_i32 %b) {
; X64-LABEL: store_struct_i64_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov qword ptr [rdi], rsi
; X64:    mov dword ptr [rdi + 0x8], edx
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  store %struct.i64_i32 %b, ptr %a
  ret void
}

define void @store_struct_ptr_i32(ptr %a, %struct.ptr_i32 %b) {
; X64-LABEL: store_struct_ptr_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov qword ptr [rdi], rsi
; X64:    mov dword ptr [rdi + 0x8], edx
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  store %struct.ptr_i32 %b, ptr %a
  ret void
}

define void @store_struct_i32_ptr(ptr %a, %struct.i32_ptr %b) {
; X64-LABEL: store_struct_i32_ptr>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov dword ptr [rdi], esi
; X64:    mov qword ptr [rdi + 0x8], rdx
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  store %struct.i32_ptr %b, ptr %a
  ret void
}

define void @store_struct_f32_ptr(ptr %a, %struct.f32_ptr %b) {
; X64-LABEL: store_struct_f32_ptr>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movss dword ptr [rdi], xmm0
; X64:    mov qword ptr [rdi + 0x8], rsi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  store %struct.f32_ptr %b, ptr %a
  ret void
}

define void @store_struct_i128_i1(ptr %a) {
; X64-LABEL: store_struct_i128_i1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov rax, qword ptr [rdi]
; X64:    mov rcx, qword ptr [rdi + 0x8]
; X64:    movzx edx, byte ptr [rdi + 0x10]
; X64:    mov qword ptr [rdi + 0x8], rcx
; X64:    mov qword ptr [rdi], rax
; X64:    mov byte ptr [rdi + 0x10], dl
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %b = load %struct.i128_i1, ptr %a
  store %struct.i128_i1 %b, ptr %a
  ret void
}

define void @store_struct_i32_i32_i32_i32_i32_i32(ptr %a, %struct.i32_i32_i32_i32_i32_i32 %b) {
; X64-LABEL: store_struct_i32_i32_i32_i32_i32_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov eax, dword ptr [rbp + 0x10]
; X64:    mov dword ptr [rbp - 0x3c], eax
; X64:    mov dword ptr [rdi], esi
; X64:    mov dword ptr [rdi + 0x4], edx
; X64:    mov dword ptr [rdi + 0x8], ecx
; X64:    mov dword ptr [rdi + 0xc], r8d
; X64:    mov dword ptr [rdi + 0x10], r9d
; X64:    mov eax, dword ptr [rbp - 0x3c]
; X64:    mov dword ptr [rdi + 0x14], eax
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
entry:
  store %struct.i32_i32_i32_i32_i32_i32 %b, ptr %a
  ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
