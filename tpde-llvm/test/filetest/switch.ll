; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --symbolize-operands --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always

define i32 @empty_switch(i32 %0) {
; X64-LABEL: empty_switch>:
; X64:    0: 55 push rbp
; X64:    1: 48 89 e5 mov rbp, rsp
; X64:    4: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64:    d: 48 81 ec 30 00 00 00 sub rsp, 0x30
; X64:    14: e9 00 00 00 00 jmp <L0>
; X64:  <L0>:
; X64:    19: e9 00 00 00 00 jmp <L1>
; X64:  <L1>:
; X64:    1e: b8 ff ff ff ff mov eax, 0xffffffff
; X64:    23: 48 83 c4 30 add rsp, 0x30
; X64:    27: 5d pop rbp
; X64:    28: c3 ret
; X64:     ...
; X64:    3d: 00 00 add byte ptr [rax], al
; X64:    3f: 00 55 48 add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: empty_switch>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    b 0x34 <empty_switch+0x34>
; ARM64:    b 0x38 <empty_switch+0x38>
; ARM64:    mov x0, #0xffffffff // =4294967295
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  switch i32 %0, label %default []
default:
  ret i32 -1
}

define i32 @basic_switch(i32 %0) {
; X64-LABEL: basic_switch>:
; X64:    40: 55 push rbp
; X64:    41: 48 89 e5 mov rbp, rsp
; X64:    44: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64:    4d: 48 81 ec 30 00 00 00 sub rsp, 0x30
; X64:    54: 83 ff 00 cmp edi, 0x0
; X64:    57: 0f 84 1c 00 00 00 je <L0>
; X64:    5d: 83 ff 01 cmp edi, 0x1
; X64:    60: 0f 84 18 00 00 00 je <L1>
; X64:    66: 83 ff 02 cmp edi, 0x2
; X64:    69: 0f 84 14 00 00 00 je <L2>
; X64:    6f: e9 00 00 00 00 jmp <L3>
; X64:  <L3>:
; X64:    74: e9 54 00 00 00 jmp <L4>
; X64:  <L0>:
; X64:    79: e9 0a 00 00 00 jmp <L5>
; X64:  <L1>:
; X64:    7e: e9 1c 00 00 00 jmp <L6>
; X64:  <L2>:
; X64:    83: e9 2e 00 00 00 jmp <L7>
; X64:  <L5>:
; X64:    88: b8 00 00 00 00 mov eax, 0x0
; X64:    8d: 48 83 c4 30 add rsp, 0x30
; X64:    91: 5d pop rbp
; X64:    92: c3 ret
; X64:  <L6>:
; X64:    9f: b8 01 00 00 00 mov eax, 0x1
; X64:    a4: 48 83 c4 30 add rsp, 0x30
; X64:    a8: 5d pop rbp
; X64:    a9: c3 ret
; X64:  <L7>:
; X64:    b6: b8 02 00 00 00 mov eax, 0x2
; X64:    bb: 48 83 c4 30 add rsp, 0x30
; X64:    bf: 5d pop rbp
; X64:    c0: c3 ret
; X64:  <L4>:
; X64:    cd: b8 ff ff ff ff mov eax, 0xffffffff
; X64:    d2: 48 83 c4 30 add rsp, 0x30
; X64:    d6: 5d pop rbp
; X64:    d7: c3 ret
; X64:     ...
;
; ARM64-LABEL: basic_switch>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    cmp w0, #0x0
; ARM64:    b.eq 0xc0 <basic_switch+0x50>
; ARM64:    cmp w0, #0x1
; ARM64:    b.eq 0xc4 <basic_switch+0x54>
; ARM64:    cmp w0, #0x2
; ARM64:    b.eq 0xc8 <basic_switch+0x58>
; ARM64:    b 0xbc <basic_switch+0x4c>
; ARM64:    b 0x168 <basic_switch+0xf8>
; ARM64:    b 0xcc <basic_switch+0x5c>
; ARM64:    b 0x100 <basic_switch+0x90>
; ARM64:    b 0x134 <basic_switch+0xc4>
; ARM64:    mov w0, #0x0 // =0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x1 // =1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x2 // =2
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0xffffffff // =4294967295
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  switch i32 %0, label %default [ i32 0, label %eq0
                                  i32 1, label %eq1
                                  i32 2, label %eq2]
eq0:
  ret i32 0
eq1:
  ret i32 1
eq2:
  ret i32 2
default:
  ret i32 -1
}

define i32 @switch_table(i32 %0) {
; x64-label: switch_table>:
; x64:    b0: 55 push rbp
; x64:    b1: 48 89 e5 mov rbp, rsp
; x64:    b4: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; x64:    bd: 48 81 ec 10 00 00 00 sub rsp, 0x10
; x64:    c4: 83 ff 06 cmp edi, 0x6
; x64:    c7: 0f 87 2f 00 00 00 ja <l0>
; x64:    cd: 89 ff mov edi, edi
; x64:    cf: 48 8d 05 0a 00 00 00 lea rax, <switch_table+0x30>
; x64:    d6: 48 63 3c b8 movsxd rdi, dword ptr [rax + 4*rdi]
; x64:    da: 48 01 f8 add rax, rdi
; x64:    dd: ff e0 jmp rax
; x64:    df: 00 21 add byte ptr [rcx], ah
; x64:    e1: 00 00 add byte ptr [rax], al
; x64:    e3: 00 26 add byte ptr [rsi], ah
; x64:    e5: 00 00 add byte ptr [rax], al
; x64:    e7: 00 2b add byte ptr [rbx], ch
; x64:    e9: 00 00 add byte ptr [rax], al
; x64:    eb: 00 1c 00 add byte ptr [rax + rax], bl
; x64:    ee: 00 00 add byte ptr [rax], al
; x64:    f0: 30 00 xor byte ptr [rax], al
; x64:    f2: 00 00 add byte ptr [rax], al
; x64:    f4: 35 00 00 00 3a xor eax, 0x3a000000
; x64:    f9: 00 00 add byte ptr [rax], al
; x64:    fb: 00 e9 add cl, ch
; x64:    fd: a8 00 test al, 0x0
; x64:    ff: 00 00 add byte ptr [rax], al
; x64:    101: e9 19 00 00 00 jmp <l1>
; x64:    106: e9 2b 00 00 00 jmp <l2>
; x64:    10b: e9 3d 00 00 00 jmp <l3>
; x64:    110: e9 4f 00 00 00 jmp <l4>
; x64:    115: e9 61 00 00 00 jmp <l5>
; x64:    11a: e9 73 00 00 00 jmp <l6>
; x64:  <l1>:
; x64:    11f: b8 00 00 00 00 mov eax, 0x0
; x64:    124: 48 83 c4 10 add rsp, 0x10
; x64:    128: 5d pop rbp
; x64:    129: c3 ret
; x64:  <l2>:
; x64:    136: b8 01 00 00 00 mov eax, 0x1
; x64:    13b: 48 83 c4 10 add rsp, 0x10
; x64:    13f: 5d pop rbp
; x64:    140: c3 ret
; x64:  <l3>:
; x64:    14d: b8 02 00 00 00 mov eax, 0x2
; x64:    152: 48 83 c4 10 add rsp, 0x10
; x64:    156: 5d pop rbp
; x64:    157: c3 ret
; x64:  <l4>:
; x64:    164: b8 04 00 00 00 mov eax, 0x4
; x64:    169: 48 83 c4 10 add rsp, 0x10
; x64:    16d: 5d pop rbp
; x64:    16e: c3 ret
; x64:  <l5>:
; x64:    17b: b8 05 00 00 00 mov eax, 0x5
; x64:    180: 48 83 c4 10 add rsp, 0x10
; x64:    184: 5d pop rbp
; x64:    185: c3 ret
; x64:  <l6>:
; x64:    192: b8 06 00 00 00 mov eax, 0x6
; x64:    197: 48 83 c4 10 add rsp, 0x10
; x64:    19b: 5d pop rbp
; x64:    19c: c3 ret
; x64:    1a9: b8 ff ff ff ff mov eax, 0xffffffff
; x64:    1ae: 48 83 c4 10 add rsp, 0x10
; x64:    1b2: 5d pop rbp
; x64:    1b3: c3 ret
; x64:     ...
; X64-LABEL: switch_table>:
; X64:    f0: 55 push rbp
; X64:    f1: 48 89 e5 mov rbp, rsp
; X64:    f4: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64:    fd: 48 81 ec 30 00 00 00 sub rsp, 0x30
; X64:    104: 83 ff 06 cmp edi, 0x6
; X64:    107: 0f 87 2f 00 00 00 ja <L0>
; X64:    10d: 89 ff mov edi, edi
; X64:    10f: 48 8d 05 0a 00 00 00 lea rax, <switch_table+0x30>
; X64:    116: 48 63 3c b8 movsxd rdi, dword ptr [rax + 4*rdi]
; X64:    11a: 48 01 f8 add rax, rdi
; X64:    11d: ff e0 jmp rax
; X64:    11f: 00 21 add byte ptr [rcx], ah
; X64:    121: 00 00 add byte ptr [rax], al
; X64:    123: 00 26 add byte ptr [rsi], ah
; X64:    125: 00 00 add byte ptr [rax], al
; X64:    127: 00 2b add byte ptr [rbx], ch
; X64:    129: 00 00 add byte ptr [rax], al
; X64:    12b: 00 1c 00 add byte ptr [rax + rax], bl
; X64:    12e: 00 00 add byte ptr [rax], al
; X64:    130: 30 00 xor byte ptr [rax], al
; X64:    132: 00 00 add byte ptr [rax], al
; X64:    134: 35 00 00 00 3a xor eax, 0x3a000000
; X64:    139: 00 00 add byte ptr [rax], al
; X64:    13b: 00 e9 add cl, ch
; X64:    13d: a8 00 test al, 0x0
; X64:    13f: 00 00 add byte ptr [rax], al
; X64:    141: e9 19 00 00 00 jmp <L1>
; X64:    146: e9 2b 00 00 00 jmp <L2>
; X64:    14b: e9 3d 00 00 00 jmp <L3>
; X64:    150: e9 4f 00 00 00 jmp <L4>
; X64:    155: e9 61 00 00 00 jmp <L5>
; X64:    15a: e9 73 00 00 00 jmp <L6>
; X64:  <L1>:
; X64:    15f: b8 00 00 00 00 mov eax, 0x0
; X64:    164: 48 83 c4 30 add rsp, 0x30
; X64:    168: 5d pop rbp
; X64:    169: c3 ret
; X64:  <L2>:
; X64:    176: b8 01 00 00 00 mov eax, 0x1
; X64:    17b: 48 83 c4 30 add rsp, 0x30
; X64:    17f: 5d pop rbp
; X64:    180: c3 ret
; X64:  <L3>:
; X64:    18d: b8 02 00 00 00 mov eax, 0x2
; X64:    192: 48 83 c4 30 add rsp, 0x30
; X64:    196: 5d pop rbp
; X64:    197: c3 ret
; X64:  <L4>:
; X64:    1a4: b8 04 00 00 00 mov eax, 0x4
; X64:    1a9: 48 83 c4 30 add rsp, 0x30
; X64:    1ad: 5d pop rbp
; X64:    1ae: c3 ret
; X64:  <L5>:
; X64:    1bb: b8 05 00 00 00 mov eax, 0x5
; X64:    1c0: 48 83 c4 30 add rsp, 0x30
; X64:    1c4: 5d pop rbp
; X64:    1c5: c3 ret
; X64:  <L6>:
; X64:    1d2: b8 06 00 00 00 mov eax, 0x6
; X64:    1d7: 48 83 c4 30 add rsp, 0x30
; X64:    1db: 5d pop rbp
; X64:    1dc: c3 ret
; X64:    1e9: b8 ff ff ff ff mov eax, 0xffffffff
; X64:    1ee: 48 83 c4 30 add rsp, 0x30
; X64:    1f2: 5d pop rbp
; X64:    1f3: c3 ret
;
; ARM64-LABEL: switch_table>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    cmp w0, #0x4
; ARM64:    b.eq 0x21c <switch_table+0x7c>
; ARM64:    b.hi 0x1f8 <switch_table+0x58>
; ARM64:    cmp w0, #0x0
; ARM64:    b.eq 0x210 <switch_table+0x70>
; ARM64:    cmp w0, #0x1
; ARM64:    b.eq 0x214 <switch_table+0x74>
; ARM64:    cmp w0, #0x2
; ARM64:    b.eq 0x218 <switch_table+0x78>
; ARM64:    b 0x20c <switch_table+0x6c>
; ARM64:    cmp w0, #0x5
; ARM64:    b.eq 0x220 <switch_table+0x80>
; ARM64:    cmp w0, #0x6
; ARM64:    b.eq 0x224 <switch_table+0x84>
; ARM64:    b 0x20c <switch_table+0x6c>
; ARM64:    b 0x360 <switch_table+0x1c0>
; ARM64:    b 0x228 <switch_table+0x88>
; ARM64:    b 0x25c <switch_table+0xbc>
; ARM64:    b 0x290 <switch_table+0xf0>
; ARM64:    b 0x2c4 <switch_table+0x124>
; ARM64:    b 0x2f8 <switch_table+0x158>
; ARM64:    b 0x32c <switch_table+0x18c>
; ARM64:    mov w0, #0x0 // =0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x1 // =1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x2 // =2
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x4 // =4
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x5 // =5
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x6 // =6
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0xffffffff // =4294967295
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  switch i32 %0, label %default [
    i32 0, label %eq0
    i32 1, label %eq1
    i32 2, label %eq2
    i32 4, label %eq4
    i32 5, label %eq5
    i32 6, label %eq6]
eq0:
  ret i32 0
eq1:
  ret i32 1
eq2:
  ret i32 2
eq4:
  ret i32 4
eq5:
  ret i32 5
eq6:
  ret i32 6
default:
  ret i32 -1
}

define i32 @switch_table2(i32 %0) {
; X64-LABEL: switch_table2>:
; X64:    200: 55 push rbp
; X64:    201: 48 89 e5 mov rbp, rsp
; X64:    204: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64:    20d: 48 81 ec 30 00 00 00 sub rsp, 0x30
; X64:    214: 83 ff 03 cmp edi, 0x3
; X64:    217: 0f 82 3b 00 00 00 jb <L0>
; X64:    21d: 83 ff 09 cmp edi, 0x9
; X64:    220: 0f 87 32 00 00 00 ja <L0>
; X64:    226: 89 ff mov edi, edi
; X64:    228: 48 83 ef 03 sub rdi, 0x3
; X64:    22c: 48 8d 05 09 00 00 00 lea rax, <switch_table2+0x3c>
; X64:    233: 48 63 3c b8 movsxd rdi, dword ptr [rax + 4*rdi]
; X64:    237: 48 01 f8 add rax, rdi
; X64:    23a: ff e0 jmp rax
; X64:    23c: 21 00 and dword ptr [rax], eax
; X64:    23e: 00 00 add byte ptr [rax], al
; X64:    240: 26 00 00 add byte ptr es:[rax], al
; X64:    243: 00 2b add byte ptr [rbx], ch
; X64:    245: 00 00 add byte ptr [rax], al
; X64:    247: 00 1c 00 add byte ptr [rax + rax], bl
; X64:    24a: 00 00 add byte ptr [rax], al
; X64:    24c: 30 00 xor byte ptr [rax], al
; X64:    24e: 00 00 add byte ptr [rax], al
; X64:    250: 35 00 00 00 3a xor eax, 0x3a000000
; X64:    255: 00 00 add byte ptr [rax], al
; X64:    257: 00 e9 add cl, ch
; X64:    259: a8 00 test al, 0x0
; X64:    25b: 00 00 add byte ptr [rax], al
; X64:    25d: e9 19 00 00 00 jmp <L1>
; X64:    262: e9 2b 00 00 00 jmp <L2>
; X64:    267: e9 3d 00 00 00 jmp <L3>
; X64:    26c: e9 4f 00 00 00 jmp <L4>
; X64:    271: e9 61 00 00 00 jmp <L5>
; X64:    276: e9 73 00 00 00 jmp <L6>
; X64:  <L1>:
; X64:    27b: b8 03 00 00 00 mov eax, 0x3
; X64:    280: 48 83 c4 30 add rsp, 0x30
; X64:    284: 5d pop rbp
; X64:    285: c3 ret
; X64:  <L2>:
; X64:    292: b8 04 00 00 00 mov eax, 0x4
; X64:    297: 48 83 c4 30 add rsp, 0x30
; X64:    29b: 5d pop rbp
; X64:    29c: c3 ret
; X64:  <L3>:
; X64:    2a9: b8 05 00 00 00 mov eax, 0x5
; X64:    2ae: 48 83 c4 30 add rsp, 0x30
; X64:    2b2: 5d pop rbp
; X64:    2b3: c3 ret
; X64:  <L4>:
; X64:    2c0: b8 07 00 00 00 mov eax, 0x7
; X64:    2c5: 48 83 c4 30 add rsp, 0x30
; X64:    2c9: 5d pop rbp
; X64:    2ca: c3 ret
; X64:  <L5>:
; X64:    2d7: b8 08 00 00 00 mov eax, 0x8
; X64:    2dc: 48 83 c4 30 add rsp, 0x30
; X64:    2e0: 5d pop rbp
; X64:    2e1: c3 ret
; X64:  <L6>:
; X64:    2ee: b8 09 00 00 00 mov eax, 0x9
; X64:    2f3: 48 83 c4 30 add rsp, 0x30
; X64:    2f7: 5d pop rbp
; X64:    2f8: c3 ret
; X64:    305: b8 ff ff ff ff mov eax, 0xffffffff
; X64:    30a: 48 83 c4 30 add rsp, 0x30
; X64:    30e: 5d pop rbp
; X64:    30f: c3 ret
; X64:    31c: 00 00 add byte ptr [rax], al
; X64:    31e: 00 00 add byte ptr [rax], al
;
; ARM64-LABEL: switch_table2>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    cmp w0, #0x7
; ARM64:    b.eq 0x41c <switch_table2+0x7c>
; ARM64:    b.hi 0x3f8 <switch_table2+0x58>
; ARM64:    cmp w0, #0x3
; ARM64:    b.eq 0x410 <switch_table2+0x70>
; ARM64:    cmp w0, #0x4
; ARM64:    b.eq 0x414 <switch_table2+0x74>
; ARM64:    cmp w0, #0x5
; ARM64:    b.eq 0x418 <switch_table2+0x78>
; ARM64:    b 0x40c <switch_table2+0x6c>
; ARM64:    cmp w0, #0x8
; ARM64:    b.eq 0x420 <switch_table2+0x80>
; ARM64:    cmp w0, #0x9
; ARM64:    b.eq 0x424 <switch_table2+0x84>
; ARM64:    b 0x40c <switch_table2+0x6c>
; ARM64:    b 0x560 <switch_table2+0x1c0>
; ARM64:    b 0x428 <switch_table2+0x88>
; ARM64:    b 0x45c <switch_table2+0xbc>
; ARM64:    b 0x490 <switch_table2+0xf0>
; ARM64:    b 0x4c4 <switch_table2+0x124>
; ARM64:    b 0x4f8 <switch_table2+0x158>
; ARM64:    b 0x52c <switch_table2+0x18c>
; ARM64:    mov x0, #0x3 // =3
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x4 // =4
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x5 // =5
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x7 // =7
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x8 // =8
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x9 // =9
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0xffffffff // =4294967295
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  switch i32 %0, label %default [
    i32 3, label %eq3
    i32 4, label %eq4
    i32 5, label %eq5
    i32 7, label %eq7
    i32 8, label %eq8
    i32 9, label %eq9]
eq3:
  ret i32 3
eq4:
  ret i32 4
eq5:
  ret i32 5
eq7:
  ret i32 7
eq8:
  ret i32 8
eq9:
  ret i32 9
default:
  ret i32 -1
}


define i32 @switch_binsearch(i32 %0) {
; X64-LABEL: switch_binsearch>:
; X64:    320: 55 push rbp
; X64:    321: 48 89 e5 mov rbp, rsp
; X64:    324: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64:    32d: 48 81 ec 30 00 00 00 sub rsp, 0x30
; X64:    334: 83 ff 03 cmp edi, 0x3
; X64:    337: 0f 84 43 00 00 00 je <L0>
; X64:    33d: 0f 87 17 00 00 00 ja <L1>
; X64:    343: 83 ff 01 cmp edi, 0x1
; X64:    346: 0f 84 2a 00 00 00 je <L2>
; X64:    34c: 83 ff 02 cmp edi, 0x2
; X64:    34f: 0f 84 26 00 00 00 je <L3>
; X64:    355: e9 17 00 00 00 jmp <L4>
; X64:  <L1>:
; X64:    35a: 83 ff 64 cmp edi, 0x64
; X64:    35d: 0f 84 22 00 00 00 je <L5>
; X64:    363: 83 ff 65 cmp edi, 0x65
; X64:    366: 0f 84 1e 00 00 00 je <L6>
; X64:    36c: e9 00 00 00 00 jmp <L4>
; X64:  <L4>:
; X64:    371: e9 8c 00 00 00 jmp <L7>
; X64:  <L2>:
; X64:    376: e9 14 00 00 00 jmp <L8>
; X64:  <L3>:
; X64:    37b: e9 26 00 00 00 jmp <L9>
; X64:  <L0>:
; X64:    380: e9 38 00 00 00 jmp <L10>
; X64:  <L5>:
; X64:    385: e9 4a 00 00 00 jmp <L11>
; X64:  <L6>:
; X64:    38a: e9 5c 00 00 00 jmp <L12>
; X64:  <L8>:
; X64:    38f: b8 01 00 00 00 mov eax, 0x1
; X64:    394: 48 83 c4 30 add rsp, 0x30
; X64:    398: 5d pop rbp
; X64:    399: c3 ret
; X64:  <L9>:
; X64:    3a6: b8 02 00 00 00 mov eax, 0x2
; X64:    3ab: 48 83 c4 30 add rsp, 0x30
; X64:    3af: 5d pop rbp
; X64:    3b0: c3 ret
; X64:  <L10>:
; X64:    3bd: b8 03 00 00 00 mov eax, 0x3
; X64:    3c2: 48 83 c4 30 add rsp, 0x30
; X64:    3c6: 5d pop rbp
; X64:    3c7: c3 ret
; X64:  <L11>:
; X64:    3d4: b8 64 00 00 00 mov eax, 0x64
; X64:    3d9: 48 83 c4 30 add rsp, 0x30
; X64:    3dd: 5d pop rbp
; X64:    3de: c3 ret
; X64:  <L12>:
; X64:    3eb: b8 65 00 00 00 mov eax, 0x65
; X64:    3f0: 48 83 c4 30 add rsp, 0x30
; X64:    3f4: 5d pop rbp
; X64:    3f5: c3 ret
; X64:  <L7>:
; X64:    402: b8 ff ff ff ff mov eax, 0xffffffff
; X64:    407: 48 83 c4 30 add rsp, 0x30
; X64:    40b: 5d pop rbp
; X64:    40c: c3 ret
; X64:     ...
; X64:    3ffd: 00 00 add byte ptr [rax], al
; X64:    3fff: 00 <unknown>
;
; ARM64-LABEL: switch_binsearch>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    cmp w0, #0x3
; ARM64:    b.eq 0x610 <switch_binsearch+0x70>
; ARM64:    b.hi 0x5f0 <switch_binsearch+0x50>
; ARM64:    cmp w0, #0x1
; ARM64:    b.eq 0x608 <switch_binsearch+0x68>
; ARM64:    cmp w0, #0x2
; ARM64:    b.eq 0x60c <switch_binsearch+0x6c>
; ARM64:    b 0x604 <switch_binsearch+0x64>
; ARM64:    cmp w0, #0x64
; ARM64:    b.eq 0x614 <switch_binsearch+0x74>
; ARM64:    cmp w0, #0x65
; ARM64:    b.eq 0x618 <switch_binsearch+0x78>
; ARM64:    b 0x604 <switch_binsearch+0x64>
; ARM64:    b 0x720 <switch_binsearch+0x180>
; ARM64:    b 0x61c <switch_binsearch+0x7c>
; ARM64:    b 0x650 <switch_binsearch+0xb0>
; ARM64:    b 0x684 <switch_binsearch+0xe4>
; ARM64:    b 0x6b8 <switch_binsearch+0x118>
; ARM64:    b 0x6ec <switch_binsearch+0x14c>
; ARM64:    mov x0, #0x1 // =1
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x2 // =2
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x3 // =3
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x64 // =100
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0x65 // =101
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
; ARM64:    mov x0, #0xffffffff // =4294967295
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
  switch i32 %0, label %default [
    i32 1, label %eq1
    i32 2, label %eq2
    i32 3, label %eq3
    i32 100, label %eq100
    i32 101, label %eq101
  ]
eq1:
  ret i32 1
eq2:
  ret i32 2
eq3:
  ret i32 3
eq100:
  ret i32 100
eq101:
  ret i32 101
default:
  ret i32 -1
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
