; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --symbolize-operands --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always

define i32 @basic_switch(i32 %0) {
; X64-LABEL: basic_switch>:
; X64:    0: 55 push rbp
; X64:    1: 48 89 e5 mov rbp, rsp
; X64:    4: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64:    d: 48 81 ec 30 00 00 00 sub rsp, 0x30
; X64:    14: 83 ff 00 cmp edi, 0x0
; X64:    17: 0f 84 1c 00 00 00 je <L0>
; X64:    1d: 83 ff 01 cmp edi, 0x1
; X64:    20: 0f 84 18 00 00 00 je <L1>
; X64:    26: 83 ff 02 cmp edi, 0x2
; X64:    29: 0f 84 14 00 00 00 je <L2>
; X64:    2f: e9 00 00 00 00 jmp <L3>
; X64:  <L3>:
; X64:    34: e9 54 00 00 00 jmp <L4>
; X64:  <L0>:
; X64:    39: e9 0a 00 00 00 jmp <L5>
; X64:  <L1>:
; X64:    3e: e9 1c 00 00 00 jmp <L6>
; X64:  <L2>:
; X64:    43: e9 2e 00 00 00 jmp <L7>
; X64:  <L5>:
; X64:    48: b8 00 00 00 00 mov eax, 0x0
; X64:    4d: 48 83 c4 30 add rsp, 0x30
; X64:    51: 5d pop rbp
; X64:    52: c3 ret
; X64:  <L6>:
; X64:    5f: b8 01 00 00 00 mov eax, 0x1
; X64:    64: 48 83 c4 30 add rsp, 0x30
; X64:    68: 5d pop rbp
; X64:    69: c3 ret
; X64:  <L7>:
; X64:    76: b8 02 00 00 00 mov eax, 0x2
; X64:    7b: 48 83 c4 30 add rsp, 0x30
; X64:    7f: 5d pop rbp
; X64:    80: c3 ret
; X64:  <L4>:
; X64:    8d: b8 ff ff ff ff mov eax, 0xffffffff
; X64:    92: 48 83 c4 30 add rsp, 0x30
; X64:    96: 5d pop rbp
; X64:    97: c3 ret
; X64:     ...
entry:
  switch i32 %0, label %default [ i32 0, label %eq0
                                  i32 1, label %eq1
                                  i32 2, label %eq2]
eq0:
  ret i32 0
eq1:
  ret i32 1
eq2:
  ret i32 2
default:
  ret i32 -1
}

define i32 @switch_table(i32 %0) {
; x64-label: switch_table>:
; x64:    b0: 55 push rbp
; x64:    b1: 48 89 e5 mov rbp, rsp
; x64:    b4: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; x64:    bd: 48 81 ec 10 00 00 00 sub rsp, 0x10
; x64:    c4: 83 ff 06 cmp edi, 0x6
; x64:    c7: 0f 87 2f 00 00 00 ja <l0>
; x64:    cd: 89 ff mov edi, edi
; x64:    cf: 48 8d 05 0a 00 00 00 lea rax, <switch_table+0x30>
; x64:    d6: 48 63 3c b8 movsxd rdi, dword ptr [rax + 4*rdi]
; x64:    da: 48 01 f8 add rax, rdi
; x64:    dd: ff e0 jmp rax
; x64:    df: 00 21 add byte ptr [rcx], ah
; x64:    e1: 00 00 add byte ptr [rax], al
; x64:    e3: 00 26 add byte ptr [rsi], ah
; x64:    e5: 00 00 add byte ptr [rax], al
; x64:    e7: 00 2b add byte ptr [rbx], ch
; x64:    e9: 00 00 add byte ptr [rax], al
; x64:    eb: 00 1c 00 add byte ptr [rax + rax], bl
; x64:    ee: 00 00 add byte ptr [rax], al
; x64:    f0: 30 00 xor byte ptr [rax], al
; x64:    f2: 00 00 add byte ptr [rax], al
; x64:    f4: 35 00 00 00 3a xor eax, 0x3a000000
; x64:    f9: 00 00 add byte ptr [rax], al
; x64:    fb: 00 e9 add cl, ch
; x64:    fd: a8 00 test al, 0x0
; x64:    ff: 00 00 add byte ptr [rax], al
; x64:    101: e9 19 00 00 00 jmp <l1>
; x64:    106: e9 2b 00 00 00 jmp <l2>
; x64:    10b: e9 3d 00 00 00 jmp <l3>
; x64:    110: e9 4f 00 00 00 jmp <l4>
; x64:    115: e9 61 00 00 00 jmp <l5>
; x64:    11a: e9 73 00 00 00 jmp <l6>
; x64:  <l1>:
; x64:    11f: b8 00 00 00 00 mov eax, 0x0
; x64:    124: 48 83 c4 10 add rsp, 0x10
; x64:    128: 5d pop rbp
; x64:    129: c3 ret
; x64:  <l2>:
; x64:    136: b8 01 00 00 00 mov eax, 0x1
; x64:    13b: 48 83 c4 10 add rsp, 0x10
; x64:    13f: 5d pop rbp
; x64:    140: c3 ret
; x64:  <l3>:
; x64:    14d: b8 02 00 00 00 mov eax, 0x2
; x64:    152: 48 83 c4 10 add rsp, 0x10
; x64:    156: 5d pop rbp
; x64:    157: c3 ret
; x64:  <l4>:
; x64:    164: b8 04 00 00 00 mov eax, 0x4
; x64:    169: 48 83 c4 10 add rsp, 0x10
; x64:    16d: 5d pop rbp
; x64:    16e: c3 ret
; x64:  <l5>:
; x64:    17b: b8 05 00 00 00 mov eax, 0x5
; x64:    180: 48 83 c4 10 add rsp, 0x10
; x64:    184: 5d pop rbp
; x64:    185: c3 ret
; x64:  <l6>:
; x64:    192: b8 06 00 00 00 mov eax, 0x6
; x64:    197: 48 83 c4 10 add rsp, 0x10
; x64:    19b: 5d pop rbp
; x64:    19c: c3 ret
; x64:    1a9: b8 ff ff ff ff mov eax, 0xffffffff
; x64:    1ae: 48 83 c4 10 add rsp, 0x10
; x64:    1b2: 5d pop rbp
; x64:    1b3: c3 ret
; x64:     ...
; X64-LABEL: switch_table>:
; X64:    b0: 55 push rbp
; X64:    b1: 48 89 e5 mov rbp, rsp
; X64:    b4: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64:    bd: 48 81 ec 30 00 00 00 sub rsp, 0x30
; X64:    c4: 83 ff 06 cmp edi, 0x6
; X64:    c7: 0f 87 2f 00 00 00 ja <L0>
; X64:    cd: 89 ff mov edi, edi
; X64:    cf: 48 8d 05 0a 00 00 00 lea rax, <switch_table+0x30>
; X64:    d6: 48 63 3c b8 movsxd rdi, dword ptr [rax + 4*rdi]
; X64:    da: 48 01 f8 add rax, rdi
; X64:    dd: ff e0 jmp rax
; X64:    df: 00 21 add byte ptr [rcx], ah
; X64:    e1: 00 00 add byte ptr [rax], al
; X64:    e3: 00 26 add byte ptr [rsi], ah
; X64:    e5: 00 00 add byte ptr [rax], al
; X64:    e7: 00 2b add byte ptr [rbx], ch
; X64:    e9: 00 00 add byte ptr [rax], al
; X64:    eb: 00 1c 00 add byte ptr [rax + rax], bl
; X64:    ee: 00 00 add byte ptr [rax], al
; X64:    f0: 30 00 xor byte ptr [rax], al
; X64:    f2: 00 00 add byte ptr [rax], al
; X64:    f4: 35 00 00 00 3a xor eax, 0x3a000000
; X64:    f9: 00 00 add byte ptr [rax], al
; X64:    fb: 00 e9 add cl, ch
; X64:    fd: a8 00 test al, 0x0
; X64:    ff: 00 00 add byte ptr [rax], al
; X64:    101: e9 19 00 00 00 jmp <L1>
; X64:    106: e9 2b 00 00 00 jmp <L2>
; X64:    10b: e9 3d 00 00 00 jmp <L3>
; X64:    110: e9 4f 00 00 00 jmp <L4>
; X64:    115: e9 61 00 00 00 jmp <L5>
; X64:    11a: e9 73 00 00 00 jmp <L6>
; X64:  <L1>:
; X64:    11f: b8 00 00 00 00 mov eax, 0x0
; X64:    124: 48 83 c4 30 add rsp, 0x30
; X64:    128: 5d pop rbp
; X64:    129: c3 ret
; X64:  <L2>:
; X64:    136: b8 01 00 00 00 mov eax, 0x1
; X64:    13b: 48 83 c4 30 add rsp, 0x30
; X64:    13f: 5d pop rbp
; X64:    140: c3 ret
; X64:  <L3>:
; X64:    14d: b8 02 00 00 00 mov eax, 0x2
; X64:    152: 48 83 c4 30 add rsp, 0x30
; X64:    156: 5d pop rbp
; X64:    157: c3 ret
; X64:  <L4>:
; X64:    164: b8 04 00 00 00 mov eax, 0x4
; X64:    169: 48 83 c4 30 add rsp, 0x30
; X64:    16d: 5d pop rbp
; X64:    16e: c3 ret
; X64:  <L5>:
; X64:    17b: b8 05 00 00 00 mov eax, 0x5
; X64:    180: 48 83 c4 30 add rsp, 0x30
; X64:    184: 5d pop rbp
; X64:    185: c3 ret
; X64:  <L6>:
; X64:    192: b8 06 00 00 00 mov eax, 0x6
; X64:    197: 48 83 c4 30 add rsp, 0x30
; X64:    19b: 5d pop rbp
; X64:    19c: c3 ret
; X64:    1a9: b8 ff ff ff ff mov eax, 0xffffffff
; X64:    1ae: 48 83 c4 30 add rsp, 0x30
; X64:    1b2: 5d pop rbp
; X64:    1b3: c3 ret
entry:
  switch i32 %0, label %default [
    i32 0, label %eq0
    i32 1, label %eq1
    i32 2, label %eq2
    i32 4, label %eq4
    i32 5, label %eq5
    i32 6, label %eq6]
eq0:
  ret i32 0
eq1:
  ret i32 1
eq2:
  ret i32 2
eq4:
  ret i32 4
eq5:
  ret i32 5
eq6:
  ret i32 6
default:
  ret i32 -1
}

define i32 @switch_table2(i32 %0) {
; X64-LABEL: switch_table2>:
; X64:    1c0: 55 push rbp
; X64:    1c1: 48 89 e5 mov rbp, rsp
; X64:    1c4: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64:    1cd: 48 81 ec 30 00 00 00 sub rsp, 0x30
; X64:    1d4: 83 ff 03 cmp edi, 0x3
; X64:    1d7: 0f 82 3b 00 00 00 jb <L0>
; X64:    1dd: 83 ff 09 cmp edi, 0x9
; X64:    1e0: 0f 87 32 00 00 00 ja <L0>
; X64:    1e6: 89 ff mov edi, edi
; X64:    1e8: 48 83 ef 03 sub rdi, 0x3
; X64:    1ec: 48 8d 05 09 00 00 00 lea rax, <switch_table2+0x3c>
; X64:    1f3: 48 63 3c b8 movsxd rdi, dword ptr [rax + 4*rdi]
; X64:    1f7: 48 01 f8 add rax, rdi
; X64:    1fa: ff e0 jmp rax
; X64:    1fc: 21 00 and dword ptr [rax], eax
; X64:    1fe: 00 00 add byte ptr [rax], al
; X64:    200: 26 00 00 add byte ptr es:[rax], al
; X64:    203: 00 2b add byte ptr [rbx], ch
; X64:    205: 00 00 add byte ptr [rax], al
; X64:    207: 00 1c 00 add byte ptr [rax + rax], bl
; X64:    20a: 00 00 add byte ptr [rax], al
; X64:    20c: 30 00 xor byte ptr [rax], al
; X64:    20e: 00 00 add byte ptr [rax], al
; X64:    210: 35 00 00 00 3a xor eax, 0x3a000000
; X64:    215: 00 00 add byte ptr [rax], al
; X64:    217: 00 e9 add cl, ch
; X64:    219: a8 00 test al, 0x0
; X64:    21b: 00 00 add byte ptr [rax], al
; X64:    21d: e9 19 00 00 00 jmp <L1>
; X64:    222: e9 2b 00 00 00 jmp <L2>
; X64:    227: e9 3d 00 00 00 jmp <L3>
; X64:    22c: e9 4f 00 00 00 jmp <L4>
; X64:    231: e9 61 00 00 00 jmp <L5>
; X64:    236: e9 73 00 00 00 jmp <L6>
; X64:  <L1>:
; X64:    23b: b8 03 00 00 00 mov eax, 0x3
; X64:    240: 48 83 c4 30 add rsp, 0x30
; X64:    244: 5d pop rbp
; X64:    245: c3 ret
; X64:  <L2>:
; X64:    252: b8 04 00 00 00 mov eax, 0x4
; X64:    257: 48 83 c4 30 add rsp, 0x30
; X64:    25b: 5d pop rbp
; X64:    25c: c3 ret
; X64:  <L3>:
; X64:    269: b8 05 00 00 00 mov eax, 0x5
; X64:    26e: 48 83 c4 30 add rsp, 0x30
; X64:    272: 5d pop rbp
; X64:    273: c3 ret
; X64:  <L4>:
; X64:    280: b8 07 00 00 00 mov eax, 0x7
; X64:    285: 48 83 c4 30 add rsp, 0x30
; X64:    289: 5d pop rbp
; X64:    28a: c3 ret
; X64:  <L5>:
; X64:    297: b8 08 00 00 00 mov eax, 0x8
; X64:    29c: 48 83 c4 30 add rsp, 0x30
; X64:    2a0: 5d pop rbp
; X64:    2a1: c3 ret
; X64:  <L6>:
; X64:    2ae: b8 09 00 00 00 mov eax, 0x9
; X64:    2b3: 48 83 c4 30 add rsp, 0x30
; X64:    2b7: 5d pop rbp
; X64:    2b8: c3 ret
; X64:    2c5: b8 ff ff ff ff mov eax, 0xffffffff
; X64:    2ca: 48 83 c4 30 add rsp, 0x30
; X64:    2ce: 5d pop rbp
; X64:    2cf: c3 ret
; X64:    2dc: 00 00 add byte ptr [rax], al
; X64:    2de: 00 00 add byte ptr [rax], al
entry:
  switch i32 %0, label %default [
    i32 3, label %eq3
    i32 4, label %eq4
    i32 5, label %eq5
    i32 7, label %eq7
    i32 8, label %eq8
    i32 9, label %eq9]
eq3:
  ret i32 3
eq4:
  ret i32 4
eq5:
  ret i32 5
eq7:
  ret i32 7
eq8:
  ret i32 8
eq9:
  ret i32 9
default:
  ret i32 -1
}


define i32 @switch_binsearch(i32 %0) {
; X64-LABEL: switch_binsearch>:
; X64:    2e0: 55 push rbp
; X64:    2e1: 48 89 e5 mov rbp, rsp
; X64:    2e4: 66 0f 1f 84 00 00 00 00 00 nop word ptr [rax + rax]
; X64:    2ed: 48 81 ec 30 00 00 00 sub rsp, 0x30
; X64:    2f4: 83 ff 03 cmp edi, 0x3
; X64:    2f7: 0f 84 43 00 00 00 je <L0>
; X64:    2fd: 0f 87 17 00 00 00 ja <L1>
; X64:    303: 83 ff 01 cmp edi, 0x1
; X64:    306: 0f 84 2a 00 00 00 je <L2>
; X64:    30c: 83 ff 02 cmp edi, 0x2
; X64:    30f: 0f 84 26 00 00 00 je <L3>
; X64:    315: e9 17 00 00 00 jmp <L4>
; X64:  <L1>:
; X64:    31a: 83 ff 64 cmp edi, 0x64
; X64:    31d: 0f 84 22 00 00 00 je <L5>
; X64:    323: 83 ff 65 cmp edi, 0x65
; X64:    326: 0f 84 1e 00 00 00 je <L6>
; X64:    32c: e9 00 00 00 00 jmp <L4>
; X64:  <L4>:
; X64:    331: e9 8c 00 00 00 jmp <L7>
; X64:  <L2>:
; X64:    336: e9 14 00 00 00 jmp <L8>
; X64:  <L3>:
; X64:    33b: e9 26 00 00 00 jmp <L9>
; X64:  <L0>:
; X64:    340: e9 38 00 00 00 jmp <L10>
; X64:  <L5>:
; X64:    345: e9 4a 00 00 00 jmp <L11>
; X64:  <L6>:
; X64:    34a: e9 5c 00 00 00 jmp <L12>
; X64:  <L8>:
; X64:    34f: b8 01 00 00 00 mov eax, 0x1
; X64:    354: 48 83 c4 30 add rsp, 0x30
; X64:    358: 5d pop rbp
; X64:    359: c3 ret
; X64:  <L9>:
; X64:    366: b8 02 00 00 00 mov eax, 0x2
; X64:    36b: 48 83 c4 30 add rsp, 0x30
; X64:    36f: 5d pop rbp
; X64:    370: c3 ret
; X64:  <L10>:
; X64:    37d: b8 03 00 00 00 mov eax, 0x3
; X64:    382: 48 83 c4 30 add rsp, 0x30
; X64:    386: 5d pop rbp
; X64:    387: c3 ret
; X64:  <L11>:
; X64:    394: b8 64 00 00 00 mov eax, 0x64
; X64:    399: 48 83 c4 30 add rsp, 0x30
; X64:    39d: 5d pop rbp
; X64:    39e: c3 ret
; X64:  <L12>:
; X64:    3ab: b8 65 00 00 00 mov eax, 0x65
; X64:    3b0: 48 83 c4 30 add rsp, 0x30
; X64:    3b4: 5d pop rbp
; X64:    3b5: c3 ret
; X64:  <L7>:
; X64:    3c2: b8 ff ff ff ff mov eax, 0xffffffff
; X64:    3c7: 48 83 c4 30 add rsp, 0x30
; X64:    3cb: 5d pop rbp
; X64:    3cc: c3 ret
; X64:     ...
; X64:    3ffd: 00 00 add byte ptr [rax], al
; X64:    3fff: 00 <unknown>
entry:
  switch i32 %0, label %default [
    i32 1, label %eq1
    i32 2, label %eq2
    i32 3, label %eq3
    i32 100, label %eq100
    i32 101, label %eq101
  ]
eq1:
  ret i32 1
eq2:
  ret i32 2
eq3:
  ret i32 3
eq100:
  ret i32 100
eq101:
  ret i32 101
default:
  ret i32 -1
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
