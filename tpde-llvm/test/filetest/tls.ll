; NOTE: Assertions have been autogenerated by test/update_tpde_llc_test_checks.py UTC_ARGS: --version 5
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde-llc --target=x86_64 %s | %objdump | FileCheck %s -check-prefixes=X64
; RUN: tpde-llc --target=aarch64 %s | %objdump | FileCheck %s -check-prefixes=ARM64

@t1 = external thread_local global i32, align 4

define ptr @getaddr() {
; X64-LABEL: <getaddr>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x30
; X64-NEXT:    lea rdi, <getaddr+0x15>
; X64-NEXT:     R_X86_64_TLSGD t1-0x4
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 __tls_get_addr-0x4
; X64-NEXT:    add rsp, 0x30
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
;
; ARM64-LABEL: <getaddr>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_TLSDESC_ADR_PAGE21 t1
; ARM64-NEXT:    ldr x1, [x0]
; ARM64-NEXT:     R_AARCH64_TLSDESC_LD64_LO12 t1
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_TLSDESC_ADD_LO12 t1
; ARM64-NEXT:    blr x1
; ARM64-NEXT:     R_AARCH64_TLSDESC_CALL t1
; ARM64-NEXT:    mrs x1, TPIDR_EL0
; ARM64-NEXT:    add x0, x1, x0
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %p = call ptr @llvm.threadlocal.address(ptr @t1)
  ret ptr %p
}

define i32 @load() {
; X64-LABEL: <load>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    lea rdi, <load+0x15>
; X64-NEXT:     R_X86_64_TLSGD t1-0x4
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 __tls_get_addr-0x4
; X64-NEXT:    mov eax, dword ptr [rax]
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop dword ptr [rax]
;
; ARM64-LABEL: <load>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_TLSDESC_ADR_PAGE21 t1
; ARM64-NEXT:    ldr x1, [x0]
; ARM64-NEXT:     R_AARCH64_TLSDESC_LD64_LO12 t1
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_TLSDESC_ADD_LO12 t1
; ARM64-NEXT:    blr x1
; ARM64-NEXT:     R_AARCH64_TLSDESC_CALL t1
; ARM64-NEXT:    mrs x1, TPIDR_EL0
; ARM64-NEXT:    add x0, x1, x0
; ARM64-NEXT:    ldr w0, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %p = call ptr @llvm.threadlocal.address(ptr @t1)
  %l = load i32, ptr %p
  ret i32 %l
}

define void @store(i32 %v) {
; X64-LABEL: <store>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov dword ptr [rbp - 0x2c], edi
; X64-NEXT:    lea rdi, <store+0x18>
; X64-NEXT:     R_X86_64_TLSGD t1-0x4
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 __tls_get_addr-0x4
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x2c]
; X64-NEXT:    mov dword ptr [rax], ecx
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    nop dword ptr [rax + rax]
;
; ARM64-LABEL: <store>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    str w0, [x29, #0xa0]
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_TLSDESC_ADR_PAGE21 t1
; ARM64-NEXT:    ldr x1, [x0]
; ARM64-NEXT:     R_AARCH64_TLSDESC_LD64_LO12 t1
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_TLSDESC_ADD_LO12 t1
; ARM64-NEXT:    blr x1
; ARM64-NEXT:     R_AARCH64_TLSDESC_CALL t1
; ARM64-NEXT:    mrs x1, TPIDR_EL0
; ARM64-NEXT:    add x0, x1, x0
; ARM64-NEXT:    ldr w1, [x29, #0xa0]
; ARM64-NEXT:    str w1, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %p = call ptr @llvm.threadlocal.address(ptr @t1)
  store i32 %v, ptr %p
  ret void
}

; On AArch64, the TLS call only clobbers NZCV, X0, X1, LR.
define void @store3(i32, i32, i32 %v) {
; X64-LABEL: <store3>:
; X64:         push rbp
; X64-NEXT:    mov rbp, rsp
; X64-NEXT:    nop word ptr [rax + rax]
; X64-NEXT:    sub rsp, 0x40
; X64-NEXT:    mov dword ptr [rbp - 0x2c], edx
; X64-NEXT:    lea rdi, <store3+0x18>
; X64-NEXT:     R_X86_64_TLSGD t1-0x4
; X64-NEXT:    call <L0>
; X64-NEXT:     R_X86_64_PLT32 __tls_get_addr-0x4
; X64-NEXT:    mov ecx, dword ptr [rbp - 0x2c]
; X64-NEXT:    mov dword ptr [rax], ecx
; X64-NEXT:    add rsp, 0x40
; X64-NEXT:    pop rbp
; X64-NEXT:    ret
;
; ARM64-LABEL: <store3>:
; ARM64:         sub sp, sp, #0xb0
; ARM64-NEXT:    stp x29, x30, [sp]
; ARM64-NEXT:    mov x29, sp
; ARM64-NEXT:    nop
; ARM64-NEXT:    adrp x0, 0x0 <.text>
; ARM64-NEXT:     R_AARCH64_TLSDESC_ADR_PAGE21 t1
; ARM64-NEXT:    ldr x1, [x0]
; ARM64-NEXT:     R_AARCH64_TLSDESC_LD64_LO12 t1
; ARM64-NEXT:    add x0, x0, #0x0
; ARM64-NEXT:     R_AARCH64_TLSDESC_ADD_LO12 t1
; ARM64-NEXT:    blr x1
; ARM64-NEXT:     R_AARCH64_TLSDESC_CALL t1
; ARM64-NEXT:    mrs x1, TPIDR_EL0
; ARM64-NEXT:    add x0, x1, x0
; ARM64-NEXT:    str w2, [x0]
; ARM64-NEXT:    ldp x29, x30, [sp]
; ARM64-NEXT:    add sp, sp, #0xb0
; ARM64-NEXT:    ret
  %p = call ptr @llvm.threadlocal.address(ptr @t1)
  store i32 %v, ptr %p
  ret void
}
