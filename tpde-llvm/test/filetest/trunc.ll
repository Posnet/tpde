; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel --section=.text --section=.rodata - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always

; COM: these are all no-ops
define i1 @trunc_i64_i1(i64 %0) {
; X64-LABEL: trunc_i64_i1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %1 = trunc i64 %0 to i1
    ret i1 %1
}

define i8 @trunc_i64_i8(i64 %0) {
; X64-LABEL: trunc_i64_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %1 = trunc i64 %0 to i8
    ret i8 %1
}

define i16 @trunc_i64_i16(i64 %0) {
; X64-LABEL: trunc_i64_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %1 = trunc i64 %0 to i16
    ret i16 %1
}

define i32 @trunc_i64_i32(i64 %0) {
; X64-LABEL: trunc_i64_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov eax, edi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:     ...
  entry:
    %1 = trunc i64 %0 to i32
    ret i32 %1
}

define i37 @trunc_i64_i37(i64 %0) {
; X64-LABEL: trunc_i64_i37>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x10
; X64:    mov rax, rdi
; X64:    add rsp, 0x10
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = trunc i64 %0 to i37
    ret i37 %1
}

define i64 @trunc_i128_i64(i128 %0) {
; X64-LABEL: trunc_i128_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    mov rax, rdi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
  entry:
    %1 = trunc i128 %0 to i64
    ret i64 %1
}

define i1 @trunc_i64_i37_no_salvage(i64 %0) {
; X64-LABEL: trunc_i64_i37_no_salvage>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x20
; X64:    mov rax, rdi
; X64:    mov eax, edi
; X64:    add rsp, 0x20
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    <unknown>
  entry:
    %1 = trunc i64 %0 to i37
    %2 = trunc i64 %0 to i1
    ret i1 %2
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
