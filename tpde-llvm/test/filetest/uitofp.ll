; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel --section=.text --section=.rodata - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always


define float @i8tof32(i8 %0) {
; X64-LABEL: i8tof32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    cvtsi2ss xmm0, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  %1 = uitofp i8 %0 to float
  ret float %1
}

define float @i16tof32(i16 %0) {
; X64-LABEL: i16tof32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    cvtsi2ss xmm0, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = uitofp i16 %0 to float
  ret float %1
}

define float @i21tof32(i21 %0) {
; X64-LABEL: i21tof32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    and edi, 0x1fffff
; X64:    mov edi, edi
; X64:    cvtsi2ss xmm0, rdi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = uitofp i21 %0 to float
  ret float %1
}

define float @i32tof32(i32 %0) {
; X64-LABEL: i32tof32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    mov edi, edi
; X64:    cvtsi2ss xmm0, rdi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = uitofp i32 %0 to float
  ret float %1
}

define float @i37tof32(i37 %0) {
; X64-LABEL: i37tof32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    test rdi, rdi
; X64:    js <L0>
; X64:    cvtsi2ss xmm0, rdi
; X64:    jmp <L1>
; X64:  <L0>:
; X64:    mov rax, rdi
; X64:    shr rax
; X64:    and edi, 0x1
; X64:    or rdi, rax
; X64:    cvtsi2ss xmm0, rdi
; X64:    addss xmm0, xmm0
; X64:  <L1>:
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = uitofp i37 %0 to float
  ret float %1
}

define float @i64tof32(i64 %0) {
; X64-LABEL: i64tof32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    test rdi, rdi
; X64:    js <L0>
; X64:    cvtsi2ss xmm0, rdi
; X64:    jmp <L1>
; X64:  <L0>:
; X64:    mov rax, rdi
; X64:    shr rax
; X64:    and edi, 0x1
; X64:    or rdi, rax
; X64:    cvtsi2ss xmm0, rdi
; X64:    addss xmm0, xmm0
; X64:  <L1>:
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  %1 = uitofp i64 %0 to float
  ret float %1
}


define double @i8tof64(i8 %0) {
; X64-LABEL: i8tof64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movzx edi, dil
; X64:    cvtsi2sd xmm0, edi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  %1 = uitofp i8 %0 to double
  ret double %1
}

define double @i16tof64(i16 %0) {
; X64-LABEL: i16tof64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movzx edi, di
; X64:    cvtsi2sd xmm0, edi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = uitofp i16 %0 to double
  ret double %1
}

define double @i21tof64(i21 %0) {
; X64-LABEL: i21tof64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    and edi, 0x1fffff
; X64:    mov edi, edi
; X64:    cvtsi2sd xmm0, rdi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = uitofp i21 %0 to double
  ret double %1
}

define double @i32tof64(i32 %0) {
; X64-LABEL: i32tof64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov edi, edi
; X64:    cvtsi2sd xmm0, rdi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = uitofp i32 %0 to double
  ret double %1
}

define double @i37tof64(i37 %0) {
; X64-LABEL: i37tof64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    movq xmm0, rdi
; X64:    punpckldq {{.*#+}} xmm0 = xmm0[0],mem[0],xmm0[1],mem[1]
; X64:     R_X86_64_PC32 -0x4
; X64:    subpd xmm0, xmmword ptr <i37tof64+0x2e>
; X64:     R_X86_64_PC32 -0x4
; X64:    movupd xmm1, xmm0
; X64:    unpckhpd {{.*#+}} xmm1 = xmm1[1],xmm0[1]
; X64:    addsd xmm1, xmm0
; X64:    movupd xmm0, xmm1
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
entry:
  %1 = uitofp i37 %0 to double
  ret double %1
}

define double @i64tof64(i64 %0) {
; X64-LABEL: i64tof64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movq xmm0, rdi
; X64:    punpckldq {{.*#+}} xmm0 = xmm0[0],mem[0],xmm0[1],mem[1]
; X64:     R_X86_64_PC32 -0x4
; X64:    subpd xmm0, xmmword ptr <i64tof64+0x21>
; X64:     R_X86_64_PC32 -0x4
; X64:    movupd xmm1, xmm0
; X64:    unpckhpd {{.*#+}} xmm1 = xmm1[1],xmm0[1]
; X64:    addsd xmm1, xmm0
; X64:    movupd xmm0, xmm1
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    <unknown>
entry:
  %1 = uitofp i64 %0 to double
  ret double %1
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
