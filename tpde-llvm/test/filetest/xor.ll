; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always
; RUN: tpde_llvm --target=aarch64 %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses - | FileCheck %s -check-prefixes=ARM64,CHECK --enable-var-scope --dump-input always

define void @xor_i8_3(i8 %0) {
; X64-LABEL: xor_i8_3>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    xor edi, 0x3
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: xor_i8_3>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x3 // =3
; ARM64:    eor w1, w1, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i8 %0, 3
    ret void
}

define void @xor_i8_9(i8 %0) {
; X64-LABEL: xor_i8_9>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    xor edi, 0x9
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: xor_i8_9>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x9 // =9
; ARM64:    eor w1, w1, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i8 %0, 9
    ret void
}

define void @xor_i8_i8(i8 %0, i8 %1) {
; X64-LABEL: xor_i8_i8>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    xor edi, esi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: xor_i8_i8>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    eor w1, w1, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = xor i8 %0, %1
    ret void
}

define void @xor_i16_1ff0(i16 %0) {
; X64-LABEL: xor_i16_1ff0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    xor edi, 0x1ff0
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: xor_i16_1ff0>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x1ff0 // =8176
; ARM64:    eor w1, w1, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i16 %0, u0x1ff0
    ret void
}

define void @xor_i16_1ff1(i16 %0) {
; X64-LABEL: xor_i16_1ff1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    xor edi, 0x1ff1
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: xor_i16_1ff1>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x1ff1 // =8177
; ARM64:    eor w1, w1, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i16 %0, u0x1ff1
    ret void
}

define void @xor_i16_i16(i16 %0, i16 %1) {
; X64-LABEL: xor_i16_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    xor edi, esi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: xor_i16_i16>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    eor w1, w1, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = xor i16 %0, %1
    ret void
}

define void @xor_i32_1fffff0(i32 %0) {
; X64-LABEL: xor_i32_1fffff0>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    xor edi, 0x1fffff0
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: xor_i32_1fffff0>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x1fffff0 // =33554416
; ARM64:    eor w1, w1, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i32 %0, u0x1fffff0
    ret void
}

define void @xor_i32_1fffff1(i32 %0) {
; X64-LABEL: xor_i32_1fffff1>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    xor edi, 0x1fffff1
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: xor_i32_1fffff1>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0xfff1 // =65521
; ARM64:    movk x1, #0x1ff, lsl #16
; ARM64:    eor w1, w1, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i32 %0, u0x1fffff1
    ret void
}

define void @xor_i32_i32(i32 %0, i32 %1) {
; X64-LABEL: xor_i32_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor edi, esi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
;
; ARM64-LABEL: xor_i32_i32>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    eor w1, w1, w0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = xor i32 %0, %1
    ret void
}

define void @xor_i64_fffffffffff1ffff(i64 %0) {
; X64-LABEL: xor_i64_fffffffffff1ffff>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor rdi, -0xe0001
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: xor_i64_fffffffffff1ffff>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #-0xe0001 // =-917505
; ARM64:    eor x1, x1, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i64 %0, u0xfffffffffff1ffff
    ret void
}

define void @xor_i64_fffffffffff2ffff(i64 %0) {
; X64-LABEL: xor_i64_fffffffffff2ffff>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor rdi, -0xd0001
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: xor_i64_fffffffffff2ffff>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #-0xd0001 // =-851969
; ARM64:    eor x1, x1, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i64 %0, u0xfffffffffff2ffff
    ret void
}

define void @xor_i64_i64(i64 %0, i64 %1) {
; X64-LABEL: xor_i64_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor rdi, rsi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: xor_i64_i64>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    eor x1, x1, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = xor i64 %0, %1
    ret void
}

define void @xor_i37_3(i37 %0) {
; X64-LABEL: xor_i37_3>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor rdi, 0x3
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
;
; ARM64-LABEL: xor_i37_3>:
; ARM64:    sub sp, sp, #0xb0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x3 // =3
; ARM64:    eor x1, x1, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xb0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i37 %0, 3
    ret void
}

define void @xor_i37_i37(i37 %0, i37 %1) {
; X64-LABEL: xor_i37_i37>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    xor rdi, rsi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: xor_i37_i37>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    eor x1, x1, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = xor i37 %0, %1
    ret void
}

define void @xor_i128_3(i128 %0) {
; X64-LABEL: xor_i128_3>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov rax, rdi
; X64:    xor rax, 0x3
; X64:    xor rsi, 0x0
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: xor_i128_3>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov w2, #0x0 // =0
; ARM64:    eor x2, x2, x1
; ARM64:    mov x3, #0x3 // =3
; ARM64:    eor x3, x3, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i128 %0, 3
    ret void
}

define void @xor_i128_30000000000000003(i128 %0) {
; X64-LABEL: xor_i128_30000000000000003>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov rax, rdi
; X64:    xor rax, 0x3
; X64:    xor rsi, 0x3
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: xor_i128_30000000000000003>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x2, #0x3 // =3
; ARM64:    eor x2, x2, x1
; ARM64:    mov x3, #0x3 // =3
; ARM64:    eor x3, x3, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i128 %0, u0x30000000000000003
    ret void
}

define void @xor_i128_90000000000000003(i128 %0) {
; X64-LABEL: xor_i128_90000000000000003>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov rax, rdi
; X64:    xor rax, 0x3
; X64:    xor rsi, 0x9
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: xor_i128_90000000000000003>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x2, #0x9 // =9
; ARM64:    eor x2, x2, x1
; ARM64:    mov x3, #0x3 // =3
; ARM64:    eor x3, x3, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i128 %0, u0x90000000000000003
    ret void
}

define void @xor_i128_90000000000000009(i128 %0) {
; X64-LABEL: xor_i128_90000000000000009>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x50
; X64:    mov rax, rdi
; X64:    xor rax, 0x9
; X64:    xor rsi, 0x9
; X64:    add rsp, 0x50
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: xor_i128_90000000000000009>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x2, #0x9 // =9
; ARM64:    eor x2, x2, x1
; ARM64:    mov x3, #0x9 // =9
; ARM64:    eor x3, x3, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i128 %0, u0x90000000000000009
    ret void
}

define void @xor_i128_i128(i128 %0, i128 %1) {
; X64-LABEL: xor_i128_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    mov rax, rdi
; X64:    xor rax, rdx
; X64:    xor rsi, rcx
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: xor_i128_i128>:
; ARM64:    sub sp, sp, #0xd0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    eor x4, x3, x1
; ARM64:    eor x2, x2, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xd0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = xor i128 %0, %1
    ret void
}

define void @xor_i64_no_salvage_imm(i64 %0) {
; X64-LABEL: xor_i64_no_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov rax, rdi
; X64:    xor rax, 0x3
; X64:    xor rdi, rax
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
;
; ARM64-LABEL: xor_i64_no_salvage_imm>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x3 // =3
; ARM64:    eor x1, x1, x0
; ARM64:    eor x1, x1, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i64 %0, 3
    %2 = xor i64 %0, %1
    ret void
}

define void @xor_i64_no_salvage_reg(i64 %0, i64 %1) {
; X64-LABEL: xor_i64_no_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov rax, rdi
; X64:    xor rax, rsi
; X64:    xor rdi, rax
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: xor_i64_no_salvage_reg>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    eor x1, x1, x0
; ARM64:    eor x1, x1, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = xor i64 %0, %1
    %3 = xor i64 %0, %2
    ret void
}

define void @xor_i37_no_salvage_imm(i37 %0) {
; X64-LABEL: xor_i37_no_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov rax, rdi
; X64:    xor rax, 0x3
; X64:    xor rdi, rax
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
;
; ARM64-LABEL: xor_i37_no_salvage_imm>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov x1, #0x3 // =3
; ARM64:    eor x1, x1, x0
; ARM64:    eor x1, x1, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i37 %0, 3
    %2 = xor i37 %0, %1
    ret void
}

define void @xor_i37_no_salvage_reg(i37 %0, i37 %1) {
; X64-LABEL: xor_i37_no_salvage_reg>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov rax, rdi
; X64:    xor rax, rsi
; X64:    xor rdi, rax
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
;
; ARM64-LABEL: xor_i37_no_salvage_reg>:
; ARM64:    sub sp, sp, #0xc0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    eor x1, x1, x0
; ARM64:    eor x1, x1, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xc0
; ARM64:    ret
; ARM64:     ...
entry:
    %2 = xor i37 %0, %1
    %3 = xor i37 %0, %2
    ret void
}

define void @xor_i128_no_salvage_imm(i128 %0) {
; X64-LABEL: xor_i128_no_salvage_imm>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x60
; X64:    mov rax, rdi
; X64:    xor rax, 0x3
; X64:    mov rcx, rsi
; X64:    xor rcx, 0x0
; X64:    mov rdx, rdi
; X64:    xor rdx, rax
; X64:    xor rsi, rcx
; X64:    add rsp, 0x60
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
; X64:    <unknown>
;
; ARM64-LABEL: xor_i128_no_salvage_imm>:
; ARM64:    sub sp, sp, #0xd0
; ARM64:    stp x29, x30, [sp]
; ARM64:    mov x29, sp
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    nop
; ARM64:    mov w2, #0x0 // =0
; ARM64:    eor x2, x2, x1
; ARM64:    mov x3, #0x3 // =3
; ARM64:    eor x3, x3, x0
; ARM64:    eor x4, x2, x1
; ARM64:    eor x3, x3, x0
; ARM64:    ldp x29, x30, [sp]
; ARM64:    add sp, sp, #0xd0
; ARM64:    ret
; ARM64:     ...
entry:
    %1 = xor i128 %0, 3
    %2 = xor i128 %0, %1
    ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
