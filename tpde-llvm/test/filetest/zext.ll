; NOTE: Assertions have been autogenerated by utils/update_tpde_llvm_test_checks.py UTC_ARGS: --tool tpde_llvm --default-march x86-64-v2 --filter-out "int3" --version 5
; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: tpde_llvm %s | llvm-objdump -d -r --no-show-raw-insn --symbolize-operands --no-addresses --x86-asm-syntax=intel --section=.text --section=.rodata - | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always


define i16 @zext_i8_to_i16(i8 %0) {
; X64-LABEL: zext_i8_to_i16>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    mov eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  %1 = zext i8 %0 to i16
  ret i16 %1
}

define i21 @zext_i8_to_i21(i8 %0) {
; X64-LABEL: zext_i8_to_i21>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    mov eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  %1 = zext i8 %0 to i21
  ret i21 %1
}

define i32 @zext_i8_to_i32(i8 %0) {
; X64-LABEL: zext_i8_to_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, dil
; X64:    mov eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  %1 = zext i8 %0 to i32
  ret i32 %1
}

define i37 @zext_i8_to_i37(i8 %0) {
; X64-LABEL: zext_i8_to_i37>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movzx edi, dil
; X64:    mov rax, rdi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = zext i8 %0 to i37
  ret i37 %1
}

define i64 @zext_i8_to_i64(i8 %0) {
; X64-LABEL: zext_i8_to_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movzx edi, dil
; X64:    mov rax, rdi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = zext i8 %0 to i64
  ret i64 %1
}

define i128 @zext_i8_to_i128(i8 %0) {
; X64-LABEL: zext_i8_to_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movzx edi, dil
; X64:    mov eax, 0x0
; X64:    mov qword ptr [rbp - 0x38], rax
; X64:    mov rax, rdi
; X64:    mov rdx, qword ptr [rbp - 0x38]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  %1 = zext i8 %0 to i128
  ret i128 %1
}


define i21 @zext_i16_to_i21(i16 %0) {
; X64-LABEL: zext_i16_to_i21>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    mov eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = zext i16 %0 to i21
  ret i21 %1
}

define i32 @zext_i16_to_i32(i16 %0) {
; X64-LABEL: zext_i16_to_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movzx edi, di
; X64:    mov eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = zext i16 %0 to i32
  ret i32 %1
}

define i37 @zext_i16_to_i37(i16 %0) {
; X64-LABEL: zext_i16_to_i37>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movzx edi, di
; X64:    mov rax, rdi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  %1 = zext i16 %0 to i37
  ret i37 %1
}

define i64 @zext_i16_to_i64(i16 %0) {
; X64-LABEL: zext_i16_to_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movzx edi, di
; X64:    mov rax, rdi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  %1 = zext i16 %0 to i64
  ret i64 %1
}

define i128 @zext_i16_to_i128(i16 %0) {
; X64-LABEL: zext_i16_to_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movzx edi, di
; X64:    mov eax, 0x0
; X64:    mov qword ptr [rbp - 0x38], rax
; X64:    mov rax, rdi
; X64:    mov rdx, qword ptr [rbp - 0x38]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = zext i16 %0 to i128
  ret i128 %1
}


define i32 @zext_i21_to_i32(i21 %0) {
; X64-LABEL: zext_i21_to_i32>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    and edi, 0x1fffff
; X64:    mov eax, edi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
entry:
  %1 = zext i21 %0 to i32
  ret i32 %1
}

define i37 @zext_i21_to_i37(i21 %0) {
; X64-LABEL: zext_i21_to_i37>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    and edi, 0x1fffff
; X64:    mov rax, rdi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = zext i21 %0 to i37
  ret i37 %1
}

define i64 @zext_i21_to_i64(i21 %0) {
; X64-LABEL: zext_i21_to_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    and edi, 0x1fffff
; X64:    mov rax, rdi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = zext i21 %0 to i64
  ret i64 %1
}

define i128 @zext_i21_to_i128(i21 %0) {
; X64-LABEL: zext_i21_to_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    and edi, 0x1fffff
; X64:    mov eax, 0x0
; X64:    mov qword ptr [rbp - 0x38], rax
; X64:    mov rax, rdi
; X64:    mov rdx, qword ptr [rbp - 0x38]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
entry:
  %1 = zext i21 %0 to i128
  ret i128 %1
}


define i37 @zext_i32_to_i37(i32 %0) {
; X64-LABEL: zext_i32_to_i37>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov edi, edi
; X64:    mov rax, rdi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = zext i32 %0 to i37
  ret i37 %1
}

define i64 @zext_i32_to_i64(i32 %0) {
; X64-LABEL: zext_i32_to_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov edi, edi
; X64:    mov rax, rdi
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rax], al
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = zext i32 %0 to i64
  ret i64 %1
}

define i128 @zext_i32_to_i128(i32 %0) {
; X64-LABEL: zext_i32_to_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov edi, edi
; X64:    mov eax, 0x0
; X64:    mov qword ptr [rbp - 0x38], rax
; X64:    mov rax, rdi
; X64:    mov rdx, qword ptr [rbp - 0x38]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
entry:
  %1 = zext i32 %0 to i128
  ret i128 %1
}


define i64 @zext_i37_to_i64(i37 %0) {
; X64-LABEL: zext_i37_to_i64>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x30
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    mov rax, rdi
; X64:    add rsp, 0x30
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
entry:
  %1 = zext i37 %0 to i64
  ret i64 %1
}

define i128 @zext_i37_to_i128(i37 %0) {
; X64-LABEL: zext_i37_to_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    movabs rax, 0x1fffffffff
; X64:    and rdi, rax
; X64:    mov eax, 0x0
; X64:    mov qword ptr [rbp - 0x38], rax
; X64:    mov rax, rdi
; X64:    mov rdx, qword ptr [rbp - 0x38]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rbp + 0x48], dl
entry:
  %1 = zext i37 %0 to i128
  ret i128 %1
}


define i128 @zext_i64_to_i128(i64 %0) {
; X64-LABEL: zext_i64_to_i128>:
; X64:    push rbp
; X64:    mov rbp, rsp
; X64:    nop word ptr [rax + rax]
; X64:    sub rsp, 0x40
; X64:    mov eax, 0x0
; X64:    mov qword ptr [rbp - 0x38], rax
; X64:    mov rax, rdi
; X64:    mov rdx, qword ptr [rbp - 0x38]
; X64:    add rsp, 0x40
; X64:    pop rbp
; X64:    ret
; X64:     ...
; X64:    add byte ptr [rax], al
entry:
  %1 = zext i64 %0 to i128
  ret i128 %1
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
