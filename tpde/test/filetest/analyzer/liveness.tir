; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: %tpde_test --run-until=analyzer --print-liveness %s | FileCheck %s --dump-input always

; CHECK: Liveness for simple
; CHECK-NEXT: 0: 2 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 1: 2 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 2: 5 refs, 0->2 (entry->ret), lf: false
; CHECK-NEXT: 3: 5 refs, 0->1 (entry->loop), lf: true
; CHECK-NEXT: 4: 2 refs, 1->1 (loop->loop), lf: false
; CHECK-NEXT: 5: 2 refs, 1->1 (loop->loop), lf: false
; CHECK-NEXT: 6: 2 refs, 1->1 (loop->loop), lf: false
; CHECK-NEXT: 7: 1 refs, 2->2 (ret->ret), lf: false
; CHECK-NEXT: 8: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: End Liveness
simple(%a) {
entry:
  %const =
  jump %loop
loop:
  %b = phi [%entry, %const], [%loop, %e]
  %c = phi [%entry, %a], [%loop, %f]
  %d = %c
  %e = %b, %d
  %f = %c
  jump %loop, %ret
ret:
  %ret = %b
  terminate
}

; CHECK: Liveness for nest_extend
; CHECK-NEXT: 0: 2 refs, 0->3 (entry->loop_inner2), lf: true
; CHECK-NEXT: 1: 1 refs, 2->2 (loop_inner1->loop_inner1), lf: false
; CHECK-NEXT: 2: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: End Liveness
nest_extend() {
entry:
  %a =
  jump %loop1
loop1:
  jump %loop_inner1, %ret
loop_inner1:
  %b = %a
  jump %loop_inner1, %loop_inner2
loop_inner2:
  jump %loop_inner2, %loop1
ret:
  terminate
}

; CHECK: Liveness for ret
; CHECK-NEXT: 0: 2 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 1: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: End Liveness
ret(%a) {
entry:
  terminate %a
}

; CHECK: Liveness for call
; CHECK-NEXT: 0: 2 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 1: 2 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 2: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: End Liveness
call(%a) {
entry:
  %b = call %ret, %a
  terminate %b
}