; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: %tpde_test --run-until=analyzer --print-liveness %s | FileCheck %s --dump-input always

; CHECK: Liveness for simple
; CHECK-NEXT: 0: 2 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 1: 2 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 2: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 3: 4 refs, 0->2 (entry->ret), lf: false
; CHECK-NEXT: 4: 4 refs, 0->1 (entry->loop), lf: true
; CHECK-NEXT: 5: 2 refs, 1->1 (loop->loop), lf: false
; CHECK-NEXT: 6: 2 refs, 1->1 (loop->loop), lf: false
; CHECK-NEXT: 7: 2 refs, 1->1 (loop->loop), lf: false
; CHECK-NEXT: 8: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 9: 1 refs, 2->2 (ret->ret), lf: false
; CHECK-NEXT: 10: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: End Liveness
simple(%a) {
entry:
  %const =
  jump ^loop
loop:
  %b = phi [^entry, %const], [^loop, %e]
  %c = phi [^entry, %a], [^loop, %f]
  %d = %c
  %e = %b, %d
  %f = %c
  jump ^loop, ^ret
ret:
  %ret = %b
  terminate
}

; CHECK: Liveness for nest_extend
; CHECK-NEXT: 0: 2 refs, 0->3 (entry->loop_inner2), lf: true
; CHECK-NEXT: 1: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 2: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 3: 1 refs, 2->2 (loop_inner1->loop_inner1), lf: false
; CHECK-NEXT: 4: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 5: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 6: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: End Liveness
nest_extend() {
entry:
  %a =
  jump ^loop1
loop1:
  jump ^loop_inner1, ^ret
loop_inner1:
  %b = %a
  jump ^loop_inner1, ^loop_inner2
loop_inner2:
  jump ^loop_inner2, ^loop1
ret:
  terminate
}

; CHECK: Liveness for ret
; CHECK-NEXT: 0: 2 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 1: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: End Liveness
ret(%a) {
entry:
  ret %a
}

; CHECK: Liveness for call
; CHECK-NEXT: 0: 2 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 1: 2 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 2: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: End Liveness
call(%a) {
entry:
  %b = call @ret, %a
  ret %b
}

; CHECK: Liveness for if1
; CHECK-NEXT: 0: 2 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 1: 2 refs, 0->3 (entry->end_block), lf: false
; CHECK-NEXT: 2: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 3: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 4: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 5: 2 refs, 3->3 (end_block->end_block), lf: false
; CHECK-NEXT: 6: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: End Liveness
if1(%a) {
entry:
  %b = %a
  jump ^true_block, ^false_block
true_block:
  jump ^end_block
false_block:
  jump ^end_block
end_block:
  %c = %b
  ret %c
}

; CHECK: Liveness for if2
; CHECK-NEXT: 0: 2 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 1: 2 refs, 0->3 (entry->end_block), lf: false
; CHECK-NEXT: 2: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 3: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 4: 2 refs, 3->3 (end_block->end_block), lf: false
; CHECK-NEXT: 5: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: 6: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: End Liveness
if2(%a) {
entry:
  %b = %a
  jump ^true_block, ^false_block
true_block:
  jump ^end_block
end_block:
  %c = %b
  ret %c
false_block:
  jump ^end_block
}

; CHECK: Liveness for loop
; CHECK-NEXT:   0: 2 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT:   1: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT:   2: 3 refs, 0->1 (entry->loop), lf: true
; CHECK-NEXT:   3: 2 refs, 1->1 (loop->loop), lf: false
; CHECK-NEXT:   4: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT:   5: 0 refs, 0->0 (entry->entry), lf: false
; CHECK-NEXT: End Liveness
loop() {
entry:
  %init =
  jump ^loop
loop:
  %phi = phi [^entry, %init], [^loop, %inc]
  %inc = %phi
  jump ^loop, ^ret
ret:
  terminate
}
