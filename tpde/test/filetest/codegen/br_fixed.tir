; SPDX-FileCopyrightText: 2024 Tobias Schwarz <tobias.schwarz@tum.de>
;
; SPDX-License-Identifier: LicenseRef-Proprietary

; RUN: rm -rf %t
; RUN: mkdir %t

; RUN: %tpde_test %s -o %t/out.o
; RUN: objdump -Mintel-syntax --no-addresses --no-show-raw-insn --disassemble %t/out.o | FileCheck %s -check-prefixes=X64,CHECK --enable-var-scope --dump-input always


; COM: Adopted versions from br.tir

; CHECK-LABEL: condbr1
condbr1(%a, %b) {
entry:
; X64: sub rsp
; COM: a bit unfortunate, maybe need special handling for args at some point
; X64-NEXT: mov r10,rdi
; X64-NEXT: mov r11,rsi
; X64-NEXT: cmp r10,0
; X64-NEXT: je
  condbr %a, %ret1, %ret2
ret1:
; X64-NEXT: mov rax,r10
; X64-NEXT: add rsp
  terminate %a
ret2:
; X64: mov rax,r11
; X64-NEXT: add rsp
  terminate %b
}

; CHECK-LABEL: condbr2
condbr2(%a, %b) {
entry:
; X64: sub rsp
; COM: spill
; X64-NEXT: mov r10,rdi
; X64-NEXT: mov r11,rsi
; X64-NEXT: cmp r10,0x0
; X64-NEXT: jne
  condbr %a, %ret1, %ret2
ret2:
; X64-NEXT: mov rax,r11
; X64-NEXT: add rsp
  terminate %b
ret1:
; X64: mov rax,r10
; X64-NEXT: add rsp
  terminate %a
}

; CHECK-LABEL: condbr3
condbr3(%a, %b, %c) {
entry:
; X64: sub rsp
; X64-NEXT: mov r10,rsi
; X64-NEXT: mov r11,rdx
; X64-NEXT: cmp rdi,0
; X64-NEXT: jne
; COM: PHI-resolution for f
; X64-NEXT: mov rcx,r10
; X64-NEXT: jmp
  condbr %a, %t, %f
t:
; X64-NEXT: add r10,r11
; X64-NEXT: mov rcx,r10
  %d = add %b, %c
  br %f
f:
  %e = phi [%entry, %b], [%t, %d]
; X64-NEXT: sub r11,rcx
; X64-NEXT: mov rax,r11
  %f = sub %c, %e
; X64-NEXT: add rsp
  terminate %f
}


; CHECK-LABEL: loop1
loop1(%a, %b) {
entry:
; X64: sub rsp
; X64-NEXT: mov r10,rsi
; COM: move of %a into %p
; X64-NEXT: mov rcx,rdi
  br %loop_head
loop_head:
  %p = phi [%entry, %a], [%loop_body, %c]
; X64-NEXT: cmp rcx,0x0
; X64-NEXT: je
  condbr %p, %loop_body, %ret
loop_body:
; X64-NEXT: mov rax,rcx
; X64-NEXT: sub rax,r10
  %c = sub %p, %b
; X64-NEXT: mov rcx,rax
; X64-NEXT: jmp
  br %loop_head
ret:
; X64-NEXT: add rsp
  terminate
}

; CHECK-LABEL: phi_chain1
phi_chain1(%a) {
entry:
; X64: sub rsp
; COM: move into p1
; X64-NEXT: mov rcx,rdi
; COM: move into p2
; X64-NEXT: mov rsi,rdi
  br %loop_head
loop_head:
  %p1 = phi [%entry, %a], [%loop_body, %c]
  %p2 = phi [%entry, %a], [%loop_body, %p1]
; X64-NEXT: cmp rsi,0x0
; X64-NEXT: je
  condbr %p2, %loop_body, %ret
loop_body:
; X64-NEXT: lea rax,[rcx+rsi*1]
  %c = add %p1, %p2
; COM: move first into p2
; X64-NEXT: mov rsi,rcx
; X64-NEXT: mov rcx,rax
; X64-NEXT: jmp
  br %loop_head
ret:
; X64-NEXT: add rsp
  terminate
}

; CHECK-LABEL: phi_cycle1
phi_cycle1(%a) {
entry:
; X64: sub rsp
; COM: move into p1
; X64-NEXT: mov rcx,rdi
; COM: move into p2
; X64-NEXT: mov rsi,rdi
  br %loop_head
loop_head:
  %p1 = phi [%entry, %a], [%loop_body, %p2]
  %p2 = phi [%entry, %a], [%loop_body, %p1]
; X64-NEXT: cmp rsi,0x0
; X64-NEXT: je
  condbr %p2, %loop_body, %ret
loop_body:
; X64-NEXT: lea rax,[rcx+rsi*1]
  %c = add %p1, %p2
; COM: break cycle by moving p1 into temporary
; X64-NEXT: mov rax,rcx
; X64-NEXT: mov rcx,rsi
; X64-NEXT: mov rsi,rax
; X64-NEXT: jmp
  br %loop_head
ret:
; X64-NEXT: add rsp
  terminate
}
